<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml" rel="self" type="application/rss+xml"/>
    <title>RiverCold</title>
    <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/</link>
    <description>Welcome to RiverCold's blog!</description>
    <language>en-US</language>
    <pubDate>Sun, 14 Aug 2022 14:59:28 GMT</pubDate>
    <lastBuildDate>Sun, 14 Aug 2022 14:59:28 GMT</lastBuildDate>
    <generator>@mr-hope/vuepress-plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>Guide</category>
    <category>使用指南</category>
    <item>
      <title>1.md</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/code/C++/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/code/C++/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">1.md</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_1-md"> 1.md</h1>
<p>C++!</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.md</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/code/SQL/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/code/SQL/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">1.md</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_1-md"> 1.md</h1>
<p>SQL!</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.md</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/code/Python/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/code/Python/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">1.md</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_1-md"> 1.md</h1>
<p>Python!</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.md</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/code/Java/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/code/Java/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">1.md</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_1-md"> 1.md</h1>
<p>Java!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Encryption article</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/guide/encrypt/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/guide/encrypt/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">Encryption article</source>
      <category>Guide</category>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="encryption-article"> Encryption article</h1>
<p>The actual article content.</p>
<p>Paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text.</p>
<p>Paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text.</p>
]]></content:encoded>
    </item>
    <item>
      <title>page config</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/guide/page/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/guide/page/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">page config</source>
      <category>Guide</category>
      <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="page-information"> Page information</h2>
<p>You can set page information in Markdown’s Frontmatter.</p>
<ul>
<li>
<p>The author is set to Ms.Hope.</p>
</li>
<li>
<p>The writing time should be January 1, 2020</p>
</li>
<li>
<p>Category is &quot;Guide&quot;</p>
</li>
<li>
<p>Tags are &quot;Page Config&quot; and &quot;Guide&quot;</p>
</li>
</ul>
<h2 id="page-content"> Page content</h2>
<p>You are free to write your Markdown here.</p>
<div><p>Tips</p>
<ul>
<li>
<p>Please use the relative link <code>./</code> for pictures in the Markdown folder.</p>
</li>
<li>
<p>For pictures in <code>.vuepress/public</code> folder, please use absolute link <code>/</code> for reference</p>
</li>
</ul>
</div>
<p>The theme contains a custom badge:</p>
<blockquote>
<p>A dark blue badge text badge at the end of line. <i>Not supported content</i></p>
</blockquote>
<h2 id="page-structure"> Page structure</h2>
<p>This page should contain:</p>
<ul>
<li>Back to top button</li>
<li>Route navigation</li>
<li>Comments</li>
<li>Footer</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Markdown Enhance</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/guide/markdown/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/guide/markdown/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">Markdown Enhance</source>
      <description>&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;vuepress-theme-hope&amp;lt;/code&amp;gt; enables more syntax in Markdown via the built-in &amp;lt;a href=&amp;quot;https://vuepress-theme-hope.github.io/md-enhance&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noopener noreferrer&amp;quot;&amp;gt;md-enhance&amp;lt;/a&amp;gt; plugin.&amp;lt;/p&amp;gt;
</description>
      <category>Guide</category>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<p><code>vuepress-theme-hope</code> enables more syntax in Markdown via the built-in <a href="https://vuepress-theme-hope.github.io/md-enhance" target="_blank" rel="noopener noreferrer">md-enhance</a> plugin.</p>

<h2 id="enable-all"> Enable all</h2>
<p>You can set <code>themeconfig.mdEnhance.enableAll</code> to enable all features of the <a href="https://vuepress-theme-hope.github.io/md-enhance" target="_blank" rel="noopener noreferrer">md-enhance</a> plugin.</p>
<div><div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br></div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>themeConfig</span><span>:</span> <span>{</span>
    <span>mdEnhance</span><span>:</span> <span>{</span>
      <span>enableAll</span><span>:</span> <span>true</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="new-feature"> New Feature</h2>
<h3 id="superscript-and-subscript"> Superscript and Subscript</h3>
<p>19<sup>th</sup> H<sub>2</sub>O</p>
<details><summary>Code</summary>
<div><pre><code>19^th^ H<span><span>~</span><span>2</span><span>~</span></span>O
</code></pre>
<div><span>1</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/guide/markdown/sup-sub/" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h3 id="align"> Align</h3>
<div>
<p>I am center</p>
</div>
<div>
<p>I am right align</p>
</div>
<details><summary>Code</summary>
<div><pre><code>::: center

I am center

:::

::: right

I am right align

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/guide/markdown/align/" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h3 id="footnote"> Footnote</h3>
<p>This text has footnote<sup></sup>.</p>
<details><summary>Code</summary>
<div><pre><code>This text has footnote[^first].

<span><span>[</span><span>^first</span><span>]</span><span>:</span> This</span> is footnote content
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/guide/markdown/footnote/" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h3 id="mark"> Mark</h3>
<p>You can mark <mark>important words</mark> .</p>
<details><summary>Code</summary>
<div><pre><code>You can mark ==important words== .
</code></pre>
<div><span>1</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/guide/markdown/mark/" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h3 id="tasklist"> Tasklist</h3>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-0"><label for="task-item-0"> Plan A</label></li>
<li><input type="checkbox"  disabled="disabled" id="task-item-1"><label for="task-item-1"> Plan B</label></li>
</ul>
<details><summary>Code</summary>
<div><pre><code><span>-</span> [x] Plan A
<span>-</span> [ ] Plan B
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/guide/markdown/tasklist/" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h3 id="flowchart"> Flowchart</h3>
<i>Not supported content</i><details><summary>Code</summary>
<div><pre><code><span><span>```</span><span>flow</span>
<span>cond=>condition: Process?
process=>operation: Process
e=>end: End

cond(yes)->process->e
cond(no)->e</span>
<span>```</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/guide/markdown/flowchart/" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h2 id="mermaid"> Mermaid</h2>
<Mermaid id="mermaid-64a57060" data-code="graph%20TD%3B%0A%20%20%20%20A--%3EB%3B%0A%20%20%20%20A--%3EC%3B%0A%20%20%20%20B--%3ED%3B%0A%20%20%20%20C--%3ED%3B%0A"></Mermaid><details><summary>Code</summary>
<div><pre><code><span><span>```</span><span>mermaid</span>
<span>graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;</span>
<span>```</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/guide/markdown/mermaid/" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h3 id="tex"> Tex</h3>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:2.4em;vertical-align:-0.95em;"></span><span><span></span><span><span><span><span style="height:1.3714em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.05556em;">∂</span><span><span style="margin-right:0.03588em;">ω</span><span><span><span><span style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.05556em;">∂</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="margin-right:0.1667em;"></span><span><span style="top:0em;"><span>(</span></span><span><span></span><span><span><span><span style="height:1.3414em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>)</span></span></span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:3.0277em;vertical-align:-1.2777em;"></span><span><span style="top:0em;"><span>(</span></span><span><span></span><span><span><span><span style="height:1.3414em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>)</span></span></span><span style="margin-right:0.1667em;"></span><span><span style="top:0em;"><span>{</span></span><span>(</span><span>lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">y</span><span><span>)</span><span><span><span><span style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span><span><span><span style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span style="height:3.05em;"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style="top:-3.05em;"><span style="height:3.05em;"></span><span><span>∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span style="height:3.05em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span><span>​</span></span><span><span style="height:1.2777em;"><span></span></span></span></span></span><span style="margin-right:0.1667em;"></span><span><span></span><span><span><span><span style="height:1.5017em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">ω</span><span><span><span><span style="height:0.7507em;"><span style="top:-2.989em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span>(</span><span>−</span><span>1</span><span><span>)</span><span><span><span><span style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span></span></span></span></span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.1667em;"></span><span>⋯</span><span style="margin-right:0.1667em;"></span><span>(</span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>i</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span>1</span><span>)</span><span>(</span><span>lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">y</span><span><span>)</span><span><span><span><span style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.02778em;">r</span><span>−</span><span>i</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>}</span></span></span></span></span></span></span></p>
<details><summary>Code</summary>
<div><pre><code>$$
\frac {\partial^r} {\partial \omega^r} \left(\frac {y^{\omega}} {\omega}\right)
= \left(\frac {y^{\omega}} {\omega}\right) \left\{(\log y)^r + \sum_{i=1}^r \frac {(-1)^i r \cdots (r-i+1) (\log y)^{r-i}} {\omega^i} \right\}
$$
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/guide/markdown/tex/" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h3 id="demo"> Demo</h3>

          <div
            id="code-demo-688e9568"
           
  
 data-title="A%20normal%20demo"

            data-code="%7B%22html%22%3A%22%3Ch1%3EMr.Hope%3C%2Fh1%3E%5Cn%3Cp%3EIs%20%3Cspan%20id%3D%5C%22very%5C%22%3Every%3C%2Fspan%3E%20handsome%3C%2Fp%3E%5Cn%22%2C%22js%22%3A%22document.querySelector(%5C%22%23very%5C%22).addEventListener(%5C%22click%5C%22%2C%20()%20%3D%3E%20%7B%5Cn%20%20alert(%5C%22Very%20handsome!%5C%22)%3B%5Cn%7D)%3B%5Cn%22%2C%22css%22%3A%22span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>h1</span><span>></span></span>Mr.Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span>Is <span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>very<span><span><span>&lt;/</span>span</span><span>></span></span> handsome<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"Very handsome!"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>Code</summary>
<div><pre><code>::: demo A normal demo

<span><span>```</span><span>html</span>
<span><span><span><span>&lt;</span>h1</span><span>></span></span>Mr.Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span>Is <span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>very<span><span><span>&lt;/</span>span</span><span>></span></span> handsome<span><span><span>&lt;/</span>p</span><span>></span></span></span>
<span>```</span></span>

<span><span>```</span><span>js</span>
<span>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"Very handsome!"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span></span>
<span>```</span></span>

<span><span>```</span><span>css</span>
<span><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></details>

          <div
            id="code-demo-4ead1181"
           
  data-type="react"
 data-title="A%20react%20demo"

            data-code="%7B%22js%22%3A%22export%20default%20class%20App%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.state%20%3D%20%7B%20message%3A%20%5C%22very%20handsome%5C%22%20%7D%3B%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%20className%3D%5C%22box-react%5C%22%3E%5Cn%20%20%20%20%20%20%20%20Mr.Hope%20is%20%3Cspan%3E%7Bthis.state.message%7D%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22css%22%3A%22.box-react%20span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>
  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>props<span>)</span><span>;</span>
    <span>this</span><span>.</span>state <span>=</span> <span>{</span> <span>message</span><span>:</span> <span>"very handsome"</span> <span>}</span><span>;</span>
  <span>}</span>
  <span>render</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>(</span>
      <span>&lt;</span>div className<span>=</span><span>"box-react"</span><span>></span>
        Mr<span>.</span>Hope is <span>&lt;</span>span<span>></span><span>{</span><span>this</span><span>.</span>state<span>.</span>message<span>}</span><span>&lt;</span><span>/</span>span<span>></span>
      <span>&lt;</span><span>/</span>div<span>></span>
    <span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><div><pre><code><span>.box-react span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>Code</summary>
<div><pre><code>::: demo [react] A react demo

<span><span>```</span><span>js</span>
<span><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>
  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>props<span>)</span><span>;</span>
    <span>this</span><span>.</span>state <span>=</span> <span>{</span> <span>message</span><span>:</span> <span>"very handsome"</span> <span>}</span><span>;</span>
  <span>}</span>
  <span>render</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>(</span>
      <span>&lt;</span>div className<span>=</span><span>"box-react"</span><span>></span>
        Mr<span>.</span>Hope is <span>&lt;</span>span<span>></span><span>{</span><span>this</span><span>.</span>state<span>.</span>message<span>}</span><span>&lt;</span><span>/</span>span<span>></span>
      <span>&lt;</span><span>/</span>div<span>></span>
    <span>)</span><span>;</span>
  <span>}</span>
<span>}</span></span>
<span>```</span></span>

<span><span>```</span><span>css</span>
<span><span>.box-react span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></details>

          <div
            id="code-demo-4edf655c"
           
  data-type="vue"
 data-title="A%20vue%20demo"

            data-code="%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22box%5C%22%3E%5Cn%20%20%20%20Mr.Hope%20is%20%3Cspan%3E%7B%7B%20message%20%7D%7D%3C%2Fspan%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20data%3A%20()%20%3D%3E%20(%7B%20message%3A%20%5C%22very%20handsome%5C%22%20%7D)%2C%5Cn%7D%3B%5Cn%3C%2Fscript%3E%5Cn%3Cstyle%3E%5Cn.box%20span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%3C%2Fstyle%3E%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>box<span>"</span></span><span>></span></span>
    Mr.Hope is <span><span><span>&lt;</span>span</span><span>></span></span>{{ message }}<span><span><span>&lt;/</span>span</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>
<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>(</span><span>{</span> <span>message</span><span>:</span> <span>"very handsome"</span> <span>}</span><span>)</span><span>,</span>
<span>}</span><span>;</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span><span>></span></span><span><span>
<span>.box span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>Code</summary>
<div><pre><code>::: demo [vue] A vue demo

<span><span>```</span><span>vue</span>
<span>&lt;template>
  &lt;div>
    Mr.Hope is &lt;span>{{ message }}&lt;/span>
  &lt;/div>
&lt;/template>
&lt;script>
export default {
  data: () => ({ message: "very handsome" }),
};
&lt;/script>
&lt;style>
.box span {
  color: red;
}
&lt;/style></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div></details>

          <div
            id="code-demo-2b1f2266"
           
  
 data-title="A%20normal%20demo"

            data-code="%7B%22md%22%3A%22%23%20Title%5Cn%5Cnis%20very%20handsome.%5Cn%22%2C%22ts%22%3A%22const%20message%3A%20string%20%3D%20%5C%22Mr.Hope%5C%22%3B%5Cn%5Cndocument.querySelector(%5C%22h1%5C%22).innerHTML%20%3D%20message%3B%5Cn%22%2C%22scss%22%3A%22h1%20%7B%5Cn%20%20font-style%3A%20italic%3B%5Cn%5Cn%20%20%2B%20p%20%7B%5Cn%20%20%20%20color%3A%20red%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span>#</span> Title</span>

is very handsome.
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>const</span> message<span>:</span> <span>string</span> <span>=</span> <span>"Mr.Hope"</span><span>;</span>

document<span>.</span><span>querySelector</span><span>(</span><span>"h1"</span><span>)</span><span>.</span>innerHTML <span>=</span> message<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>h1 </span><span>{</span>
  <span>font-style</span><span>:</span> italic<span>;</span>

  <span>+ p </span><span>{</span>
    <span>color</span><span>:</span> red<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>Code</summary>
<div><pre><code>::: demo A normal demo

<span><span>```</span><span>md</span>
<span><span><span>#</span> Title</span>

is very handsome.</span>
<span>```</span></span>

<span><span>```</span><span>ts</span>
<span><span>const</span> message<span>:</span> <span>string</span> <span>=</span> <span>"Mr.Hope"</span><span>;</span>

document<span>.</span><span>querySelector</span><span>(</span><span>"h1"</span><span>)</span><span>.</span>innerHTML <span>=</span> message<span>;</span></span>
<span>```</span></span>

<span><span>```</span><span>scss</span>
<span><span>h1 </span><span>{</span>
  <span>font-style</span><span>:</span> italic<span>;</span>

  <span>+ p </span><span>{</span>
    <span>color</span><span>:</span> red<span>;</span>
  <span>}</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/guide/markdown/demo/" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h3 id="presentation"> Presentation</h3>
<i>Not supported content</i><details><summary>Code</summary>
<div><pre><code>@slidestart

<span><span>##</span> Slide 1</span>

A paragraph with some text and a <span>[<span>link</span>](<span>https://mrhope.site</span>)</span>

<span>---</span>

<span><span>##</span> Slide 2</span>

<span>-</span> Item 1
<span>-</span> Item 2

<span>---</span>

<span><span>##</span> Slide 3.1</span>

<span><span>```</span><span>js</span>
<span><span>const</span> a <span>=</span> <span>1</span><span>;</span></span>
<span>```</span></span>

--

<span><span>##</span> Slide 3.2</span>

$$
J(\theta_0,\theta_1) = \sum_{i=0}
$$

@slideend
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/guide/markdown/presentation/" target="_blank" rel="noopener noreferrer">View Detail</a></li>
</ul>
<h2 id="other-syntax"> Other Syntax</h2>
<div><p>custom title</p>
<p>A custom information container</p>
</div>
<div><p>custom title</p>
<p>A custom tip container</p>
</div>
<div><p>custom title</p>
<p>A custom warning container</p>
</div>
<div><p>custom Title</p>
<p>A custom danger container</p>
</div>
<details><summary>custom title</summary>
<p>A custom details container</p>
</details>
<details><summary>Code</summary>
<div><pre><code>::: info custom title

A custom information container

:::

::: tip custom title

A custom tip container

:::

::: warning custom title

A custom warning container

:::

::: danger custom Title

A custom danger container

:::

::: details custom title

A custom details container

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div></details>
<hr>
<section>
<ol>
<li id="footnote1"><p>This is footnote content </p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>Guides</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/guide/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/guide/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">Guides</source>
      <category>Guide</category>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="guides"> Guides</h1>
<ul>
<li>
<p><a href="./page.html">Page Config</a></p>
</li>
<li>
<p><a href="./markdown.html">Markdown Enhance</a></p>
</li>
<li>
<p><a href="./disable.html">Function Disable</a></p>
</li>
<li>
<p><a href="./encrypt.html">Encryption Demo</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Project home</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/home/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/home/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">Project home</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<p>This is an example of a normal homepage. You can place your main content here.</p>
<p>To use this layout, you need to set <code>home: true</code> in the page front matter.</p>
<p>For related descriptions of configuration items, please see <a href="https://vuepress-theme-hope.github.io/guide/layout/home/" target="_blank" rel="noopener noreferrer">Project HomePage Layout Config</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>mr过程</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/bigdata/hadoop/hadoop/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/bigdata/hadoop/hadoop/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">mr过程</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="mr过程"> mr过程</h2>
<details><summary>answer</summary>
<p>MapReduce的工作流程大致可以分为5步：</p>
<Mermaid id="mermaid-1a962851" data-code="graph%20TD%0A%20%20%20%20A%5B%E5%88%86%E7%89%87%2C%E6%A0%BC%E5%BC%8F%E5%8C%96%5D%0A%20%20%20%20B%5B%E6%89%A7%E8%A1%8CMapTask%5D%0A%20%20%20%20C%5B%E6%89%A7%E8%A1%8CShuffle%5D%0A%20%20%20%20D%5B%E6%89%A7%E8%A1%8CReduceTask%5D%0A%20%20%20%20E%5B%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%5D%0A%20%20%20%20A--%3EB--%3EC--%3ED--%3EE%0A"></Mermaid><ol>
<li>
<p>分片、格式化数据</p>
<p><strong>分片</strong>：将输入源文件在逻辑上划分为大小相等的数据分片（split），Hadoop会为每一个分片启动一个MapTask，并由该任务执行自定义的map()函数</p>
<p><strong>格式化操作</strong>：将划分好的分片内容转换为可以作为map输入的&lt;key,value&gt;键值对。其中key代表偏移量，value代表每一行内容。</p>
</li>
<li>
<p>执行MapTask</p>
<p><strong>写入内存缓冲区</strong>：每个Map任务都有一个内存缓冲区，输入的分片（split）数据经过Map任务处理后的中间结果写入内存（环形）缓冲区。</p>
<p><strong>写入磁盘</strong>：如果写入的数据达到内存缓冲的阈值，会启动一个线程将内存中的溢出数据写入磁盘，同时不影响Map中间结果继续写入缓冲区。</p>
<p><strong>对key进行排序</strong>：在溢写过程中，MapReduce框架会对key进行排序。</p>
<p><strong>合并溢写文件</strong>：如果中间结果比较大，会形成多个溢写文件，最后的缓冲区数据也会全部溢写入磁盘形成一个溢写文件，如果是多个溢写文件，则最后合并所有的溢写文件为一个文件。输出形式为&lt;key,value&gt;</p>
</li>
<li>
<p>执行Shuffle过程</p>
<p>将MapTask输出的处理结果数据分发给ReduceTask，并在分发的过程中，对数据按照key进行分区和排序，输出形式为&lt;key,{value list}&gt;</p>
</li>
<li>
<p>执行ReduceTask</p>
<p>输入ReduceTask的数据流是&lt;key,{value list}&gt;形式，用户可以自定义reduce()方法进行逻辑处理，最终以&lt;key,value&gt;的形式输出</p>
</li>
<li>
<p>写入文件</p>
<p>MapReduce框架自动将ReduceTask生成的&lt;key,value&gt;传入OutputFormat的write方法，实现文件写入。</p>
</li>
</ol>
</details>
<p><a href="https://blog.csdn.net/Shockang/article/details/117970151" target="_blank" rel="noopener noreferrer">(35条消息) 图文详解 MapReduce 工作流程_Shockang的博客-CSDN博客_mapreduce工作流程</a></p>
<p><a href="https://juejin.cn/post/6996651554921005063" target="_blank" rel="noopener noreferrer">图文详解 MapReduce 的工作流程 - 掘金 (juejin.cn)</a></p>
<p><a href="http://www.itheima.com/news/20210415/141213.html" target="_blank" rel="noopener noreferrer">MapReduce的工作流程是怎样的？ (itheima.com)</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>大数据面试题（By RiverCold）</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/bigdata/hadoop/hadoop-full/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/bigdata/hadoop/hadoop-full/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">大数据面试题（By RiverCold）</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="大数据面试题-by-rivercold"> 大数据面试题（By RiverCold）</h1>
<h2 id="hadoop"> Hadoop</h2>
<h3 id="hdaoop运行模式"> Hdaoop运行模式</h3>
<blockquote>
<p><a href="https://blog.csdn.net/zane3/article/details/79829175" target="_blank" rel="noopener noreferrer">Hadoop运行模式</a>包括：本地模式、伪分布式模式以及完全分布式模式。</p>
<ol>
<li>本地模式：单机运行。使用本地文件系统和本地MapReduce运行器，不需要HDFS和YARN守护进程。</li>
<li>伪分布式模式：单机运行。Hadoop守护进程运行在本地机器上，模拟一台机器的Hadoop集群伪分布式是完全分布式的一个特例。</li>
<li>完全分布式模式：多台服务器组成分布式环境Hadoop守护进程运行在一个集群上。</li>
</ol>
</blockquote>
<h3 id="hadoop1-x、2-x、3-x区别"> Hadoop1.x、2.x、3.x区别</h3>
<blockquote>
<ol>
<li>Hadoop1.x时代：Hadoop中的MapReduce同时处理业务计算和资源调度，耦合性较大。</li>
<li>Hadoop2.x时代：增加了YarnMapReduce只负责业务计算，Yarn只负责资源调度。</li>
<li>Hadoop3.x时代：相较于Hadoop2.x时代在组成上没有变化，但较大优化了已有组件，引入了新的功能。</li>
</ol>
</blockquote>
<h3 id="hadoop三大基本组件"> Hadoop三大基本组件</h3>
<blockquote>
<ol>
<li><a href="https://baike.baidu.com/item/hdfs" target="_blank" rel="noopener noreferrer">HDFS</a>：Hadoop Distributed File System，简称HDFS，即Hadoop的分布式文件系统，负责海量数据的存储。</li>
<li><a href="https://baike.baidu.com/item/yarn" target="_blank" rel="noopener noreferrer">YARN</a>：Yet Another Resource Negotiator，简称YARN，即Hadoop的资源管理器，负责海量数据计算时的资源调度。</li>
<li><a href="https://baike.baidu.com/item/MapReduce/133425?fr=aladdin" target="_blank" rel="noopener noreferrer">MapReduce</a>：MapReduce将计算过程分为两个阶段Map和Reduce，即Hadoop的并行计算系统，负责海量数据的并行计算。
<ol>
<li>Map（映射）阶段并行处理输入数据</li>
<li>Reduce（归约）阶段对Map结果进行汇总</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="hadoop生态圈"> Hadoop生态圈</h3>
<blockquote>
<p>Hadoop生态圈包括Hadoop框架本身和保证hadoop框架正常高效运行的其他框架。根据服务对象和层次可以分为：数据来源层、数据传输层、数据存储层、资源管理层、数据计算层、任务调度层、业务模型层</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/21953026/1629386282142-70da2bfc-7170-4d52-8061-59ebaf8446d3.png" alt="" loading="lazy"></p>
<p>图中涉及的技术名词解释如下：</p>
<ol>
<li>Sqoop（数据传递工具）：是SQL-to-Hadoop的缩写，主要用于在Hadoop(Hive)与传统的数据库(mysql、postgresql...)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle 等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中</li>
<li>Flume（日志收集工具）：一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统</li>
<li>HBase（分布式列存储数据库）：一个分布式、面向列的开源数据库HBase不同于一般的关系型数据库，它是一个适合于非结构化数据存储的数据库</li>
<li>Hive（数据仓库工具）：基于Hadoop的一个数据仓库工具，可以把结构化的数据文件映射成一张数据库表，并提供简单的SQL查询功能，可以将SQL语句转换为MapReduce任务进行运行适合数据仓库的统计分析</li>
<li>Spark（分布式计算框架）：当前最流行的开源大数据内存计算框架可以基于Hadoop上存储的大数据进行计算不同于MapReduce的是Job中间输出结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代计算的算法</li>
<li>Flink（分布式计算框架）：当前最流行的开源大数据内存计算框架用于实时计算的场景较多</li>
<li>Oozie（工作流调度器）：一个管理Hadoop作业（job）的工作流程调度管理系统</li>
<li>Zookeeper（分布式协作服务）：一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、分布式服务、组服务等</li>
</ol>
</blockquote>
<h2 id="hdfs"> HDFS</h2>
<h3 id="hdfs默认数据块的大小是多少-为什么"> HDFS默认数据块的大小是多少？为什么？</h3>
<blockquote>
<p>HDFS中的文件在物理上是分块存储（block），块的大小可以通过配置参数( dfs.blocksize)来规定，默认块大小在Hadoop2.x版本中是128M，老版本中是64M</p>
<p>HDFS的块大小取决于磁盘传输速率目前磁盘传输率约为100M/s，而HDFS读取文件时最佳的寻址时间为10ms，理论上寻址时间为传输时间的1%时最佳</p>
<p>故最佳传输时间为</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7278em;vertical-align:-0.0833em;"></span><span>1</span><span>m</span><span>s</span><span style="margin-right:0.2222em;"></span><span>×</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1000</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>1000</span><span>m</span><span>s</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span><span>s</span></span></span></span></span></p>
<p>块的最佳大小=最佳传输时间×磁盘传输速率：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7278em;vertical-align:-0.0833em;"></span><span>1</span><span>s</span><span style="margin-right:0.2222em;"></span><span>×</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>100</span><span style="margin-right:0.10903em;">M</span><span>/</span><span>s</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6833em;"></span><span>100</span><span style="margin-right:0.10903em;">M</span></span></span></span></span></p>
<p>所以定义块大小为128M</p>
</blockquote>
<h3 id="为什么hdfs块的大小不能设置太小-也不能设置太大"> 为什么HDFS块的大小不能设置太小，也不能设置太大？</h3>
<blockquote>
<p>如果HDFS的块设置太小，会增加寻址时间，程序一直在找块的开始位置；</p>
<p>如果块设置的太大，从磁盘传输数据的时间会明显大于定位这个块开始位置所需的时间导致程序在处理这块数据时，会非常慢；</p>
<p>总结：HDFS块的大小设置主要取决于磁盘的传输速率</p>
</blockquote>
<h3 id="hdfs组成架构-hdfs如何存储文件"> HDFS组成架构？(HDFS如何存储文件)</h3>
<blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/21953026/1631347406286-eed355fb-e2b1-4249-8e84-528c3f7b24f2.png" alt="img" loading="lazy"></p>
<p>架构由4个部分组成，分别为HDFS Client、NameNode、DataNode和Secondary NameNode</p>
<ol>
<li>Client：客户端
<ol>
<li>文件切分文件上传HDFS的时候，客户端将文件切分成一个一个的块Block，然后进行上传</li>
<li>与NameNode交互，获取文件的位置信息；</li>
<li>与DataNode交互，读取或者写入数据；</li>
<li>提供一些命令来管理HDFS，比如NameNode格式化；</li>
<li>通过一些命令来访问HDFS，比如对HDFS增删改查操作；</li>
</ol>
</li>
<li>NameNode：就是Master，它是一个主管、管理者
<ol>
<li>管理HDFS的名称空间；</li>
<li>配置副本策略；</li>
<li>管理数据块（Block）映射信息；</li>
<li>处理客户端读写请求；</li>
</ol>
</li>
<li>DataNode：就是Slave，NameNode下达命令，DataNode执行实际操作
<ol>
<li>存储实际的数据块；</li>
<li>执行数据块的读/写操作；</li>
</ol>
</li>
<li>Secondary NameNode：并非NameNode的热备份，当NameNode挂掉的时候，它并不能马上替换NameNode并提供服务
<ol>
<li>辅助NameNode，分担其工作量；</li>
<li>在紧急情况下，可辅助恢复NameNode；</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="hdfs的写数据流程"> HDFS的写数据流程？</h3>
<blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/21953026/1631349353957-8a9426dd-7a91-41b0-8775-fde95c162a13.png" alt="img" loading="lazy"></p>
<ol>
<li>客户端通过Distributed FileSystem模块向NameNode请求上传文件，NameNode检查目标文件是否存在，父目录是否存在</li>
<li>NameNode返回是否可以上传</li>
<li>客户端请求第一个Block上传到哪几个datanode服务器上</li>
<li>NameNode返回3个DataNode节点，分别为dn1、dn2、dn3</li>
<li>客户端通过FSDataOutputStream模块请求dn1上传数据，dn1收到请求会继续调用dn2，然后dn2调用dn3，将这个通信管道建立完成。</li>
<li>dn1、dn2、dn3逐级应答客户端</li>
<li>客户端开始往dn1上传第一个Block（先从磁盘读取数据放到一个本地内存缓存，以Packet为单位，dn1收到一个Packet就会传给dn2，dn2传给dn3；dn1每传一个packet会放入一个应答队列等待应答）</li>
<li>当第一个Block传输完成之后，客户端再次请求NameNode上传第二个Block的服务（重复执行3-7步）</li>
</ol>
</blockquote>
<h3 id="hdfs的读数据流程"> HDFS的读数据流程？</h3>
<blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/21953026/1631460280331-5e9c5202-71a1-4a1a-a1b8-6c5a188de260.png?x-oss-process=image%2Fresize%2Cw_902%2Climit_0" alt="img" loading="lazy"></p>
<ol>
<li>客户端通过Distributed FileSystem向NameNode请求下载文件，NameNode通过查询元数据，找到文件块所在的DataNode地址</li>
<li>挑选一台DataNode（就近原则，然后随机）服务器，请求读取数据</li>
<li>DataNode开始传输数据给客户端（从磁盘里面读取数据输入流，以Packet为单位来做校验）</li>
<li>客户端以Packet为单位接收，先在本地缓存，然后写入目标文件</li>
</ol>
</blockquote>
<h3 id="nn和2nn工作机制-了解"> NN和2NN工作机制（了解）</h3>
<blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/21953026/1631626177178-b9e3267a-e398-4d91-98fe-ee44df7183cb.png" alt="img" loading="lazy"></p>
<p><strong>第一阶段：NameNode启动</strong></p>
<ol>
<li>第一次启动NameNode格式化，创建Fsimage和Edits文件。如果不是第一次启动，直接加载编辑日志和镜像文件到内存。</li>
<li>客户端对元数据进行增删改的请求。</li>
<li>NameNode记录操作日志，更新滚动日志。</li>
<li>NameNode在内存中对元数据进行增删改。</li>
</ol>
<p><strong>第二阶段：Secondary NameNode工作</strong></p>
<ol>
<li>Secnodary NameNode询问NameNode是否需要CheckPoint。直接带回NameNode是否检查结果。</li>
<li>Secondary NameNode请求执行CheckPoint。</li>
<li>NameNode滚动正在写的Edits日志。</li>
<li>将滚动前的编辑日志和镜像文件拷贝到Secondary NameNode。</li>
<li>Secondary NameNode加载编辑日志和镜像文件到内存，并合并。</li>
<li>生成新的镜像文件fsimage.chkpoint。</li>
<li>拷贝fsimage.chkpoint到NameNode。</li>
<li>NameNode将fsimage.chkpoint重新命名成fsimage。</li>
</ol>
</blockquote>
<h3 id="datanode工作机制-了解"> DataNode工作机制（了解）</h3>
<blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/21953026/1631540997938-34f4d0f3-af51-4a61-94f4-be7993ff6ee5.png?x-oss-process=image%2Fresize%2Cw_1182%2Climit_0" alt="img" loading="lazy"></p>
<ol>
<li>
<p>一个数据块在DataNode上以文件形式存储在磁盘上，包括两个文件，一个是数据本身，一个是元数据包括数据块的长度，块数据的检验和，时间戳。</p>
</li>
<li>
<p>DataNode启动后向NameNode注册，通过后，周期性（6小时）的向NameNode上报所有的块信息。</p>
<p>DN向NN汇报当前解读信息的时间间隔，默认6小时</p>
<p>DN扫描自己节点块信息列表的时间，默认6小时</p>
<ol>
<li>心跳是每3秒一次，心跳返回结果带有NameNode给该DataNode的命令如复制块数据到另一台机器，或删除某个数据块。如果超过10分钟没有收到某个DataNode的心跳，则认为该节点不可用。</li>
<li>集群运行中可以安全加入和退出一些机器。</li>
</ol>
</li>
</ol>
</blockquote>
<h2 id="mapreduce"> MapReduce</h2>
<h3 id="谈谈hadoop序列化和反序列化以及自定义bean对象实现序列化"> 谈谈Hadoop序列化和反序列化以及自定义bean对象实现序列化</h3>
<blockquote>
<p><strong>序列化和反序列化</strong></p>
<ol>
<li>
<p>序列化就是把内存中的对象，转换成字节序列（或其他数据传输协议）以便于存储（持久化）和网络传输</p>
</li>
<li>
<p>反序列化就是将受到字节序列（或其他数据传输协议）或者是硬盘的持久化数据，转换成内存中的对象。</p>
</li>
</ol>
<p><strong>为什么要序列化？</strong></p>
<p>一般来说，“活的”对象只生存在内存里，关机断电就没有了。而且“活的”对象只能由本地的进程使用，不能被发送到网络的另外一台计算机。然后序列化可以存储“活的”对象，可以将“活的”对象发送到远程计算机。</p>
<p><strong>为什么不用Java序列化？</strong></p>
<p>Java的序列化是一个重量级序列化框架（Serializable），一个对象被序列化后，会附带很多额外的信息（各种校验信息，head，继承体系等），不便于在网络中高效传输。所以，hadoop自己开发了一套序列化机制（Writable），精简高效。</p>
<p><strong>自定义bean对象序列化传输步骤及注意事项</strong></p>
<ol>
<li>必须实现Writable接口</li>
<li>反序列化时，需要反射调用空参构造函数，所以必须有空参构造</li>
<li>重写序列化方法</li>
<li>重写反序列化方法</li>
<li>注意反序列化的顺序和序列化的顺序完全一致</li>
<li>要想把结果显示在文件中，需要重写toString()，且用&quot;\t&quot;分开，方便后续使用</li>
<li>如果需要将自定义的bean放在key中传输，则还需要实现comparable接口，因为mapreduce框中的shuffle过程一定会对key进行排序</li>
</ol>
</blockquote>
<h3 id="fileinputformat切片机制"> FileInputFormat切片机制</h3>
<blockquote>
<div><pre><code>waitForCompletion()
submit()
1、建立连接
	connect()
	1、创建提交job的代理
		new Cluster(getConfiguration())
	2、判断是本地yarn还是远程
		initialize(jobTrackAddr,conf)
2、提交job
submitter.submitJobInternal(Job.this, cluster)	
	1、创建给集群提交数据的stag路径
	Path jobStagingArea = JobSubmissionFiles.getStagingDir(cluster, conf);
	2、获取jobid，并创建job路径
	JobID jobid = submitClient.getNewJobID();
	3、拷贝jar包到集群
	copyAndConfigureFiles(job, submitJobDir);
	rUploader.uploadFiles(job, jobSubmitDir);
	4、计算切片,生成切片规划文件
	writeSplits(job, submitJobDir)
	maps = writeNewSplits(job, jobSubmitDir);
	input.getSplits(job);
	5、向stag路径写xml配置文件
	writeConf(conf, submitJobFile);
	conf.writeXml(out);
	6、提交job，返回提交状态
	status = submitClient.submitJob(jobId, submitJobDir.toString(), job.getCredentials());
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div></blockquote>
<h3 id="在一个运行的hadoop任务中-什么是inputsplit"> 在一个运行的Hadoop任务中，什么是InputSplit?</h3>
<blockquote>
<p>FileInputFormat源码解析（input.getSplits(job))</p>
<ol>
<li>找到数据存储的目录</li>
<li>开始遍历处理（规划切片）目录下的每一个文件</li>
<li>遍历第一个文件（假设为ss.txt）
<ol>
<li>获取文件大小<code>fs.sizeOf(ss.txt)</code></li>
<li>计算切片大小<code>computeSliteSize(Math.max(minSize,Math.min(maxSize,blocksize)))=blocksize=128M</code></li>
<li>默认情况下，切片大小=blocksize</li>
<li>开始切，形成3个切片（每次切片时，都要判断切完剩下的部分是否大于块的1.1倍，不大于1.1倍就划分一块切片）
<ol>
<li>第1个切片：ss.txt—0-128M</li>
<li>第2个切片：ss.txt—128-256M</li>
<li>第3个切片：ss.txt—256M-300M</li>
</ol>
</li>
<li>将切片信息写到一个切片规划文件中</li>
<li>整个切片的核心过程在getSplit()方法中完成</li>
<li>数据切片只是在逻辑上对输入数据进行分片，并不会在磁盘上将其切分成分片进行存储。InputSplit只记录了分片的元数据信息，比如起始位置、长度以及所在的节点列表等。</li>
<li>注意：block是HDFS上物理上存储的数据，切片是对数据逻辑上的划分</li>
</ol>
</li>
<li>提交切片规划文件到yarn上，yarn上的MrAppMaster就可以根据切片规划文件计算开启maptask个数</li>
</ol>
</blockquote>
<h3 id="如何判定一个job的map和reduce的数量"> 如何判定一个job的map和reduce的数量？</h3>
<blockquote>
<ol>
<li>
<p>map数量</p>
<p><code>splitSize=max{minSize,min{maxSize,blockSize}}</code></p>
<p>map数量由处理的数据分成的block数量决定<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.0044em;vertical-align:-0.31em;"></span><span>d</span><span>e</span><span style="margin-right:0.10764em;">f</span><span>a</span><span>u</span><span>lt</span><span style="margin-right:0.02778em;">_</span><span>n</span><span>u</span><span>m</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1.06em;vertical-align:-0.31em;"></span><span>t</span><span>o</span><span>t</span><span>a</span><span style="margin-right:0.01968em;">l</span><span style="margin-right:0.02778em;">_</span><span>s</span><span>i</span><span>ze</span><span>/</span><span>s</span><span style="margin-right:0.01968em;">pl</span><span>i</span><span>t</span><span style="margin-right:0.02778em;">_</span><span>s</span><span>i</span><span>ze</span></span></span></span></p>
</li>
<li>
<p>reduce数量</p>
<p>reduce的数量<code>job.setNumReduceTasks(x)</code>；x为reduce的数量。不设置的话默认为1</p>
</li>
</ol>
</blockquote>
<h3 id="maptask的个数由什么决定"> MapTask的个数由什么决定？</h3>
<blockquote>
<p>一个job的map阶段MapTask并行度（个数），由客户端提交job时的切片个数决定</p>
</blockquote>
<h3 id="maptask和reducetask工作机制-mapreduce工作原理"> MapTask和ReduceTask工作机制（MapReduce工作原理）</h3>
<blockquote>
<p><strong>MapTask工作机制</strong></p>
<ol>
<li>Read阶段：Map Task通过用户编写的RecordReader，从输入InputSplit中解析出一个个key/value</li>
<li>Map阶段：该节点主要是将解析出的key/value交给用户编写map()函数处理，并产生一系列新的key/value</li>
<li>Collect收集阶段：在用户编写map()函数中，当数据处理完成后，一般会调用OutputCollector.collect()输出结果。在该函数内部，它会将生成的key/value分区（调用Partitioner），并写入一个环形内存缓冲区中。</li>
<li>Spill阶段：即&quot;溢写&quot;，当环形缓冲区满后，MapReduce会先将数据写到本地磁盘上，生成一个临时文件。需要注意的是，将数据写入本地磁盘之前，先要对数据进行一次本地排序，并在必要时对数据进行合并、压缩等操作。</li>
<li>Combine阶段：当所有数据处理完成后，MapTask对所有临时文件进行一次合并，以确保最终只会生成一个数据文件。</li>
</ol>
</blockquote>
<blockquote>
<p><strong>ReduceTask工作机制</strong></p>
<ol>
<li>Copy阶段：ReduceTask从各个MapTask上远程拷贝一片数据，并针对某一片数据，如果其大小超过一定阈值，则写到磁盘上，否则直接放到内存中</li>
<li>Sort阶段：在远程拷贝数据的同时，ReduceTask启动了两个后台线程对内存和磁盘上的文件进行合并，以防止内存使用过多或磁盘上文件过多。按照MapReduce语义，用户编写reduce()函数输入数据是按key进行聚集的一组数据。为了将key相同的数据聚在一起，Hadoop采用了基于排序的策略。由于各个MapTask已经实现对自己的处理结果进行了局部排序，因为，ReduceTask只需对所有数据进行一次归并排序即可。</li>
<li>Reduce阶段：reduce()函数将计算结果写到HDFS中</li>
</ol>
</blockquote>
<h3 id="描述mapreduce有几种排序及排序发生的阶段"> 描述mapReduce有几种排序及排序发生的阶段？</h3>
<blockquote>
<ol>
<li>部分排序：MapReduce根据输入记录的键对数据集排序。保证输出的每个文件内部有序。</li>
<li>全排序：最终输出结果只有一个文件，且文件内部有序。实现方式是只设置一个ReduceTask。但该方法在处理大型文件时效率极低，因为一台机器处理所有文件，完全丧失了MapReduce所提供的并行架构。</li>
<li>辅助排序（GroupingComparator分组）：MapReduce框架在记录到达reducer之前按键对记录排序，但键所对应的值并没有被排序。甚至在不同的执行轮次中，这些值的排序也不固定，因为它们来自不同的map任务且这些map任务在不同轮次中完成时间各不相同。一般来说，大部分MapReduce程序会避免让reduce函数依赖于值的排序，但是，有时也需要通过特定的方法对键进行排序和分组等以实现对值的排序。</li>
<li>二次排序：在自定义排序过程中，如果compareTo中的判断条件为两个即为二次排序</li>
</ol>
<p><strong>自定义排序WritableComparable</strong></p>
<p>bean对象实现WritableComparable接口重写compareTo方法，就可以实现排序</p>
<div><pre><code>@Override
public int compareTo(FlowBean o){
	// 倒序排序，从大到小
	return this.sumFlow &gt; o.getSumFlow() ? -1 : 1;	
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>排序发生的阶段</p>
<ol>
<li>一个是在map side发生在spill后partition前。</li>
<li>一个是在reduce side发生在copy后reduce前。</li>
</ol>
</blockquote>
<h3 id="描述mapreduce中shuffle阶段的工作流程-如何优化shuffle阶段"> 描述mapReduce中shuffle阶段的工作流程，如何优化shuffle阶段</h3>
<blockquote>
<p>从Map产生输出开始到Reduce取得数据作为输入之前的过程称为shuffle</p>
<p><strong>Map端Shuffle</strong></p>
<p><strong>Collect（收集）阶段</strong>：将MapTask的结果收集输出到默认大小为100M的环形缓冲区，输出前对key进行分区的计算，默认Hash分区</p>
<p><strong>Spill（溢写）阶段</strong>：当环形缓冲区的数据量达到一定的阈值时，将数据写入本地磁盘（在写入磁盘之前需要对数据进行一次排序的操作，如果配置了combiner，还会将有相同分区号和key的数据进行排序）</p>
<p><strong>Merge（合并）阶段</strong>：把所有溢出的临时文件进行一次合并操作，以确保一个MapTask最终只产生一个中间数据文件</p>
<p><strong>Reduce端shuffle</strong></p>
<p><strong>Copy（复制）阶段</strong>：ReduceTask启动Fetcher线程到已经完成MapTask的节点上复制一份属于自己的数据</p>
<p><strong>Merge阶段</strong>：在ReduceTask远程复制数据的同时，会在后台开启两个线程对内存和磁盘的数据文件进行合并操作。</p>
<p><strong>Sort阶段</strong>：在对数据进行合并的同时，会进行归并排序操作，由于MapTask阶段已经对数据进行了局部的排序，ReduceTask只需保证Copy的数据的最终整体有效性即可</p>
</blockquote>
<h3 id="描述mapreduce中combiner的作用是什么-一般使用情景-哪些情况不需要combiner-以及combiner和reduce的区别"> 描述mapReduce中combiner的作用是什么，一般使用情景，哪些情况不需要combiner，以及combiner和reduce的区别？</h3>
<blockquote>
<ol>
<li>
<p>Combiner的意义就是对每一个maptask的输出进行局部汇总，以减小网络传输量。</p>
</li>
<li>
<p>Combiner能够应用的前提是不能影响最终的业务逻辑，而且，Combiner的输出kv应该跟reducer的输入kv类型相对应。</p>
</li>
<li>
<p>Combiner和reducer的区别在于运行的位置。</p>
<p>Combiner是在每一个maptask所在的节点运行；</p>
<p>Reducer是接收全局所有Mapper的输出结果。</p>
</li>
</ol>
</blockquote>
<h3 id="hadoop的缓存机制"> Hadoop的缓存机制</h3>
<blockquote>
<p>分布式缓存一个最重要的应用就是在进行join操作的时候</p>
</blockquote>
<h3 id="如何使用mapreduce实现两个表的join"> 如何使用mapReduce实现两个表的join?</h3>
<blockquote>
<ol>
<li>reduce side join：在map阶段，map函数同时读取两个文件File1和File2，为了区分两种来源的key/value数据对，对每条数据打一个标签（tag），比如：tag0表示来自文件File1，tag2表示来自文件File2。</li>
<li>map side join：map side join是针对以下场景进行的优化：两个待连接表中，有一个表非常大，而另一个表非常小，以至于小表可以直接存放到内存中。这样，我们可以将小表复制多份，让每个map task内存中存在一份（比如存放到hash table中），然后只扫描大表：对于大表中的每一条记录key/value，在hash table中查找是否有相同的key的记录，如果有，则连接后输出即可。</li>
</ol>
</blockquote>
<h3 id="什么样的计算不能用mr来提速"> 什么样的计算不能用mr来提速？</h3>
<blockquote>
<ol>
<li>数据量很小</li>
<li>繁杂的小文件</li>
<li>索引是更好的存取机制的时候</li>
<li>事务处理</li>
<li>只有一台机器的时候</li>
</ol>
</blockquote>
<h3 id="etl是哪三个单词的缩写"> ETL是哪三个单词的缩写？</h3>
<blockquote>
<p>Extraction-Transformation-Loading的缩写，中文名称为数据提取，转换和加载</p>
</blockquote>
<h2 id="yarn"> Yarn</h2>
<h3 id="hadoop1和hadoop2的架构异同"> hadoop1和hadoop2的架构异同</h3>
<blockquote>
<ol>
<li>加入了yarn解决了资源调度的问题</li>
<li>加入了对zookeeper的支持实现比较可靠的高可用</li>
</ol>
</blockquote>
<h3 id="为什么会产生yarn-它解决了什么问题-有什么优势"> 为什么会产生yarn，它解决了什么问题，有什么优势？</h3>
<blockquote>
<ol>
<li>Yarn最主要的功能就是解决运行的用户程序与yarn框架完全解耦</li>
<li>Yarn上可以运行各种类型的分布式运算程序(mapreduce只是其中的一种)，比如mapreduce、storm程序、spark程序......</li>
</ol>
</blockquote>
<h3 id="hadoop的调度器总结"> Hadoop的调度器总结</h3>
<blockquote>
<ol>
<li>
<p>先进先出调度器FIFO</p>
<p>支持单队列、先进先出，先按照作业的优先级高低，再按照到达时间的先后选择被执行的作业。</p>
</li>
<li>
<p>容量调度器Capcity Scheduler(Yahoo)</p>
<p>特点：</p>
<ol>
<li>多队列：支持多队列多作业</li>
<li>容量保证：管理员可为每个队列设置资源最低保证和资源使用上限。</li>
<li>灵活性：如果一个队列中的资源有剩余，可以暂时共享给那些需要资源的队列，而一旦该队列有新的应用程序提交，则其他队列借调的资源会归还给该队列。</li>
<li>多租户：为防止同一个用户的作业独占队列中的资源，该调度器会对同一用户提交的作业所占资源量进行限定。</li>
</ol>
<p>资源分配算法：</p>
<ol>
<li>
<p>队列资源分配</p>
<p>优先选择资源占用率最低的队列分配资源</p>
</li>
<li>
<p>作业资源分配</p>
<p>默认按照提交作业的优先级和提交时间顺序分配资源</p>
</li>
<li>
<p>容器资源分配</p>
<p>按照容器的优先级分配资源，如果优先级相同，按照数据本地性原则：</p>
<ol>
<li>任务和数据在同一节点</li>
<li>任务和数据在同一机架</li>
<li>任务和数据不在同一节点也不在同一机架</li>
</ol>
</li>
</ol>
</li>
<li>
<p>公平调度器Fair Scheduler(Facebook)</p>
<table>
<thead>
<tr>
<th>不同点</th>
<th>容量调度器</th>
<th>公平调度器</th>
</tr>
</thead>
<tbody>
<tr>
<td>核心调度策略</td>
<td>优先选择资源利用率低的队列</td>
<td>FIFO、DRF</td>
</tr>
<tr>
<td>资源分配方式</td>
<td>优先选择对资源的缺额大的队列</td>
<td>FIFO、FAIR、DRF</td>
</tr>
</tbody>
</table>
</li>
</ol>
</blockquote>
]]></content:encoded>
      <enclosure url="https://cdn.nlark.com/yuque/0/2021/png/21953026/1629386282142-70da2bfc-7170-4d52-8061-59ebaf8446d3.png" type="image/png"/>
    </item>
    <item>
      <title>Hadoop文件存储格式？</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/bigdata/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/bigdata/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">Hadoop文件存储格式？</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="hadoop文件存储格式"> Hadoop文件存储格式？</h2>
<details><summary>answer</summary>
<p><strong>行式存储</strong>：数据是按照行为单位进行存储，一行中的数据在存储介质中以连续存储形式存在。读速度慢，写速度快。hdfs支持TextFile、SequenceFile。</p>
<p><strong>TextFile</strong>：采用csv、xml、json等固定长度的纯文本格式</p>
<p><strong>SequenceFile</strong>：按行存储二进制键值对数据，Hadoop API 提供的一种二进制文件，它将数据以&lt;key,value&gt;的形式序列化到文件中。</p>
<p><strong>列式存储</strong>：数据按照列为单位进行存储，一列中的数据在存储介质中以连续存储形式存在。写速度慢，读速度快。hdfs支持Parquet、RCFile、ORCFile。</p>
<p><strong>Parquet</strong>：是Hadoop生态系统中任何项目都能使用的列式存储格式，由Twitter和Cloudera合作开发</p>
<p><strong>RCFile</strong>：RCFile是Hive推出的一种专门面向列的数据格式。 它遵循“先按列划分,再垂直划分”的设计理念。</p>
<p><strong>ORCFile</strong>：<strong>RCFile</strong>的优化版本。</p>
<p>::: end</p>
<p><a href="https://blog.csdn.net/u011955252/article/details/50530942" target="_blank" rel="noopener noreferrer">(34条消息) Hadoop的文件格式_红豆和绿豆的博客-CSDN博客_hadoop文件格式有哪几种</a></p>
<p><a href="https://www.cnblogs.com/wqbin/p/14635480.html" target="_blank" rel="noopener noreferrer">hdfs文件格式比较 - wqbin - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/qq_40579464/article/details/105756498" target="_blank" rel="noopener noreferrer">(34条消息) Hadoop文件存储格式_赵昕彧的博客-CSDN博客_hdfs文件存储格式</a></p>
<p><a href="https://www.cnblogs.com/wqbin/p/14635480.html" target="_blank" rel="noopener noreferrer">hdfs文件格式比较 - wqbin - 博客园 (cnblogs.com)</a></p>
<h2 id="spark和hive的区别"> spark和hive的区别</h2>
<p>Spark是一种基于内存的快速、通用、可扩展的大数据分析计算引擎，从各种各样的数据源读取数据进行运算。Spark是加强版的MapReduce，本身不存储数据。</p>
<p>Apache Hive是一款建立在Hadoop之上的开源数据仓库系统，Hive核心是将HQL转换为MapReduce程序，然后将程序提交到Hadoop集群执行，本身不存储数据。</p>
<p><a href="https://www.zhihu.com/question/329052025" target="_blank" rel="noopener noreferrer">(14 封私信 / 80 条消息) 请问spark和hive是什么关系？ - 知乎 (zhihu.com)</a></p>
</details>
]]></content:encoded>
    </item>
    <item>
      <title>Component disabled</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/guide/disable/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/guide/disable/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">Component disabled</source>
      <description>&amp;lt;p&amp;gt;You can disable some functions on the page by setting the Frontmatter of the page.&amp;lt;/p&amp;gt;
</description>
      <category>Guide</category>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<p>You can disable some functions on the page by setting the Frontmatter of the page.</p>

<p>These should be disabled on this page:</p>
<ul>
<li>Navbar</li>
<li>Sidebar</li>
<li>Breadcrumb</li>
<li>Page information</li>
<li>Contributors</li>
<li>Edit link</li>
<li>Update time</li>
<li>Prev/Next link</li>
<li>Comment</li>
<li>Footer</li>
<li>Back to top button</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>MySQL知识点&amp;面试题总结</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/database/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9&amp;%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/database/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9&amp;%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">MySQL知识点&amp;面试题总结</source>
      <pubDate>Thu, 31 Mar 2022 14:28:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="mysql知识点-面试题总结"> MySQL知识点&amp;面试题总结</h1>
<h2 id="关系型数据库介绍"> 关系型数据库介绍</h2>
<h3 id="什么是关系型数据库-有哪些常见的关系型数据库"> 什么是关系型数据库？有哪些常见的关系型数据库？</h3>
<details><summary>answer</summary>
<p>关系型数据库就是一种建立在关系模型的基础上的数据库。关系模型表明了数据库中所存储的数据之间的联系（一对一、一对多、多对多）。</p>
<p>关系模型是指用二维表的形式表示实体和实体间联系的数据模型。常见的关系型数据库包括MySQL、Oracle、SQL Server、SQLite</p>
</details>
<h2 id="mysql介绍"> MySQL介绍</h2>
<h3 id="mysql是什么"> MySQL是什么？</h3>
<details><summary>answer</summary>
<p>MySQL是一种关系型数据库管理系统（RDBMS），主要用于持久化存储我们的系统中的一些数据。</p>
</details>
<h2 id="存储引擎"> 存储引擎</h2>
<h3 id="存储引擎相关的命令"> 存储引擎相关的命令？</h3>
<details><summary>answer</summary>
<p>查看MySQL提供的所有存储引擎</p>
<div><pre><code>show engines;
</code></pre>
<div><span>1</span><br></div></div><p>MySQL默认的存储引擎是InnoDB，且只有InnoDB支持事务</p>
<p>查看MySQL当前默认的存储引擎</p>
<div><pre><code>show variables like &#39;%storage_engine%&#39;;
</code></pre>
<div><span>1</span><br></div></div><p>查看表的存储引擎</p>
<div><pre><code>show table status like &#39;table_name&#39;;
</code></pre>
<div><span>1</span><br></div></div></details>
<h3 id="myisam-和-innodb-的区别"> MyISAM 和 InnoDB 的区别?</h3>
<details><summary>answer</summary>
<table>
<thead>
<tr>
<th></th>
<th>InnoDB</th>
<th>MyISAM</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否支持行级锁、表级锁</td>
<td>既支持表级锁又支持行级锁</td>
<td>支持表级锁，不支持行级锁</td>
</tr>
<tr>
<td>是否支持事务</td>
<td>支持事务</td>
<td>不支持事务</td>
</tr>
<tr>
<td>是否支持外键</td>
<td>支持外键</td>
<td>不支持外键</td>
</tr>
<tr>
<td>是否支持数据库异常崩溃后的安全恢复</td>
<td>支持安全恢复</td>
<td>不支持安全恢复</td>
</tr>
</tbody>
</table>
</details>
<h3 id="myisam和innodb存储引擎使用的锁"> MyISAM和InnoDB存储引擎使用的锁？</h3>
<details><summary>answer</summary>
<p>MyISAM和InnoDB存储引擎使用的锁：</p>
<ul>
<li>InnoDB支持行级锁和表级锁</li>
<li>MyISAM只支持表级锁</li>
</ul>
<p><strong>表级锁和行级锁对比</strong>：</p>
<p><strong>表级锁</strong>：</p>
<p>MySQL中<strong>锁定粒度</strong>最大的一种锁，对当前操作的整张表加锁。</p>
<ul>
<li>开销：实现简单，资源消耗（开销）较少。</li>
<li>速度：加锁快，不会出现死锁。</li>
<li>并发度：触发锁冲突的概率高，并发度低。</li>
</ul>
<p><strong>行级锁</strong>：MySQL中<strong>锁定粒度</strong>最小的一种锁，对当前操作的行进行加锁。</p>
<ul>
<li>开销：实现复杂，资源消耗（开销）较大</li>
<li>速度：加锁慢，会出现死锁</li>
<li>并发度：触发锁冲突的概率低，并发度高。</li>
</ul>
</details>
<h3 id="innodb存储引擎的锁的算法有几种"> InnoDB存储引擎的锁的算法有几种？</h3>
<details><summary>answer</summary>
<ol>
<li>记录锁、行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行update和delete。</li>
<li>间隙锁（Gap Lock）：锁定索引记录间隙（不包含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。</li>
<li>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。</li>
</ol>
</details>
]]></content:encoded>
    </item>
    <item>
      <title>数据库</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/database/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/database/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">数据库</source>
      <pubDate>Mon, 28 Feb 2022 09:05:52 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="数据库"> 数据库</h1>
<ul>
<li><a href="./数据库基础知识.html">数据库基础知识</a></li>
<li><a href="./MySQL重要知识点.html">MySQL重要知识点</a></li>
<li><a href="./MySQL知识点&amp;面试题总结.html">MySQL知识点&amp;面试题总结</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>数据库知识手册</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">数据库知识手册</source>
      <pubDate>Tue, 29 Mar 2022 14:25:26 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="数据库知识手册"> 数据库知识手册</h1>
<h2 id="数据库基础概念"> 数据库基础概念</h2>
<h3 id="什么是数据库-数据库管理系统-数据库系统-数据库管理员"> 什么是数据库？数据库管理系统？数据库系统？数据库管理员？</h3>
<details><summary>answer</summary>
<p><strong>数据库</strong>：数据库（Database）是保存有组织的数据的容器（通常是一个文件或一组文件），是通过数据库管理系统（DataBase-Management System，DBMS）创建和操纵的容器。</p>
<p><strong>数据库管理系统</strong>：一种操纵和管理数据库的大型软件，（DataBase Management System，简称DBMS）。</p>
<p><strong>数据库系统</strong>：数据库系统（DataBase System，简称DBS）通常由软件、数据库（DataBase）和数据库管理员（DBA）组成。其软件主要包括操作系统、宿主语言、实用程序以及数据库管理系统。</p>
<p><strong>数据库管理员</strong>：数据库管理员（Database Administrator，简称DBA）负责全面管理和控制数据库系统。</p>
</details>
<h3 id="为什么要使用数据库"> 为什么要使用数据库？</h3>
<details><summary>answer</summary>
<ol>
<li>数据可永久保存且数据安全性高</li>
<li>使用SQL语句，查询方便效率高</li>
<li>便于数据管理和数据分析</li>
</ol>
</details>
<h3 id="sql和mysql有什么区别"> SQL和MySQL有什么区别？</h3>
<details><summary>answer</summary>
<p>SQL是一种结构化查询语言，用于在数据库上执行各种操作。</p>
<p>MySQL是一个关系型数据库管理系统（RDBMS），使用SQL执行所有数据库操作。</p>
</details>
<h3 id="数据库三大范式是什么"> 数据库三大范式是什么？</h3>
<details><summary>answer</summary>
<p>数据库范式是设计数据库时，需要遵循的一些规范。越高的范式数据库冗余越小。常用的数据库三大范式为：</p>
<ul>
<li>**第一范式（1NF）：**每个列都不可以再拆分，强调列的原子性。第一范式要求数据库中的表都是二维表。</li>
<li>**第二范式（2NF）：**在第一范式的基础上，一个表必须有一个主键，非主键列（非主属性）<strong>完全依赖</strong>于主键，而不能是依赖于主键的一部分。</li>
<li>**第三范式（3NF）：**在第二范式的基础上，非主键列（非主属性）只依赖于（直接依赖）于主键，不依赖于其他非主键。</li>
</ul>
<p><strong>函数依赖（functional dependency）</strong>：在一张表中，在属性（或属性组）X的值确定的情况下，必定能确定属性Y的值，那么就可以说Y函数依赖于X，写作X-&gt;Y。</p>
<p><strong>部分函数依赖（partial functional dependency）</strong>：如果X-&gt;Y，并且存在X的一个真子集X0，使得X0-&gt;Y，则称Y对X部分函数依赖。</p>
<p><strong>完全函数依赖（fully functional dependency）</strong>：在一个关系中，若某个非主属性数据项依赖于全部关键字则称为完全函数依赖。</p>
<p><strong>传递函数依赖（transitive functional dependency）</strong>：在关系模式R (U) 中, 如果X→Y, Y→Z, Z不是Y的子集, Y不函数决定X, 则称Z对X传递函数依赖 (Transitive Functional Dependency) 。</p>
<p><strong>总结</strong></p>
<ul>
<li>1NF：属性不可再分</li>
<li>2NF：1NF的基础之上，消除了非主属性对于码的部分函数依赖</li>
<li>3NF：2NF的基础之上，消除了非主属性对于码的传递函数依赖</li>
</ul>
</details>
<h3 id="什么是er图"> 什么是ER图？</h3>
<details><summary>answer</summary>
<p><strong>E-R图</strong> 也称为实体-联系图（Entity Relationship Diagram），提供了表示实体类型、属性和联系的方法，用来描述现实世界的概念模型。</p>
<p><strong>矩形框</strong>：表示实体</p>
<p><strong>菱形框</strong>：表示联系</p>
<p><strong>椭圆形框</strong>：表示实体或联系的属性</p>
<p>下图是一个学生选课的 ER 图，每个学生可以选若干门课程，同一门课程也可以被若干人选择，所以它们之间的关系是多对多（M: N）。另外，还有其他两种关系是：1 对 1（1:1）、1 对多（1: N）。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/4717673e36966e0e4b33fccfd753f6ea.png" alt="ER图示例" loading="lazy"></p>
</details>
<h3 id="数据库设计通常分为哪几步"> 数据库设计通常分为哪几步？</h3>
<details><summary>answer</summary>
<ol>
<li>
<p><strong>需求分析</strong>：分析用户需求，包括数据、功能和性能需求</p>
</li>
<li>
<p><strong>概念结构设计</strong>：主要采用E-R模型进行设计，包括画E-R图</p>
</li>
<li>
<p><strong>逻辑结构设计</strong>：通过将E-R图转换成表，实现从E-R模型到关系模型的转换</p>
</li>
<li>
<p><strong>物理结构设计</strong>：为所设计的数据库选择合适的存储结构和存取路径</p>
</li>
<li>
<p><strong>数据库实施</strong>：包括编程、测试和试运行</p>
</li>
<li>
<p><strong>数据库的运行和维护</strong>：系统的运行与数据库的日常维护</p>
</li>
</ol>
</details>
<h2 id="索引"> 索引</h2>
<h3 id="索引的优缺点"> 索引的优缺点</h3>
<details><summary>answer</summary>
<p><strong>索引的优点</strong></p>
<ul>
<li>通过创建<strong>唯一性索引</strong>，可以<strong>保证每一行数据的唯一性</strong>；</li>
<li>加快数据的<strong>检索速度</strong></li>
<li>加速<strong>表与表之间的连接</strong></li>
</ul>
<p><strong>索引的缺点</strong></p>
<ul>
<li>时间上，创建和维护索引都需要耗费时间，这种时间随数据量增加而增加</li>
<li>空间上，索引需要占<strong>物理空间</strong>，除了数据表占数据空间外，每个索引还要占一定的物理空间，如果要建立聚簇索引，需要的空间就更大。</li>
</ul>
</details>
<h3 id="索引的数据结构有哪些"> 索引的数据结构有哪些？</h3>
<details><summary>answer</summary>
<p>数据库索引按照结构分类，主要有<strong>B树索引、Hash索引和位图索引</strong>三种</p>
<p><strong>B树索引</strong></p>
<p>又称<strong>平衡树索引</strong>。以树结构组织，有一个或多个分支结点，分支结点又指向单级叶结点。其中分支结点用于遍历树，叶结点则保存真正的值和位置信息。</p>
<p><strong>Hash索引</strong></p>
<p>哈希索引采取一定的哈希算法（常见哈希算法有直接定址法，平方取中法，折叠法，除数取余法，随机数法），将数据库字段转换成定长的Hash值，与这条数据的行指针一并存入Hash表的对应位置，如果发生Hash冲突（两个不同关键字的Hash值相同），则在对应Hash键下以链表形式存储。</p>
<p><strong>位图索引</strong></p>
<p>位图索引为存储在某列中的每一个值生成一个位图。位图索引适合只有几个固定值的列，需要注意位图索引适合静态数据，不适合索引频繁更新的列。</p>
</details>
<h3 id="b树的特点"> B树的特点</h3>
<details><summary>answer</summary>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/interview/basics/databaseB-树.png" alt="" loading="lazy"></p>
<p>B树是所有结点的平衡因子均等于0的多路平衡查找树</p>
<ul>
<li>每个节点最多m个子结点（m棵子树），即<strong>至多含有<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6667em;vertical-align:-0.0833em;"></span><span>m</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span>个关键字</strong></li>
<li>如果根节点没有关键字就没有子树，此时B树为空；如果根节点有关键字，则其子树必然大于等于两棵</li>
<li>除了根节点和叶子结点外，每个结点至少有<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>⌈</span><span><span>m</span><span>/2</span><span>⌉</span></span></span></span></span>（向上取整）个子结点</li>
<li>所有叶子结点位于同一层，按照关键字大小顺序排列</li>
<li>每个节点既存放关键字信息也存放具体数据</li>
</ul>
</details>
<h3 id="b-树的特点"> B+树的特点</h3>
<details><summary>answer</summary>
<p>B+ 树是在 B 树基础上的一种优化，使其更适合实现存储索引结构。</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/interview/basics/databaseB+树.png" alt="" loading="lazy"></p>
<ul>
<li>每个节点最多m个子结点（m棵子树），即<strong>至多含有<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>m</span></span></span></span>个关键字</strong></li>
<li>如果根节点没有关键字就没有子树，此时B树为空；如果根节点有关键字，则其子树必然大于等于两棵</li>
<li>除了根节点和叶子结点外，每个结点至少有<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>⌈</span><span><span>m</span><span>/2</span><span>⌉</span></span></span></span></span>（向上取整）个子结点</li>
<li>所有叶子结点位于同一层，按照关键字大小顺序排列，<strong>并且相邻叶结点之间有一个链指针</strong></li>
<li>非叶结点只起到索引作用，只存放关键字，不存放数据，只有叶子结点既存放关键字也存放数据</li>
</ul>
</details>
<h3 id="b-树和b-树的区别"> B+树和B-树的区别？</h3>
<details><summary>answer</summary>
<ul>
<li>B树每个节点的子节点个数=关键字个数+1，B+树每个节点的子节点个数=关键字个数</li>
<li>B树的相邻叶结点都是独立的，B+树的相邻叶结点之间有链指针</li>
<li>B树的每个节点既存放关键字也存放数据，B+树的非叶结点只起到索引作用，只存放关键字，不存放数据，只有叶子结点既存放关键字也存放数据</li>
</ul>
</details>
<h3 id="使用b-树的好处"> 使用B+树的好处?</h3>
<details><summary>answer</summary>
<p><strong>更少的IO次数</strong>：B+树的内部结点只存放键，不存放值，因此，一次读取，可以在同一内存页中获取更多的键，有利于更快的缩小查找范围。</p>
<p><strong>更适用于范围查询：<strong>B+树的叶结点由一条链相连，因此当需要进行一次</strong>全数据遍历</strong>的时候，B+树只需要使用<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span style="margin-right:0.10903em;">N</span><span>)</span></span></span></span>时间找到最小结点，然后通过链进行<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span style="margin-right:0.10903em;">N</span><span>)</span></span></span></span>的顺序遍历即可。或者在找<strong>大于某个关键字或者小于某个关键字的数据</strong>的时候，B+树只需要找到该关键字然后沿着链表遍历即可。</p>
</details>
<h3 id="hash索引和b-树索引的区别"> Hash索引和B+树索引的区别？</h3>
<details><summary>answer</summary>
<ul>
<li>**范围查询：**Hash索引不支持范围查询，B+树支持范围查询</li>
<li>**排序：**Hash索引不支持排序，B+树索引支持排序，因为Hash索引指向的数据是无序的，而B+树索引指向的数据是有序的</li>
<li>**模糊查询和最左前缀匹配：**Hash索引不支持模糊查询以及多列索引的最左前缀匹配，原因是Hash函数的不可预测，AAAA和AAAAB的索引没有相关性，B+树索引支持模糊查询以及多列索引的最左前缀匹配</li>
<li>**查询效率：**Hash索引虽然在等值查询上较快，但是不稳定，当某个键值存在大量重复的时候，发生Hash碰撞，此时效率可能极差；B+树的查询效率比较稳定，对于所有的查询都是从根节点到叶子结点，且树的高度较低</li>
</ul>
</details>
<h3 id="什么是前缀索引"> 什么是前缀索引？</h3>
<details><summary>answer</summary>
<p>有时需要索引很长的字符列，它会使索引变大且变慢，一个策略就是使用索引开始的几个字符，而不是全部值，即被称为<strong>前缀索引</strong>，以节约空间并获得好的性能。</p>
</details>
<h3 id="什么是联合索引"> 什么是联合索引？</h3>
<details><summary>answer</summary>
<p>联合索引就是由两个或以上的字段共同构成的索引。</p>
</details>
<h3 id="什么是最左前缀匹配原则"> 什么是最左前缀匹配原则？</h3>
<details><summary>answer</summary>
<p>在MySQL建立联合索引（多列索引）时会遵循最左前缀匹配原则，即<strong>最左优先</strong>，在检索数据时从联合索引的最左边一列开始匹配（也就是where子句中一定要有联合索引的第一个字段，并且where子句中字段的顺序可以任意调整）。</p>
<p>例如有一个3列索引（a,b,c），则已经对(a)、(a,b)、(a,b,c)上建立了索引。所以在创建<strong>多列索引</strong>时，要根据业务需求，<code>where</code>子句中使用最频繁的一列放在最左边。</p>
<p>**根据最左前缀匹配原则，MySQL 会一直向右匹配直到遇到 范围查询（&gt;、&lt;、between、like）就停止匹配，**比如采用查询条件 where a = 1 and b = 2 and c &gt; 3 and d = 4 时，如果建立（a,b,c,d）顺序的索引，d 是用不到索引的，如果建立（a,b,d,c）的索引则都可以用到，并且 where 子句中 a、b、d 的顺序可以任意调整。</p>
</details>
<h3 id="添加索引的原则"> 添加索引的原则</h3>
<details><summary>answer</summary>
<ul>
<li>**在查询中很少使用或者参考的列不要创建索引：**由于这些列很少使用到，增加索引反而会降低系统的维护速度和增大空间需求。</li>
<li>**只有很少数据值的列不创建索引：**区分度太低，增加索引并不能明显加快检索速度</li>
<li><strong>修改性能远远大于检索性能时，不应该创建索引</strong>：二者相互矛盾，当增加索引时，会提高索引性能，但是会降低修改性能。</li>
<li><strong>定义为外键的数据列一定要创建索引</strong>：如果不加索引，则删除主表记录或主子表关联查询，都会进行字表的全表扫描。</li>
</ul>
</details>
<h3 id="聚集索引和非聚集索引"> 聚集索引和非聚集索引</h3>
<details><summary>answer</summary>
<p><strong>聚集索引，又称为聚集索引，首先并不是一种索引类型，而是一种数据存储方式，即索引结构和数据一起存放。</strong></p>
<p>聚集索引的特点</p>
<ol>
<li>聚集索引的检索效率更高</li>
<li>聚集索引的磁盘IO次数更少</li>
<li>一个数据表只能有一个聚集索引</li>
<li>一般而言，会在频繁使用、排序的字段上创建聚集索引</li>
</ol>
<p><strong>非聚集索引即索引结构和数据分开存放，非聚集索引中并不存放真正的数据行，只包含一个指向数据行的指针。</strong></p>
<p>非聚簇索引的创建也是以此为根据的，分为<strong>复合索引</strong>和<strong>覆盖索引</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/interview/basics/database聚簇索引和非聚簇索引.png" alt="" loading="lazy"></p>
</details>
<h2 id="事务管理"> 事务管理</h2>
<h3 id="什么是数据库事务"> 什么是数据库事务？</h3>
<details><summary>answer</summary>
<p>数据库的<strong>事务</strong>（Transaction）是一种机制、一个操作序列，包含了一组数据库操作命令，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。</p>
<p>事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令要么都执行，要么都不执行，因此事务是一个不可分割的工作逻辑单元。如果任意一个操作失败，那么整组操作即为失败，会回到操作前状态或者上一个节点。</p>
</details>
<h3 id="有哪些事务状态"> 有哪些事务状态？</h3>
<details><summary>answer</summary>
<p>事务在其生命周期中会经历不同的状态，这些状态被称为<strong>事务状态</strong>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/interview/basics/database事务状态.png" alt="" loading="lazy"></p>
<p><a href="https://www.geeksforgeeks.org/transaction-states-in-dbms/" target="_blank" rel="noopener noreferrer">Transaction States in DBMS - GeeksforGeeks</a></p>
<p><strong>活跃状态（Active State）</strong>：事务的第一个状态，任何正在执行的事务都处于此状态，所做的<strong>更改</strong>存储在<strong>主内存（本地）的缓冲区</strong>中。</p>
<p><strong>部分提交状态（Partially Commited State）</strong>：执行操作后，事务进入部分提交状态。之所以是部分提交，是因为所做的更改仍然在<strong>主内存（本地）的缓冲区</strong>中。</p>
<p><strong>失败状态（Failed State）</strong>：如果事务在活动状态或者部分提交状态发生一些错误，并且事务无法进一步执行，则事务进入失败状态。</p>
<p><strong>中止状态（Aborted State）</strong>：如果任何事务已达到失败状态，撤销失败事务对当前数据库造成的影响，恢复管理器将数据库回滚到开始执行的原始状态。</p>
<p><strong>提交状态（Commited State）</strong>：如果所有操作成功执行，数据永久写入到磁盘上的数据库中，则来自部分提交状态的事务进入提交状态，无法从此状态回滚，它是一个新的<strong>一致状态</strong>。</p>
</details>
<h3 id="事务的四大特性"> 事务的四大特性？</h3>
<details><summary>answer</summary>
<p>事务具有4个特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability），这4个特性通常简称为ACID，<strong>关系型数据库</strong>需要遵循ACID规则。</p>
<p>**原子性：**事务是最小的执行单位，不可分割的（原子的）。事务的原子性确保动作要么全部执行，要么全部不执行。</p>
<p>**一致性：**事务执行前后数据的完整性保持一致。</p>
<p>**隔离性：**并发访问数据库时，一个用户的事务不被其他事务所干扰，各个事务不干涉内部的数据。</p>
<p>**持久性：**一个事务被提交之后，对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</p>
</details>
<h3 id="如何实现事务的acid特性"> 如何实现事务的ACID特性？</h3>
<details><summary>answer</summary>
<p>事务的ACID特性是由关系型数据库管理系统来实现的。</p>
<p>DBMS采用<strong>日志</strong>来保证事务的<strong>原子性、一致性、持久性</strong>。日志记录了事务对数据库所做的操作，如果某个事务在执行过程中发生错误，就可以根据日志，撤销事务对数据库已做的操作，使数据库退回到执行事务之前的初始状态。</p>
<p>DBMS采用<strong>锁机制</strong>来保证事务的隔离性。当多个事务同时更新数据库中相同的数据时，只允许<strong>持有锁的事务</strong>能更新该数据，其他事务必须等待，直到前一个事务释放了锁，其他事务才有机会更新该数据。</p>
<p><a href="https://www.cnblogs.com/kismetv/p/10331633.html" target="_blank" rel="noopener noreferrer">深入学习MySQL事务：ACID特性的实现原理 - 编程迷思 - 博客园 (cnblogs.com)</a></p>
</details>
<h3 id="并发事务之间的相互影响"> 并发事务之间的相互影响</h3>
<details><summary>answer</summary>
<p><strong>脏读（Dirty Read）</strong>：<strong>A事务读取到了B事务还未提交的数据</strong>。</p>
<p><strong>不可重复读（Non-repeatable Read）</strong>：<strong>A事务读取到了B事务提交的更改数据</strong>。在一个事务范围内，两次相同的查询返回两个不同的数据，这是因为在此间隔内有其他事务对数据进行了修改并提交。</p>
<p><strong>幻读（Phantom Read）</strong>：<strong>A事务读取到了B事务提交的新增数据</strong>。例如有一个事务对表中的数据进行了修改并提交，这种修改是向表中<strong>插入一行新数据</strong>。那么，当第一个事务的用户发现表中还有没有修改的数据行，就好像发生了幻觉一样。</p>
<p><strong>丢失更新（Lost Update）</strong>：</p>
<p><strong>第一类丢失更新（回滚丢失，Lost update）</strong></p>
<p>A事务撤销时，把已经提交的B事务的更新数据覆盖了</p>
<p><strong>第二类丢失更新（覆盖丢失/两次更新问题，Second lost update）</strong></p>
<p>A事务覆盖B事务已经提交的数据，造成B事务所做操作丢失</p>
<p>两个事务同时读取同一条记录，事务A先修改记录，事务B也修改记录（B是不知道A修改过），当B提交数据后，其修改结果覆盖了A的修改结果，导致事务A更新丢失。</p>
<p>不可重复读的重点是修改，幻读的重点在于新增或删除。</p>
</details>
<h3 id="什么是事务的隔离级别"> 什么是事务的隔离级别？</h3>
<details><summary>answer</summary>
<p>读取未提交（READ-UNCOMMITTED）</p>
<p>读取已提交（READ-COMMITTED）</p>
<p>可重复读（REPEATABLE-READ）</p>
<p>可串行化（SERIALIZABLE）</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>读取未提交</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>读取已提交</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>可重复读</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>可串行化</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody>
</table>
</details>
<h2 id="锁"> 锁</h2>
<h3 id="锁的分类"> 锁的分类</h3>
<details><summary>answer</summary>
<p>从数据库系统角度分为三种：</p>
<p><strong>共享锁（S）</strong>：又叫<strong>读锁</strong>。可以并发读取数据，但不能修改数据。也就是说当数据资源上存在共享锁时，所有的事务都不能对该数据进行修改（不能加排他锁），直到数据读取完成，共享锁释放。</p>
<p><strong>排他锁（X）</strong>：又叫<strong>独占锁、写锁</strong>。对数据资源进行增删改时，不允许其他事务操作这块资源（读取或修改），直到排他锁被释放，从而防止同时对同一资源进行多重操作。</p>
<p><strong>更新锁（U）</strong>：防止出现<strong>死锁</strong>的锁模式。两个事务对一个数据资源进行先读取再修改的情况下，使用共享锁和排他锁有时会出现死锁现象，而使用更新锁就可以避免死锁的出现。</p>
<p><strong>死锁</strong>：如果有两个或多个事务同时对一个数据资源申请了共享锁，在修改数据时，这些事务都要将共享锁升级为排他锁。这时，这些事务都不会释放共享锁，而是一直等待对方释放，这样就造成了死锁。</p>
</details>
<h3 id="什么是死锁-如何解决死锁"> 什么是死锁？如何解决死锁？</h3>
<details><summary>answer</summary>
<p>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象。</p>
<ol>
<li>
<p>不同的程序并发存取多个表，尽量约定以<strong>相同的顺序访问表</strong>。</p>
</li>
<li>
<p>在同一个事务中，尽可能做到<strong>一次锁定事务所需要的所有资源</strong>。</p>
</li>
<li>
<p>对于非常容易产生死锁的业务部分，可以尝试<strong>升级锁定粒度</strong>，设置<strong>表级锁</strong>。</p>
</li>
</ol>
</details>
<h2 id="常用sql语句"> 常用SQL语句</h2>
<h3 id="sql语句主要分为哪些类别"> SQL语句主要分为哪些类别？</h3>
<details><summary>answer</summary>
<ol>
<li>数据定义语言DDL（Data Definition Language）：例如<code>CREATE</code>，<code>DROP</code>，<code>ALTER</code>等，对逻辑结构有操作的，其中包括表结构，视图和索引。</li>
<li>数据查询语言DQL（Data Query Language）：即查询操作，以<code>SELECT</code>为主，各种简单查询、连接查询都属于DQL</li>
<li>数据操作语言DML（Data Manipulation Lanuage）：例如<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>等，对数据进行操作的。DQL和DML共同构建了常用的<strong>增删改查</strong>操作。</li>
<li>数据控制语言DCL（Data Control Language）：例如<code>GRANT</code>、<code>REVOKE</code>、<code>COMMIT</code>、<code>ROLLBACK</code>等，对数据库安全性、完整性等有操作的，可以简单的理解为权限控制等。</li>
</ol>
</details>
<h3 id="什么是元组-键-超键-候选键-主键-外键-主属性-非主属性"> 什么是元组？键？超键？候选键？主键？外键？主属性？非主属性？</h3>
<details><summary>answer</summary>
<p><strong>元组</strong>：元组（tuple）是关系数据库中的基本概念，关系是一张表，表中的每行（即数据库中的每条记录）就是一个元组。在二维表中，元组也称为行。</p>
<p><strong>键</strong>：能唯一标识元组的属性，对应表中的列</p>
<p>**超键：**在关系中，能唯一标识元组的属性集称为关系模式的超键。一个属性可以作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含候选键和主键。</p>
<p>**候选键：**是最小超键，即没有冗余元素的超键。</p>
<p>**主键：**主关键字（主键，Primary key）是中被挑选出来的候选键，作为表的行的唯一标识。主键不能有重复，不能为空（NULL）。</p>
<p>**外键：**在一个表（关系）中存在的另一个表（关系）的主键称为此表的外键，外键可以有重复的，可以是空值。外键是用来和其他表建立联系用的。</p>
<p><strong>主属性</strong>：候选键中出现过的属性称为主属性。</p>
<p><strong>非主属性</strong>：不包含在任何一个候选键中的属性称为非主属性。</p>
</details>
<h3 id="主键和外键有什么区别"> 主键和外键有什么区别？</h3>
<details><summary>answer</summary>
<p><strong>主键</strong>：主键用于唯一标识一个元组，不能有重复，不允许为空。一个表只能有一个主键。</p>
<p><strong>外键</strong>：外键用于和其他表建立联系用，外键是另一表的主键，外键是可以有重复的，可以是空值。一个表可以有多个外键。</p>
</details>
<h3 id="char和varchar的区别"> char和varchar的区别？</h3>
<details><summary>answer</summary>
<ol>
<li>
<p>char表示定长字符串，长度是固定的，最多能存放的字符个数为255；varchar表示可变长字符串，长度是可变的，最多能存放的字符个数为65532</p>
</li>
<li>
<p>使用char时，如果插入数据的长度小于char的固定长度时，用空格填充</p>
</li>
<li>
<p>char的存取速度比varchar快很多，缺点是会占用多余空间，属于以空间换时间</p>
</li>
</ol>
</details>
<h3 id="sql约束有哪几种类型"> SQL约束有哪几种类型</h3>
<details><summary>answer</summary>
<p>约束是一种简单地强加于表中一列或多列（字段）的限制，从而保证表中数据一致性（准确和可靠）。以下为六大约束：</p>
<ul>
<li><strong>非空约束（NOT NULL）</strong>：保证字段不为空</li>
<li><strong>唯一约束（UNIQUE）</strong>：限制一列或多列的值，保证字段值在表内的唯一性，可以为空（主键约束是一种特殊类型的唯一约束）</li>
<li><strong>主键约束（PRIMARY KEY）</strong>：标志一列或多列，保证其值在表中的唯一性，不能为空，相当于非空约束和唯一约束的组合</li>
<li><strong>外键约束（FOREIGN KEY）</strong>：限制一列或多列中的值必须被包含在另一表的外键列中，并且在级联更新或级联删除规则建立后也可以限制其他表中的可用值</li>
<li><strong>默认约束（DEFAULT）</strong>：保证字段有默认值</li>
<li><strong>检查约束（CHECK）</strong>：限制一列的可用值范围</li>
</ul>
</details>
<h3 id="有哪些关联查询"> 有哪些关联查询？</h3>
<details><summary>answer</summary>
<p><strong>交叉连接（CROSS JOIN）</strong></p>
<ul>
<li>返回被连接的两个表所有数据行的<strong>笛卡尔积</strong>，返回的数据行数等于第一个表中符合查询条件的数据行数<strong>乘以</strong>第二个表中符合查询条件的数据行数，以下两个表达式等价：
<ul>
<li><code>SELECT * FROM A, B</code></li>
<li><code>SELECT * FROM A CROSS JOIN B</code></li>
</ul>
</li>
</ul>
<p><strong>内连接（INNER JOIN）</strong></p>
<ul>
<li>
<p>等值连接</p>
<ul>
<li><code>ON A.id=B.id</code></li>
</ul>
</li>
<li>
<p>不等值连接</p>
<ul>
<li><code>ON A.id &gt; B.id</code></li>
</ul>
</li>
<li>
<p>自连接</p>
<ul>
<li><code>SELECT * FROM A T1 INNER JOIN A T2 ON T1.id=T2.id</code></li>
</ul>
</li>
<li>
<p>外连接（LEFT JOIN/RIGHT JOIN）</p>
<ul>
<li>
<p>左外连接</p>
<ul>
<li>以左表为主，先查询出左表，按照<code>ON</code>后的关联条件匹配右表，没有匹配到的用<code>NULL</code>填充，可以简写成<code>LEFT JOIN</code></li>
</ul>
</li>
<li>
<p>右外连接</p>
<ul>
<li>以左表为主，先查询出右表，按照<code>ON</code>后的关联条件匹配左表，没有匹配到的用<code>NULL</code>填充，可以简写成<code>RIGHT JOIN</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>全连接（FULL JOIN）</strong></p>
<p><strong>联合查询（UNION与UNION ALL）</strong></p>
<ul>
<li><code>SELECT * FROM A UNION SELECT * FROM B UNION ...</code></li>
</ul>
</details>
<h3 id="什么是子查询"> 什么是子查询？</h3>
<details><summary>answer</summary>
<p>多条MySQL语句嵌套使用时，内部的MySQL查询语句称为子查询。</p>
<p>子查询是一个<code>SELECT</code>语句，它嵌套在另一个<code>SELECT</code>、<code>SELECT...INTO</code>、<code>INSERT...INTO</code>、<code>DELETE</code>、<code>UPDATE</code>语句或嵌套在另一子查询中。</p>
</details>
<h3 id="drop、delete与truncate的区别"> DROP、DELETE与TRUNCATE的区别？</h3>
<blockquote>
<p>用法不同、属于不同的数据库语言、执行速度不同</p>
</blockquote>
<details><summary>answer</summary>
<p>drop（丢弃数据）</p>
<p>属于DDL语言，<code>drop table 表名</code>删除整张表，不保留表的结构（定义），不能回滚，删除速度快。</p>
<p>truncate（清空数据）</p>
<p>属于DDL语言，<code>truncate table 表名</code>保留表的结构（定义）但删除表的所有数据，不能回滚，删除速度快</p>
<p>delete（删除数据）</p>
<p>属于DML语言，<code>delete from 表名 where 列名=值</code>删除表的部分数据行，如果不加<code>where</code>子句和<code>truncate table 表名</code>作用类似，可以回滚，删除速度慢</p>
</details>
<h3 id="union和union-all的区别"> UNION和UNION ALL的区别？</h3>
<details><summary>answer</summary>
<p><code>UNION</code>和<code>UNION ALL</code>用于把来自多个<code>SELECT</code>语句的结果组合到一个结果集合中，<code>UNION</code>会把结果集合中重复的记录行删掉只保留一行，使用<code>UNION ALL</code>则会将所有记录返回，效率高于<code>UNION</code>。</p>
</details>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://blog.csdn.net/trusause/article/details/79487807" target="_blank" rel="noopener noreferrer">(37条消息) 死锁，更新锁，共享锁，排它锁，意向锁，乐观锁，悲观锁等名词解释及案例详解_trusause的博客-CSDN博客</a></p>
<p><a href="https://baike.baidu.com/item/%E7%BA%A7%E8%81%94%E6%9B%B4%E6%96%B0/11036500?fr=aladdin." target="_blank" rel="noopener noreferrer">级联更新_百度百科 (baidu.com)</a></p>
<p><a href="https://baike.baidu.com/item/%E6%A3%80%E6%9F%A5%E7%BA%A6%E6%9D%9F/10272981?fr=aladdin" target="_blank" rel="noopener noreferrer">检查约束_百度百科 (baidu.com)</a></p>
]]></content:encoded>
      <enclosure url="https://img-blog.csdnimg.cn/img_convert/4717673e36966e0e4b33fccfd753f6ea.png" type="image/png"/>
    </item>
    <item>
      <title>计算机网络</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/network/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/network/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">计算机网络</source>
      <pubDate>Wed, 23 Feb 2022 14:11:29 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="计算机网络"> 计算机网络</h1>
<ul>
<li><a href="./计算机网络面试突击.html">计算机网络面试突击</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Custom Layout</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/layout/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/layout/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">Custom Layout</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<p>You can use slots with markdown and component support to custom page layout.</p>
<div><p>Note</p>
<p>This is just a demo, you should add styles according to your own needs.</p>


</div>
<template #page-top><p>Page top content</p>
</template><template #page-bottom><p>Page bottom content</p>
</template><template #content-top><p>Content top content</p>
</template><template #content-bottom><p>Content bottom content</p>
</template><template #navbar-start><p>Navbar start content</p>
</template><template #navbar-center><p>Navbar center content</p>
</template><template #navbar-end><p>Navbar end content</p>
</template><template #sidebar-top><p>Sidebar top content</p>
</template><template #sidebar-center><p>Sidebar center content</p>
</template><template #sidebar-bottom><p>Sidebar bottom content</p>
</template><p>For details, see <a href="https://vuepress-theme-hope.github.io/guide/layout/custom/" target="_blank" rel="noopener noreferrer">Custom layout</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>MySQL重要知识点</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/database/MySQL%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/database/MySQL%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">MySQL重要知识点</source>
      <pubDate>Mon, 14 Mar 2022 02:41:12 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="mysql重要知识点"> MySQL重要知识点</h1>
<h2 id="重要知识点"> 重要知识点</h2>
<h3 id="一条-sql-语句在-mysql-中如何被执行的"> 一条 SQL 语句在 MySQL 中如何被执行的?</h3>
<details><summary>answer</summary>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/interview/basics/database/MySQL基础架构.png" alt="" loading="lazy"></p>
<p>MySQL主要分为<strong>Server层</strong>和<strong>存储引擎层</strong>。</p>
<p><strong>Server层</strong>：包括连接器、查询缓存、分析器、优化器、执行器等，涵盖MySQL的核心功能。</p>
<p><strong>存储引擎层</strong>：负责数据的存储和提取。</p>
<ul>
<li>
<p>查询<code>select</code>语句的执行流程如下：</p>
<ul>
<li>连接器：管理连接，权限验证</li>
<li>查询缓存：判断是否命中缓存，如果命中缓存则直接返回结果</li>
<li>分析器：词法分析，语法分析
<ul>
<li>词法分析：提取 sql 语句的关键元素，以<code>select</code>为例，提取出查询的表名、查询的列名（字段）、查询条件等。</li>
<li>语法分析：判断查询关键词是否正确</li>
</ul>
</li>
<li>优化器：根据优化算法选择执行方案</li>
<li>执行器：判断当前用户对当前表是否有查询权限，如果有则调用引擎提供的读接口，返回查询结果</li>
</ul>
</li>
<li>
<p>更新语句的执行流程和查询语句的流程类似：</p>
<ul>
<li>连接器：管理连接，权限验证</li>
<li>分析器：词法分析，语法分析
<ul>
<li>词法分析：提取 sql 语句的关键元素，以<code>update</code>为例，提取出更新的表名、更新的列名（字段）、更新条件等。</li>
<li>语法分析：判断查询关键词是否正确</li>
</ul>
</li>
<li>优化器：根据优化算法选择执行方案</li>
<li>执行器：判断当前用户对当前记录是否有更新权限， 如果有则调用引擎提供的写接口，返回更新结果</li>
</ul>
</li>
</ul>
</details>
<h3 id="mysql三大日志详解"> MySQL三大日志详解</h3>
<details><summary>answer</summary>
<p>MySQL日志主要包括错误日志、二进制日志、查询日志、慢查询日志、事务日志几大类</p>
<p>其中比较重要的还属二进制日志<code>binlog</code>和事务日志<code>redo log</code>和回滚日志<code>undo log</code></p>
<p><code>binlog</code>是逻辑日志，记录内容是语句的原始逻辑</p>
<p><code>binlog</code>日志有三种格式，可以通过<code>binlog_format</code>参数指定。</p>
<ul>
<li><strong>statement</strong>：记录的内容是<code>SQL</code>语句原文，对数据进行修改的SQL都会记录在日志文件中</li>
<li><strong>row</strong>：基于行的日志记录，记录的是每一行的数据变更。（默认）</li>
<li><strong>mixed</strong>：混合了STATEMENT和ROW两种格式，默认采用STATEMENT，在某些特殊情况下会自动切换为ROW进行记录。</li>
</ul>
</details>
<h3 id="mysql-binlog的三种格式及区别"> MySQL binlog的三种格式及区别？</h3>
<details><summary>answer</summary>
<table>
<thead>
<tr>
<th>格式</th>
<th>文件大小</th>
<th>执行速度</th>
<th>数据一致性</th>
</tr>
</thead>
<tbody>
<tr>
<td>statement</td>
<td>小</td>
<td>快</td>
<td>当SQL语句里面用到一些特定功能函数，比如用到日期函数时在主从复制时可能丢失数据</td>
</tr>
<tr>
<td>row</td>
<td>大</td>
<td>慢</td>
<td>不会引起不一致</td>
</tr>
<tr>
<td>mixed</td>
<td>折中</td>
<td>折中</td>
<td><code>MySQL</code>会判断这条<code>SQL</code>语句是否可能引起数据不一致，如果是，就用<code>row</code>格式，否则就用<code>statement</code>格式。</td>
</tr>
</tbody>
</table>
</details>
<h3 id="主从复制"> 主从复制</h3>
<details><summary>answer</summary>
<p><strong>主从复制</strong>：是指将主数据库的<code>DDL</code>和<code>DML</code>操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而建立一个和主数据库完全一样的数据库环境。</p>
<p><strong>复制的优点</strong>：</p>
<ul>
<li>主库出现问题，可以快速切换到从库提供服务</li>
<li>实现读写分离，降低主库的访问压力</li>
<li>可以在从库中执行备份，以避免备份期间影响主库服务</li>
</ul>
</details>
<h3 id="主从复制的原理"> 主从复制的原理</h3>
<details><summary>answer</summary>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/interview/basics/database/MySQL主从复制.png" alt="" loading="lazy"></p>
<ol>
<li>主库将数据库中数据的变化写入到<code>binlog</code></li>
<li>从库连接主库</li>
<li>从库创建一个<code>I/O</code>线程向主库请求更新的<code>binlog</code></li>
<li>主库会创建一个<code>binlog dump</code>线程来发送<code>binlog</code>，从库中的<code>I/O</code>线程负责接收</li>
<li>从库的I/O线程将接收的<code>binlog</code>写入到<code>relay log</code>中</li>
<li>从库的SQL线程读取<code>relay log</code>同步数据到本地（即重新执行一遍SQL）</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/interview/basics/database/MySQL主从复制2.png" alt="" loading="lazy"></p>
<p>从上图来看，复制分成三步：</p>
<ol>
<li>Master 主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中</li>
<li>从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志 Relay Log</li>
<li>slave重做中继日志中的事件，将改变反映它自己的数据。</li>
</ol>
</details>
<h3 id="关于数据库中如何存储时间的一点思考"> 关于数据库中如何存储时间的一点思考</h3>
<details><summary>answer</summary>
<p><strong>为什么不要用字符串存储日期？</strong></p>
<details><summary>answer</summary>
<ol>
<li>
<p>字符串占用的空间更大</p>
</li>
<li>
<p>字符串存储的日期效率比较低（逐个字符进行比对），无法用日期相关的API进行计算和比较</p>
</li>
</ol>
<p><strong>Datetime和Timestamp的优缺点对比？</strong></p>
<table>
<thead>
<tr>
<th>日期类型</th>
<th>存储空间</th>
<th>日期格式</th>
<th>日期范围</th>
<th>是否存在时区问题</th>
</tr>
</thead>
<tbody>
<tr>
<td>Datetime</td>
<td>8字节</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>1000-01-01 00:00:00<br>~9999-12-31 23:59:59</td>
<td>是</td>
</tr>
<tr>
<td>TimeStamp</td>
<td>4字节</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>1970-01-01 00:00:00<br>~2037-12-31 23:59:59</td>
<td>否</td>
</tr>
<tr>
<td>时间戳</td>
<td>4字节</td>
<td>全数字</td>
<td>1970-01-01 00:00:01之后的时间</td>
<td>否</td>
</tr>
</tbody>
</table>
</details>
</details>
<p>::::</p>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://zhuanlan.zhihu.com/p/65743530" target="_blank" rel="noopener noreferrer">MySQL binlog的三种格式及区别 - 知乎 (zhihu.com)</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/interview/basics/database/MySQL基础架构.png" type="image/png"/>
    </item>
    <item>
      <title>计算机网络面试突击</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E7%AA%81%E5%87%BB/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/interview/basics/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E7%AA%81%E5%87%BB/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">计算机网络面试突击</source>
      <pubDate>Wed, 23 Feb 2022 14:11:29 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="计算机网络面试突击"> 计算机网络面试突击</h1>
<h2 id="第三部分-传输层"> 第三部分：传输层</h2>
<h3 id="三次握手和四次挥手机制"> 三次握手和四次挥手机制</h3>
<p><strong>三次握手机制</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/interview/basics/network/1614160878-FiFlkq-image.png" alt="" loading="lazy"></p>
<details><summary>answer1</summary>
<p>三次握手是TCP连接的建立过程。在握手之前，主动打开连接的客户端结束CLOSE阶段，被动打开的服务端结束CLOSE阶段，并进入LISTEN阶段。随后进入三次握手阶段：</p>
<ol>
<li>客户端向服务器端发送连接请求报文，等待服务器确认</li>
<li>服务器接收到客户端发送的连接请求报文，如果同意连接则回送确认报文</li>
<li>客户端收到服务器回送的确认报文段后，还要向服务器给出确认，当服务器端收到客户端发送的确认收到服务器端回送报文的确认报文后，建立连接，完成三次握手。</li>
</ol>
</details>
<p><strong>四次挥手机制</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/interview/basics/network/1612459478-ajInIu-四次挥手.png" alt="" loading="lazy"></p>
<details><summary>answer1</summary>
<p>四次挥手即TCP连接的释放，这里假设客户端主动释放连接。在挥手之前主动释放连接的客户端结束ESTABLISHED阶段，随后开始四次挥手：</p>
<ol>
<li>客户端向服务器端发送连接释放报文段，停止发送数据，客户端主动关闭TCP连接</li>
<li>服务器端收到客户端发送的连接释放报文段，回送给客户端确认报文段，客户端收到服务器发送的确认报文段，客户端到服务器端方向的连接就释放了，连接半关闭</li>
<li>若服务器端没有还要传送的数据，则向客户端发送连接释放报文段，服务器主动关闭TCP连接</li>
<li>客户端收到服务器端的连接释放报文段，回送给服务器端确认报文段，等到时间达到计时器设置的2MSL（最长报文段寿命）后，连接彻底关闭</li>
</ol>
</details>
<h3 id="为什么要进行三次握手-两次握手可以吗"> 为什么要进行三次握手？两次握手可以吗？</h3>
<p><strong>三次握手的目的</strong></p>
<details><summary>answer1</summary>
<p>三次握手的主要目的是确认自己和对方的发送和接收都是正常的，从而保证了双方能够进行可靠通信。</p>
<p>若采用两次握手，当第二次握手后就建立连接的话，此时客户端知道服务器能够正常接收到自己发送的数据，而服务器并不知道客户端能否收到自己发送的数据</p>
</details>
<details><summary>answer2</summary>
<p>保证双方都是双工通信</p>
<p>第一次握手，服务端确认客户端的发送正常</p>
<p>第二次握手，客户端确认服务端的收发正常</p>
<p>第三次握手，服务端确认客户端的接收正常</p>
</details>
<p><strong>不使用两次握手的原因</strong></p>
<details><summary>answer</summary>
<p>防止已失效的连接请求报文段突然又传送到了服务端，造成双方的不同步，导致服务端资源浪费。</p>
</details>
<p><strong>不使用四次握手的原因</strong></p>
<details><summary>answer</summary>
<p>三次握手理论上已经可以建立可靠连接，使用更多的次数会造成资源浪费。</p>
</details>
<h3 id="为什么要四次挥手"> 为什么要四次挥手</h3>
<details><summary>answer1</summary>
<p>TCP的连接是全双工的，两个方向的连接需要单独关闭。</p>
</details>
<details><summary>answer2</summary>
<p>释放TCP连接时之所以需要四次挥手，是因为ACK确认报文和FIN释放连接报文是分别在两次握手中传输的。</p>
<p>当主动方在数据传送结束后发出释放连接的通知，由于被动方可能还有必要的数据要处理，所以会先返回ACK确认收到报文。当被动方也没有数据再发送的时候，则发出连接释放通知，对方确认后才完全关闭TCP连接。</p>
</details>
<h3 id="tcp和udp的区别"> TCP和UDP的区别</h3>
<details><summary>answer</summary>
<table>
<thead>
<tr>
<th>类型</th>
<th>是否面向连接</th>
<th>传输可靠性</th>
<th>传输形式</th>
<th>传输效率</th>
<th>所需资源</th>
<th>应用场景</th>
<th>首部字节</th>
</tr>
</thead>
<tbody>
<tr>
<td>TCP</td>
<td>是</td>
<td>可靠，保证数据有序</td>
<td>字节流</td>
<td>低（慢）</td>
<td>多</td>
<td>文件传输、邮件传输</td>
<td>20-60</td>
</tr>
<tr>
<td>UDP</td>
<td>否</td>
<td>不可靠，不保证数据有序</td>
<td>数据报文段</td>
<td>高（快）</td>
<td>少</td>
<td>即时通讯、域名转换</td>
<td>8个字节</td>
</tr>
</tbody>
</table>
</details>
<h3 id="tcp协议如何保证可靠传输"> TCP协议如何保证可靠传输？</h3>
<details><summary>answer</summary>
<p>（<strong>校序重流拥</strong>）</p>
<ol>
<li>数据分块：应用数据被分割成TCP认为最合适发送的数据块</li>
<li>校验和：TCP将保持它首部和数据的校验和。这是一个端到端的校验和，**目的是检测数据在传输过程中的任何变化。**如果接收端的校验和有差错，TCP将丢弃这个报文段和不确认收到此报文段。</li>
<li>序列号和确认应答：**TCP给发送的每一个字节进行编号，在传输的过程中，每次接收方收到数据后，都会对传输方进行确认应答，即发送ACK报文，这个ACK报文中有对应的确认序列号ack，告诉发送方成功接收了哪些数据以及下一次的数据从哪里开始发。**除此之外，接收方可以根据序列号对数据报进行排序，把有序数据传送给应用层，并丢弃重复的数据。</li>
<li>超时重传：**当TCP发出一个报文段后，它启动一个定时器，等待目的端确认收到这个报文段。**如果超过某个时间还没有收到确认，将重发这个报文段。</li>
<li>流量控制：**TCP连接的双方都有一个固定大小的缓冲空间，发送方发送的数据不能超过接收端缓冲区的大小，**当接收方来不及处理发送方的数据，会提示发送方降低发送的速率，防止产生丢包。<strong>TCP通过滑动窗口协议来支持流量控制机制。</strong></li>
<li>拥塞控制：当网络中某个节点发生拥塞时，减少数据的发送。</li>
<li>自动重传请求（Automatic Repeat-reQuest，ARQ）是OSI模型中数据链路层和传输层的错误纠正协议之一。<strong>它通过确认和超时两个机制，基本原理是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</strong></li>
</ol>
</details>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/interview/basics/network/1614160878-FiFlkq-image.png" type="image/png"/>
    </item>
    <item>
      <title>Intro Page</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/intro/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/intro/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">Intro Page</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="intro-page"> Intro Page</h1>
<p>Place your introducation and profile here.</p>
]]></content:encoded>
    </item>
    <item>
      <title>readme</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/life/Annual-Summary/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/life/Annual-Summary/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">readme</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="readme"> readme</h1>
]]></content:encoded>
    </item>
    <item>
      <title>readme</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/life/Travel-Records/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/life/Travel-Records/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">readme</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="readme"> readme</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Blog Home</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">Blog Home</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>readme</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/school/high-school/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/school/high-school/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">readme</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="readme"> readme</h1>
<p>Hello High-School!</p>
]]></content:encoded>
    </item>
    <item>
      <title>readme</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/school/university/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/school/university/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">readme</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="readme"> readme</h1>
<p>Hello University!</p>
]]></content:encoded>
    </item>
    <item>
      <title>JavaDoc</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/software/idea/idea%E6%8F%92%E4%BB%B6/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/software/idea/idea%E6%8F%92%E4%BB%B6/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">JavaDoc</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="javadoc"> JavaDoc</h1>
<h2 id="概念"> 概念</h2>
<p>Javadoc 是 Sun 公司提供的一种工具，它可以从程序源代码中抽取类、方法、成员等注释，然后形成一个和源代码配套的 API 帮助文档。也就是说，只要在编写程序时以一套特定的标签注释，在程序编写完成后，通过 Javadoc 就形成了程序的 API 帮助文档。</p>
<h2 id="插件名称"> 插件名称</h2>
<p>easy-javadoc</p>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="http://c.biancheng.net/view/6262.html" target="_blank" rel="noopener noreferrer">Javadoc（文档注释）详解 (biancheng.net)</a></p>
<p><a href="https://www.jianshu.com/p/bac203e34578" target="_blank" rel="noopener noreferrer">编程工具-idea配置-JavaDoc官方插件 - 简书 (jianshu.com)</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>{Title}（文章标题）{Year}, {Authors}, {Journal Name}{引用格式}</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/school/master/paper/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E6%A8%A1%E6%9D%BF/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/school/master/paper/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E6%A8%A1%E6%9D%BF/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">{Title}（文章标题）{Year}, {Authors}, {Journal Name}{引用格式}</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="title-文章标题-year-authors-journal-name-引用格式"> {Title}（文章标题）{Year}, {Authors}, {Journal Name}{引用格式}</h1>
<h2 id="summary"> Summary</h2>
<p>写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。注：写文章summary切记需要通过自己的思考，用自己的语言描述。忌讳直接Ctrl + c原文。</p>
<h2 id="research-objective-s"> Research Objective(s)</h2>
<p>作者的研究目标是什么？</p>
<h2 id="background-problem-statement"> Background / Problem Statement</h2>
<p>研究的背景以及问题陈述：作者需要解决的问题是什么？</p>
<h2 id="method-s"> Method(s)</h2>
<p>作者解决问题的方法/算法是什么？是否基于前人的方法？基于了哪些？</p>
<h2 id="evaluation"> Evaluation</h2>
<p>作者如何评估自己的方法？实验的setup是什么样的？感兴趣实验数据和结果有哪些？有没有问题或者可以借鉴的地方？</p>
<h2 id="conclusion"> Conclusion</h2>
<p>作者给出了哪些结论？哪些是strong conclusions, 哪些又是weak的<a href="https://www.zhihu.com/search?q=conclusions&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A142802496%7D" target="_blank" rel="noopener noreferrer">conclusions</a>（即作者并没有通过实验提供evidence，只在<a href="https://www.zhihu.com/search?q=discussion&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A142802496%7D" target="_blank" rel="noopener noreferrer">discussion</a>中提到；或实验的数据并没有给出充分的evidence）?</p>
<h2 id="notes"> Notes</h2>
<p>(optional) 不在以上列表中，但需要特别记录的笔记。</p>
<h2 id="references"> References</h2>
<p>(optional) 列出相关性高的文献，以便之后可以继续track下去。</p>
<p><img src="https://pic1.zhimg.com/v2-656b65c906c28f9f6ea6fa9ed7521933_r.jpg?source=3af55fa1" alt="preview" loading="lazy"></p>
]]></content:encoded>
      <enclosure url="https://pic1.zhimg.com/v2-656b65c906c28f9f6ea6fa9ed7521933_r.jpg?source=3af55fa1" type="image/"/>
    </item>
    <item>
      <title>Slide page</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/slides/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/slides/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">Slide page</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[
<i>Not supported content</i>]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/logo.svg" type="image/svg+xml"/>
    </item>
    <item>
      <title>File -&amp;gt; Setting -&amp;gt; Editor -&amp;gt; General</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/software/idea/idea%E8%AE%BE%E7%BD%AE/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/software/idea/idea%E8%AE%BE%E7%BD%AE/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">File -&gt; Setting -&gt; Editor -&gt; General</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="file-setting-editor-general"> File -&gt; Setting -&gt; Editor -&gt; General</h2>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/software/idea/idea鼠标控制放大缩小.png" alt="" loading="lazy"></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/software/idea/idea鼠标控制放大缩小.png" type="image/png"/>
    </item>
    <item>
      <title>参考文献</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/software/maven/%E5%AE%89%E8%A3%85/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/software/maven/%E5%AE%89%E8%A3%85/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">参考文献</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h3 id="参考文献"> 参考文献</h3>
<p><a href="https://blog.csdn.net/qq_41895190/article/details/89741123" target="_blank" rel="noopener noreferrer">(44条消息) win10下 Maven的安装与配置(配置本地仓库路径)_qq_41895190的博客-CSDN博客_maven配置本地仓库</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>readme</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/school/junior-high-school/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/school/junior-high-school/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">readme</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="readme"> readme</h1>
<p>Hello Junior-High-School!</p>
]]></content:encoded>
    </item>
    <item>
      <title>maven下载不到源码：Cannot download sources Sources not found for:</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/software/maven/%E9%97%AE%E9%A2%98/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/software/maven/%E9%97%AE%E9%A2%98/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">maven下载不到源码：Cannot download sources Sources not found for:</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="maven下载不到源码-cannot-download-sources-sources-not-found-for"> maven下载不到源码：Cannot download sources Sources not found for:</h1>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://blog.csdn.net/maoyuanming0806/article/details/120079191" target="_blank" rel="noopener noreferrer">(63条消息) maven下载不到源码：Cannot download sources Sources not found for:_小明同学YYDS的博客-CSDN博客</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>剑指offer</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/CodingInterview/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/CodingInterview/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">剑指offer</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="剑指offer"> 剑指offer</h1>
<ul>
<li><a href="./二维数组中的查找.html">二维数组中的查找</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>readme in school</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/school/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/school/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">readme in school</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="readme-in-school"> readme in school</h1>
]]></content:encoded>
    </item>
    <item>
      <title>二维数组中的查找</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/CodingInterview/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/CodingInterview/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">二维数组中的查找</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="二维数组中的查找"> <a href="https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&amp;&amp;tqId=11154&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener noreferrer">二维数组中的查找</a></h1>
<h2 id="题目描述"> 题目描述</h2>
<p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<h2 id="示例1"> 示例1</h2>
<blockquote>
<p>输入</p>
<div><pre><code>7,[[1,2,8,9],[2,4,9,12],[4,7,10,13],[6,8,11,15]]
</code></pre>
<div><span>1</span><br></div></div><p>返回值</p>
<div><pre><code>true
</code></pre>
<div><span>1</span><br></div></div></blockquote>
<h2 id="分析"> 分析</h2>
<h3 id="方案一-二分"> 方案一：二分</h3>
<p>数组每一行均为有序数组，满足使用二分查找的前提条件</p>
<p>依次对数组每一行进行二分查找，若找到则返回true，遍历完所有行均未找到则返回false</p>
<h3 id="代码"> 代码</h3>
<div><pre><code><span>/**
复杂度分析
1.时间复杂度:O(nlogn)
2.空间复杂度:O(1)
**/</span>
<span>bool</span> <span>Find</span><span>(</span><span>int</span> target<span>,</span> vector<span>&lt;</span>vector<span>&lt;</span><span>int</span><span>>></span> array<span>)</span>
<span>{</span>
    <span>int</span> rows <span>=</span> array<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span><span>//rows:数组行数</span>
    <span>// 依次对数组每一行进行二分查找</span>
    <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> rows<span>;</span> i<span>++</span><span>)</span><span>{</span>
        <span>// 若待查找元素在第i行找到，则提前终止查找，返回true; 否则继续查找下一行</span>
        <span>if</span><span>(</span><span>binary_search</span><span>(</span>array<span>[</span>i<span>]</span><span>.</span><span>begin</span><span>(</span><span>)</span><span>,</span> array<span>[</span>i<span>]</span><span>.</span><span>end</span><span>(</span><span>)</span><span>,</span> target<span>)</span><span>)</span><span>{</span>
            <span>return</span> <span>true</span><span>;</span>
        <span>}</span>
    <span>}</span>
    <span>// 若待查找元素在所有行中都未找到，则返回false</span>
    <span>return</span> <span>false</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id="方案二-利用数组性质"> 方案二：利用数组性质</h3>
<p>每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序</p>
<p>从矩阵的左下角看，上方的数字都比其小，右方的数字都比其大</p>
<p>设当前数字为 cur，目标数字为 target</p>
<ul>
<li>
<p>当 target &lt; cur 时，行数减1，cur 更新为其上面一行的数字</p>
</li>
<li>
<p>当 target &gt; cur 时，列数加1，cur 更新为其右侧一列的数字</p>
</li>
<li>
<p>当 cur == target 时则返回 true</p>
</li>
<li>
<p>否则当行数或列数超过矩阵边界时返回 false</p>
</li>
</ul>
<h3 id="代码-2"> 代码</h3>
<div><pre><code><span>/**
复杂度分析
1.时间复杂度:O(m+n)
2.空间复杂度:O(1)
**/</span>
<span>bool</span> <span>Find</span><span>(</span><span>int</span> target<span>,</span> vector<span>&lt;</span>vector<span>&lt;</span><span>int</span><span>>></span> array<span>)</span>
<span>{</span>
    <span>int</span> rows <span>=</span> array<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span><span>//rows:数组行数</span>
    <span>int</span> cols <span>=</span> array<span>[</span><span>0</span><span>]</span><span>.</span><span>size</span><span>(</span><span>)</span><span>;</span><span>//cols:数组列数</span>
    <span>int</span> i <span>=</span> rows <span>-</span> <span>1</span><span>,</span> j <span>=</span> <span>0</span><span>;</span><span>//i:行坐标,j:列坐标,初始位置为左下角元素</span>
    <span>while</span> <span>(</span>i <span>>=</span> <span>0</span> <span>&amp;&amp;</span> j <span>&lt;</span> cols<span>)</span>
    <span>{</span>
        <span>int</span> cur <span>=</span> array<span>[</span>i<span>]</span><span>[</span>j<span>]</span><span>;</span>
        <span>// 当 target &lt; cur 时，行数减1，cur 更新为其上面一行的数字</span>
        <span>if</span> <span>(</span>target <span>&lt;</span> cur<span>)</span>
        <span>{</span>
            i<span>--</span><span>;</span>
        <span>}</span>
        <span>// 当 target > cur 时，列数加1，cur 更新为其右侧一列的数字</span>
        <span>else</span> <span>if</span> <span>(</span>target <span>></span> cur<span>)</span>
        <span>{</span>
            j<span>++</span><span>;</span>
        <span>}</span>
        <span>// 当 cur == target 时返回 true</span>
        <span>else</span>
        <span>{</span>
            <span>return</span> <span>true</span><span>;</span>
        <span>}</span>
    <span>}</span>
    <span>// 当行数或列数超过矩阵边界时返回 false</span>
    <span>return</span> <span>false</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>1.md</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/Cracking-the-Coding-Interview/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/Cracking-the-Coding-Interview/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">1.md</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_1-md"> 1.md</h1>
<p>Cracking-the-Coding-Interview!</p>
]]></content:encoded>
    </item>
    <item>
      <title>1.两数之和</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">1.两数之和</source>
      <pubDate>Fri, 25 Feb 2022 14:07:08 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_1-两数之和"> <a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener noreferrer">1.两数之和</a></h1>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/1.png" alt="" loading="lazy"></p>
<h2 id="方法一-哈希表"> 方法一：哈希表</h2>
<div><p>Tips</p>
<p>创建一个哈希表，对于每一个 <code>x</code>，我们首先查询哈希表中是否存在 <code>target - x</code>，然后将 <code>x</code> 插入到哈希表中，即可保证不会让 <code>x</code> 和自己匹配。</p>
</div>
<h2 id="参考代码"> 参考代码</h2>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    vector<span>&lt;</span><span>int</span><span>></span> <span>twoSum</span><span>(</span>vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> nums<span>,</span> <span>int</span> target<span>)</span> <span>{</span>
        <span>// 使用map记录所有出现过的数字最后一次出现的下标</span>
        unordered_map<span>&lt;</span><span>int</span><span>,</span> <span>int</span><span>></span> dic<span>;</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> nums<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span> i<span>++</span><span>)</span><span>{</span>
            dic<span>[</span>nums<span>[</span>i<span>]</span><span>]</span> <span>=</span> i<span>;</span>
        <span>}</span>
        <span>// 然后查找target - num的元素是否在map中出现过</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> nums<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span> i<span>++</span><span>)</span><span>{</span>
            <span>int</span> num2 <span>=</span> target <span>-</span> nums<span>[</span>i<span>]</span><span>;</span>
            <span>// 如果出现过，则返回两个元素的数组下标</span>
            <span>if</span><span>(</span>dic<span>[</span>num2<span>]</span> <span>&amp;&amp;</span> dic<span>[</span>num2<span>]</span> <span>!=</span> i<span>)</span><span>{</span>
                <span>return</span> <span>{</span>i<span>,</span> dic<span>[</span>num2<span>]</span><span>}</span><span>;</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> <span>{</span><span>}</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div></CodeGroupItem>
<CodeGroupItem title="c++" active>
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    vector<span>&lt;</span><span>int</span><span>></span> <span>twoSum</span><span>(</span>vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> nums<span>,</span> <span>int</span> target<span>)</span> <span>{</span>
        <span>int</span> n <span>=</span> nums<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        <span>// 使用map记录所有出现过的数字出现的下标</span>
        unordered_map<span>&lt;</span><span>int</span><span>,</span> <span>int</span><span>></span> dic<span>;</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n<span>;</span> i<span>++</span><span>)</span><span>{</span>
            <span>int</span> num <span>=</span> target <span>-</span> nums<span>[</span>i<span>]</span><span>;</span>
            <span>// 查询哈希表中是否存在 target - nums[i]，若存在直接返回下标</span>
            <span>if</span><span>(</span>dic<span>.</span><span>find</span><span>(</span>num<span>)</span> <span>!=</span> dic<span>.</span><span>end</span><span>(</span><span>)</span><span>)</span><span>{</span>
                <span>return</span> <span>{</span>i<span>,</span> dic<span>[</span>num<span>]</span><span>}</span><span>;</span>
            <span>}</span>
            <span>// 如果不存在则将当前元素和其下标插入哈希表</span>
            dic<span>[</span>nums<span>[</span>i<span>]</span><span>]</span> <span>=</span> i<span>;</span>
        <span>}</span>
        <span>return</span> <span>{</span><span>}</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div></CodeGroupItem>
</CodeGroup>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/1.png" type="image/png"/>
    </item>
    <item>
      <title>121.买卖股票的最佳时机</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/121.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/121.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">121.买卖股票的最佳时机</source>
      <pubDate>Sun, 27 Feb 2022 07:01:10 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_121-买卖股票的最佳时机"> 121.买卖股票的最佳时机</h1>
<p>https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/121.png" alt="" loading="lazy"></p>
<h2 id="方法一-动态规划"> 方法一：动态规划</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p>考虑每次如何获取最大收益？第i天的最大收益只需要知道前i天的最低点就可以算出来了。而第i天以前（包括第i天）的最低点和i-1天的最低点有关。则设<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span></span></span></span>代表第i天以前（包括第i天）的最低点，状态转移方程为：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>min</span><span>(</span><span>d</span><span>p</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>,</span><span style="margin-right:0.1667em;"></span><span>p</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>ce</span><span>[</span><span>i</span><span>])</span></span></span></span></span></p>
<p>在第<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6595em;"></span><span>i</span></span></span></span>天能卖出股票得到的利润为</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>p</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>ces</span><span>[</span><span>i</span><span>]</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span></span></span></span></span></p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> <span>maxProfit</span><span>(</span>vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> prices<span>)</span> <span>{</span>
        <span>int</span> n <span>=</span> prices<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        <span>int</span> maxprofit <span>=</span> <span>0</span><span>;</span>

        vector<span>&lt;</span><span>int</span><span>></span> <span>dp</span><span>(</span>n<span>)</span><span>;</span>
        dp<span>[</span><span>0</span><span>]</span> <span>=</span> prices<span>[</span><span>0</span><span>]</span><span>;</span>

        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> n<span>;</span> i<span>++</span><span>)</span><span>{</span>
            dp<span>[</span>i<span>]</span> <span>=</span> <span>(</span>dp<span>[</span>i <span>-</span> <span>1</span><span>]</span> <span>&lt;</span> prices<span>[</span>i<span>]</span><span>)</span> <span>?</span> dp<span>[</span>i <span>-</span> <span>1</span><span>]</span> <span>:</span> prices<span>[</span>i<span>]</span><span>;</span>
            maxprofit <span>=</span> <span>(</span>prices<span>[</span>i<span>]</span> <span>-</span> dp<span>[</span>i<span>]</span><span>)</span> <span>></span> maxprofit <span>?</span> prices<span>[</span>i<span>]</span> <span>-</span> dp<span>[</span>i<span>]</span> <span>:</span> maxprofit<span>;</span>
        <span>}</span>
        
        <span>return</span> maxprofit<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法一-空间优化"> 方法一：空间优化</h2>
<h3 id="思路分析-2"> 思路分析</h3>
<div><p>Tips</p>
<p>方法一的每次状态转移只使用到了<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span></span></span></span>这一个空间，因此可以使用单个变量<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.854em;vertical-align:-0.1944em;"></span><span>min</span><span>p</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>ce</span></span></span></span>来存储截止到第<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6595em;"></span><span>i</span></span></span></span>天（不包括第<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6595em;"></span><span>i</span></span></span></span>天）的价格最低点。</p>
</div>
<h3 id="参考代码-2"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> <span>maxProfit</span><span>(</span>vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> prices<span>)</span> <span>{</span>
        <span>int</span> inf <span>=</span> <span>1e9</span><span>;</span>
        <span>int</span> minprice <span>=</span> inf<span>,</span> maxprofit <span>=</span> <span>0</span><span>;</span>
        <span>for</span><span>(</span><span>int</span> price <span>:</span> prices<span>)</span><span>{</span>
            maxprofit <span>=</span> <span>max</span><span>(</span>maxprofit<span>,</span> price <span>-</span> minprice<span>)</span><span>;</span>
            minprice <span>=</span> <span>min</span><span>(</span>minprice<span>,</span> price<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> maxprofit<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div></CodeGroupItem>
</CodeGroup>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/121.png" type="image/png"/>
    </item>
    <item>
      <title>139.单词拆分</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/139.%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/139.%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">139.单词拆分</source>
      <pubDate>Mon, 28 Feb 2022 03:17:01 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_139-单词拆分"> 139.单词拆分</h1>
<p>https://leetcode-cn.com/problems/word-break/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/139.png" alt="" loading="lazy"></p>
<h2 id="方法一-字典树-dfs-记忆化"> 方法一：字典树+dfs+记忆化</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p>设字符串s的长度为n，单词列表wordDict的长度为m，单词列表中每个单词的最大长度为len</p>
<p>首先暴力的想法是枚举字符串s的从起点startPos开始截取的所有可能子串，将子串和wordDict中的单词一一匹配，成功则继续递归搜索，直到搜索到s的末尾时结束。但是这样的时间复杂度最坏会达到<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.0641em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>∗</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.4653em;"></span><span>m</span><span style="margin-right:0.2222em;"></span><span>∗</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.01968em;">l</span><span>e</span><span>n</span><span>)</span></span></span></span>，会产生TLE超时错误。</p>
<p>根据提示中s和WordDict[i]仅有小写英文字母组成，我们可以想到使用字典树<code>trie</code>来进行单词的快速查找，这样可以将时间复杂度降到<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.0641em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>∗</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.01968em;">l</span><span>e</span><span>n</span><span>)</span></span></span></span>，但是当面对类似下面的</p>
<div><pre><code>&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab&quot;
[&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;,&quot;aaaaa&quot;,&quot;aaaaaa&quot;,&quot;aaaaaaa&quot;,&quot;aaaaaaaa&quot;,&quot;aaaaaaaaa&quot;,&quot;aaaaaaaaaa&quot;]
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>测试用例时仍然会产生超时错误，这是因为在搜索过程中如果匹配失败返回之后会产生很多的重复判断，此时需要使用记忆化数组<code>failMemo</code>来记录dfs没有匹配成功时对应的s中的index</p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Trie</span><span>{</span>
<span>public</span><span>:</span>
    Trie<span>*</span> next<span>[</span><span>26</span><span>]</span><span>;</span>
    <span>bool</span> isEnd<span>;</span>
    <span>Trie</span><span>(</span><span>)</span><span>{</span>
        <span>memset</span><span>(</span>next<span>,</span> <span>0</span><span>,</span> <span>sizeof</span><span>(</span>next<span>)</span><span>)</span><span>;</span>
        isEnd <span>=</span> <span>false</span><span>;</span>
    <span>}</span>
    <span>void</span> <span>insert</span><span>(</span>string word<span>)</span><span>{</span>
        Trie<span>*</span> node <span>=</span> <span>this</span><span>;</span>
        <span>for</span><span>(</span><span>char</span> ch <span>:</span> word<span>)</span><span>{</span>
            <span>if</span><span>(</span>node<span>-></span>next<span>[</span>ch <span>-</span> <span>'a'</span><span>]</span> <span>==</span> <span>NULL</span><span>)</span><span>{</span>
                node<span>-></span>next<span>[</span>ch <span>-</span> <span>'a'</span><span>]</span> <span>=</span> <span>new</span> <span>Trie</span><span>(</span><span>)</span><span>;</span>
            <span>}</span>
            node <span>=</span> node<span>-></span>next<span>[</span>ch <span>-</span> <span>'a'</span><span>]</span><span>;</span>
        <span>}</span>
        node<span>-></span>isEnd <span>=</span> <span>true</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
<span>class</span> <span>Solution</span> <span>{</span>
    Trie<span>*</span> root<span>;</span>
    <span>int</span> failMemo<span>[</span><span>301</span><span>]</span><span>;</span>  <span>//记录dfs中失败时对应的s中的index</span>
<span>public</span><span>:</span>
    <span>bool</span> <span>dfs</span><span>(</span>string <span>&amp;</span>s<span>,</span> <span>int</span> startPos<span>)</span><span>{</span>
        <span>if</span><span>(</span>failMemo<span>[</span>startPos<span>]</span> <span>==</span> <span>1</span><span>)</span><span>{</span>
            <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>startPos <span>==</span> s<span>.</span><span>size</span><span>(</span><span>)</span><span>)</span><span>{</span>
            <span>return</span> <span>true</span><span>;</span>
        <span>}</span>
        Trie<span>*</span> node <span>=</span> root<span>;</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> startPos<span>;</span> i <span>&lt;</span> s<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span> i<span>++</span><span>)</span><span>{</span>
            <span>char</span> ch <span>=</span> s<span>[</span>i<span>]</span><span>;</span>
            <span>if</span><span>(</span>node<span>-></span>next<span>[</span>ch <span>-</span> <span>'a'</span><span>]</span> <span>!=</span> <span>NULL</span><span>)</span><span>{</span>
                node <span>=</span> node<span>-></span>next<span>[</span>ch <span>-</span> <span>'a'</span><span>]</span><span>;</span>
                <span>if</span><span>(</span>node<span>-></span>isEnd <span>==</span> <span>true</span> <span>&amp;&amp;</span> <span>dfs</span><span>(</span>s<span>,</span> i <span>+</span> <span>1</span><span>)</span><span>)</span><span>{</span>
                    <span>return</span> <span>true</span><span>;</span>
                <span>}</span>
            <span>}</span><span>else</span><span>{</span>
                <span>break</span><span>;</span>
            <span>}</span>
        <span>}</span>
        failMemo<span>[</span>startPos<span>]</span> <span>=</span> <span>1</span><span>;</span>
        <span>return</span> <span>false</span><span>;</span>
    <span>}</span>
    <span>bool</span> <span>wordBreak</span><span>(</span>string s<span>,</span> vector<span>&lt;</span>string<span>></span><span>&amp;</span> wordDict<span>)</span> <span>{</span>
        root <span>=</span> <span>new</span> <span>Trie</span><span>(</span><span>)</span><span>;</span>
        <span>// 建立字典树</span>
        <span>for</span><span>(</span><span>auto</span> <span>&amp;&amp;</span> word <span>:</span> wordDict<span>)</span><span>{</span>
            root<span>-></span><span>insert</span><span>(</span>word<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> <span>dfs</span><span>(</span>s<span>,</span> <span>0</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-动态规划"> 方法二：动态规划</h2>
<h3 id="思路分析-2"> 思路分析</h3>
<div><p>Tips</p>
<p>状态定义:</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span></span></span></span>表示字符串s前i个字符组成的字符串<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>s</span><span>[</span><span>0...</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span></span></span></span>是否能被空格拆分成若干个字典中出现的单词</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>c</span><span>h</span><span>ec</span><span style="margin-right:0.03148em;">k</span><span>(</span><span>s</span><span>)</span></span></span></span>表示判断子串s是否出现在字典中</p>
<p>状态转移方程:</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span>&amp;&amp;</span><span>c</span><span>h</span><span>ec</span><span style="margin-right:0.03148em;">k</span><span>(</span><span>s</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>...</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>])</span></span></span></span></span></p>
<p>边界条件：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>0</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6151em;"></span><span>t</span><span style="margin-right:0.02778em;">r</span><span>u</span><span>e</span></span></span></span></span></p>
</div>
<h3 id="参考代码-2"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>/*

    */</span>
    <span>bool</span> <span>wordBreak</span><span>(</span>string s<span>,</span> vector<span>&lt;</span>string<span>></span><span>&amp;</span> wordDict<span>)</span> <span>{</span>
        <span>auto</span> wordDictSet <span>=</span> <span><span>unordered_set</span><span><span>&lt;</span>string<span>></span></span></span><span>(</span><span>)</span><span>;</span>
        <span>for</span><span>(</span><span>auto</span> word <span>:</span> wordDict<span>)</span><span>{</span>
            wordDictSet<span>.</span><span>insert</span><span>(</span>word<span>)</span><span>;</span>
        <span>}</span>

        <span>auto</span> dp <span>=</span> <span><span>vector</span><span><span>&lt;</span><span>bool</span><span>></span></span></span><span>(</span>s<span>.</span><span>size</span><span>(</span><span>)</span> <span>+</span> <span>1</span><span>)</span><span>;</span>
        dp<span>[</span><span>0</span><span>]</span> <span>=</span> <span>true</span><span>;</span>   <span>//表示空串且合法</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> s<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span> i<span>++</span><span>)</span><span>{</span>
            <span>for</span><span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> i<span>;</span> j<span>++</span><span>)</span><span>{</span>
                <span>if</span><span>(</span>dp<span>[</span>j<span>]</span> <span>&amp;&amp;</span> wordDictSet<span>.</span><span>count</span><span>(</span>s<span>.</span><span>substr</span><span>(</span>j<span>,</span> i <span>-</span> j<span>)</span><span>)</span><span>)</span><span>{</span>
                    dp<span>[</span>i<span>]</span> <span>=</span> <span>true</span><span>;</span>
                    <span>break</span><span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>

        <span>return</span> dp<span>[</span>s<span>.</span><span>size</span><span>(</span><span>)</span><span>]</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></CodeGroupItem>
</CodeGroup>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/139.png" type="image/png"/>
    </item>
    <item>
      <title>236.二叉树的最近公共祖先</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">236.二叉树的最近公共祖先</source>
      <pubDate>Thu, 31 Mar 2022 14:28:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_236-二叉树的最近公共祖先"> 236.二叉树的最近公共祖先</h1>
<p>https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/236.png" alt="" loading="lazy"></p>
<h2 id="方法一-递归"> 方法一：递归</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p>定义子问题：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8889em;vertical-align:-0.1944em;"></span><span style="margin-right:0.10764em;">f</span></span></span></span> 表示左右子树分别包含<code>p,q</code></p>
<p>定义 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8889em;vertical-align:-0.1944em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>x</span></span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>x</span></span></span></span> 节点的子树中是否包含 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.1944em;"></span><span>p</span></span></span></span> 节点或 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.1944em;"></span><span style="margin-right:0.03588em;">q</span></span></span></span> 节点，如果包含为 <code>true</code>，否则为<code>false</code>。</p>
<p>符合条件的最近公共祖先 <code>x</code> 一定满足条件：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.01968em;">l</span><span>so</span><span>n</span></span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>&amp;&amp;</span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>rso</span><span>n</span></span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>)</span><span>∣∣</span><span>(</span><span>x</span><span style="margin-right:0.2778em;"></span><span>==</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>p</span><span>∣∣</span><span>x</span><span style="margin-right:0.2778em;"></span><span>==</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">q</span><span>)</span><span>&amp;&amp;</span><span>(</span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.01968em;">l</span><span>so</span><span>n</span></span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>∣∣</span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>rso</span><span>n</span></span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>)</span></span></span></span></span></p>
<p>其中 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6944em;"></span><span style="margin-right:0.01968em;">l</span><span>so</span><span>n</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>rso</span><span>n</span></span></span></span> 分别代表 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>x</span></span></span></span> 节点的左孩子和右孩子。</p>
<ul>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.01968em;">l</span><span>so</span><span>n</span></span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>&amp;&amp;</span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>rso</span><span>n</span></span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>)</span></span></span></span> 说明左子树和右子树均包含 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.1944em;"></span><span>p</span></span></span></span> 节点或 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.1944em;"></span><span style="margin-right:0.03588em;">q</span></span></span></span> 节点</li>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>x</span><span style="margin-right:0.2778em;"></span><span>==</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>p</span><span>∣∣</span><span>x</span><span style="margin-right:0.2778em;"></span><span>==</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">q</span><span>)</span><span>&amp;&amp;</span><span>(</span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.01968em;">l</span><span>so</span><span>n</span></span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>∣∣</span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>rso</span><span>n</span></span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>)</span></span></span></span>说明 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>x</span></span></span></span> 恰好是 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.1944em;"></span><span>p</span></span></span></span> 节点或 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.1944em;"></span><span style="margin-right:0.03588em;">q</span></span></span></span> 节点且它的左子树或右子树有一个包含了另一个节点的情况</li>
</ul>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    TreeNode<span>*</span> ans<span>;</span>
    <span>bool</span> <span>dfs</span><span>(</span>TreeNode<span>*</span> root<span>,</span> TreeNode<span>*</span> p<span>,</span> TreeNode<span>*</span> q<span>)</span><span>{</span>
        <span>if</span><span>(</span>root <span>==</span> <span>nullptr</span><span>)</span><span>{</span>
            <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        <span>bool</span> flson <span>=</span> <span>dfs</span><span>(</span>root<span>-></span>left<span>,</span> p<span>,</span> q<span>)</span><span>;</span>
        <span>bool</span> frson <span>=</span> <span>dfs</span><span>(</span>root<span>-></span>right<span>,</span> p<span>,</span> q<span>)</span><span>;</span>
        <span>if</span><span>(</span><span>(</span>flson <span>&amp;&amp;</span> frson<span>)</span> <span>||</span> <span>(</span>root<span>-></span>val <span>==</span> p<span>-></span>val <span>||</span> root<span>-></span>val <span>==</span> q<span>-></span>val<span>)</span> <span>&amp;&amp;</span> <span>(</span>flson <span>||</span> frson<span>)</span><span>)</span><span>{</span>
            ans <span>=</span> root<span>;</span>
        <span>}</span>
        <span>return</span> root<span>-></span>val <span>==</span> p<span>-></span>val <span>||</span> root<span>-></span>val <span>==</span> q<span>-></span>val <span>||</span> flson <span>||</span> frson<span>;</span>
    <span>}</span>
    TreeNode<span>*</span> <span>lowestCommonAncestor</span><span>(</span>TreeNode<span>*</span> root<span>,</span> TreeNode<span>*</span> p<span>,</span> TreeNode<span>*</span> q<span>)</span> <span>{</span>
        <span>if</span><span>(</span>root <span>==</span> <span>nullptr</span><span>)</span><span>{</span>
            <span>return</span> <span>nullptr</span><span>;</span>
        <span>}</span>
        <span>dfs</span><span>(</span>root<span>,</span> p<span>,</span> q<span>)</span><span>;</span>
        <span>return</span> ans<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/er-cha-shu-de-zui-jin-gong-gong-zu-xian-by-leetc-2/" target="_blank" rel="noopener noreferrer">二叉树的最近公共祖先 - 二叉树的最近公共祖先 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/236.png" type="image/png"/>
    </item>
    <item>
      <title>146.LRU缓存</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/146.LRU%E7%BC%93%E5%AD%98/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/146.LRU%E7%BC%93%E5%AD%98/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">146.LRU缓存</source>
      <pubDate>Mon, 14 Mar 2022 02:41:12 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_146-lru缓存"> 146.LRU缓存</h1>
<p>https://leetcode-cn.com/problems/lru-cache/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/146.png" alt="" loading="lazy"></p>
<h2 id="方法一-哈希表-双向链表-c-实现"> 方法一：哈希表+双向链表（C++实现）</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p>用一个哈希表和一个双向链表维护所有在缓存中的键值对。</p>
<p>双向链表按照被使用的顺序存储了这些键值对，靠近头部的键值对是最近使用的，而靠近尾部的键值对是最久未使用的。</p>
<p>哈希表即为普通的哈希映射（HashMap），通过缓存数据的键映射到其在双向链表中的位置。</p>
<Mermaid id="mermaid-382ee169" data-code="graph%0A%09subgraph%20get%E5%87%BD%E6%95%B0%0A%09%09direction%20TB%0A%20%20%20%20%20%20%20%20b1%5B%E5%88%A4%E6%96%ADkey%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%5D%0A%20%20%20%20%20%20%20%20b2%5B%E5%A6%82%E6%9E%9Ckey%E4%B8%8D%E5%AD%98%E5%9C%A8%5D%0A%20%20%20%20%20%20%20%20b3%5B%E8%BF%94%E5%9B%9E-1%5D%0A%20%20%20%20%20%20%20%09b4%5B%E5%A6%82%E6%9E%9Ckey%E5%AD%98%E5%9C%A8%2C%E9%80%9A%E8%BF%87%E5%93%88%E5%B8%8C%E8%A1%A8%E5%AE%9A%E4%BD%8D%E5%88%B0%E8%AF%A5%E8%8A%82%E7%82%B9%E5%9C%A8%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%3Cbr%3E%E5%B0%86%E5%85%B6%E7%A7%BB%E5%8A%A8%E5%88%B0%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E9%83%A8%5D%0A%20%20%20%20%20%20%20%09b5%5B%E8%BF%94%E5%9B%9E%E8%AF%A5%E8%8A%82%E7%82%B9%E7%9A%84%E5%80%BC%5D%0A%20%20%20%20%20%20%20%20b1--%3Eb2--%3Eb3%0A%20%20%20%20%20%20%20%20b1--%3Eb4--%3Eb5%0A%20%20%20%20end%0A"></Mermaid><Mermaid id="mermaid-382ee16a" data-code="flowchart%0A%09subgraph%20put%E5%87%BD%E6%95%B0%0A%09%09direction%20TB%0A%20%20%20%20%20%20%20%20b1%5B%E5%88%A4%E6%96%ADkey%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%5D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20b2%5B%E5%A6%82%E6%9E%9Ckey%E4%B8%8D%E5%AD%98%E5%9C%A8%5D%0A%20%20%20%20%20%20%20%20b3%5B%E4%BD%BF%E7%94%A8key%E5%92%8Cvalue%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E8%8A%82%E7%82%B9%3Cbr%3E%E5%9C%A8%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E9%83%A8%E6%B7%BB%E5%8A%A0%E8%AF%A5%E8%8A%82%E7%82%B9%3Cbr%3E%E5%B0%86key%E5%92%8C%E8%AF%A5%E8%8A%82%E7%82%B9%E6%B7%BB%E5%8A%A0%E8%BF%9B%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%AD%5D%0A%20%20%20%20%20%20%20%20b4%5B%E5%88%A4%E6%96%AD%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E6%98%AF%E5%90%A6%E8%B6%85%E5%87%BA%E5%AE%B9%E9%87%8F%5D%0A%20%20%20%20%20%20%20%20b5%5B%E5%A6%82%E6%9E%9C%E8%B6%85%E5%87%BA%E5%AE%B9%E9%87%8F%2C%E5%88%A0%E9%99%A4%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E9%83%A8%E8%8A%82%E7%82%B9%3Cbr%3E%E5%88%A0%E9%99%A4%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%AD%E5%AF%B9%E5%BA%94%E7%9A%84%E9%A1%B9%5D%0A%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%09b7%5B%E5%A6%82%E6%9E%9Ckey%E5%AD%98%E5%9C%A8%5D%0A%20%20%20%20%20%20%20%20b8%5B%E9%80%9A%E8%BF%87%E5%93%88%E5%B8%8C%E8%A1%A8%E5%AE%9A%E4%BD%8D%E5%88%B0%E8%AF%A5%E8%8A%82%E7%82%B9%E5%9C%A8%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%3Cbr%3E%E5%B0%86%E8%8A%82%E7%82%B9%E7%9A%84%E5%80%BC%E6%9B%B4%E6%96%B0%E4%B8%BAvalue%3Cbr%3E%E5%B0%86%E5%85%B6%E7%A7%BB%E5%8A%A8%E5%88%B0%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E9%83%A8%2C%E6%9C%80%E5%90%8E%E8%BF%94%E5%9B%9E%E8%AF%A5%E8%8A%82%E7%82%B9%E7%9A%84%E5%80%BC%5D%0A%20%20%20%20%20%20%20%20b1--%3Eb2--%3Eb3--%3Eb4--%3Eb5%0A%20%20%20%20%20%20%20%20b1--%3Eb7--%3Eb8%0A%20%20%20%20end%0A"></Mermaid></div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>struct</span> <span>DLinkedNode</span> <span>{</span>
    <span>int</span> key<span>,</span> value<span>;</span>
    DLinkedNode<span>*</span> prev<span>;</span>
    DLinkedNode<span>*</span> next<span>;</span>
    <span>DLinkedNode</span><span>(</span><span>)</span><span>:</span> <span>key</span><span>(</span><span>0</span><span>)</span><span>,</span> <span>value</span><span>(</span><span>0</span><span>)</span><span>,</span> <span>prev</span><span>(</span><span>nullptr</span><span>)</span><span>,</span> <span>next</span><span>(</span><span>nullptr</span><span>)</span> <span>{</span><span>}</span>
    <span>DLinkedNode</span><span>(</span><span>int</span> _key<span>,</span> <span>int</span> _value<span>)</span> <span>:</span> <span>key</span><span>(</span>_key<span>)</span><span>,</span> <span>value</span><span>(</span>_value<span>)</span><span>,</span> <span>prev</span><span>(</span><span>nullptr</span><span>)</span><span>,</span> <span>next</span><span>(</span><span>nullptr</span><span>)</span> <span>{</span><span>}</span>
<span>}</span><span>;</span>

<span>class</span> <span>LRUCache</span> <span>{</span>
<span>private</span><span>:</span>
    unordered_map<span>&lt;</span><span>int</span><span>,</span> DLinkedNode<span>*</span><span>></span> cache<span>;</span>
    DLinkedNode<span>*</span> head<span>;</span>
    DLinkedNode<span>*</span> tail<span>;</span>
    <span>int</span> size<span>;</span>
    <span>int</span> capacity<span>;</span>

<span>public</span><span>:</span>
    <span>LRUCache</span><span>(</span><span>int</span> _capacity<span>)</span> <span>:</span> <span>capacity</span><span>(</span>_capacity<span>)</span><span>,</span> <span>size</span><span>(</span><span>0</span><span>)</span> <span>{</span>
        <span>// 使用伪头部和伪尾部节点</span>
        head <span>=</span> <span>new</span> <span>DLinkedNode</span><span>(</span><span>)</span><span>;</span>
        tail <span>=</span> <span>new</span> <span>DLinkedNode</span><span>(</span><span>)</span><span>;</span>
        head<span>-></span>next <span>=</span> tail<span>;</span>
        tail<span>-></span>prev <span>=</span> head<span>;</span>    
    <span>}</span>
    
    <span>int</span> <span>get</span><span>(</span><span>int</span> key<span>)</span> <span>{</span>
        <span>if</span><span>(</span><span>!</span>cache<span>.</span><span>count</span><span>(</span>key<span>)</span><span>)</span><span>{</span>
            <span>return</span> <span>-</span><span>1</span><span>;</span>
        <span>}</span>
        <span>// 如果key存在，先通过哈希表定位，再移到头部</span>
        DLinkedNode<span>*</span> node <span>=</span> cache<span>[</span>key<span>]</span><span>;</span>
        <span>moveToHead</span><span>(</span>node<span>)</span><span>;</span>
        <span>return</span> node<span>-></span>value<span>;</span>
    <span>}</span>
    
    <span>void</span> <span>put</span><span>(</span><span>int</span> key<span>,</span> <span>int</span> value<span>)</span> <span>{</span>
        <span>if</span><span>(</span><span>!</span>cache<span>.</span><span>count</span><span>(</span>key<span>)</span><span>)</span><span>{</span>
            <span>// 如果key不存在，创建一个新的节点</span>
            DLinkedNode<span>*</span> node <span>=</span> <span>new</span> <span>DLinkedNode</span><span>(</span>key<span>,</span> value<span>)</span><span>;</span>
            <span>// 添加进哈希表</span>
            cache<span>[</span>key<span>]</span> <span>=</span> node<span>;</span>
            <span>// 添加至双向链表的头部</span>
            <span>addToHead</span><span>(</span>node<span>)</span><span>;</span>
            <span>++</span>size<span>;</span>
            <span>if</span><span>(</span>size <span>></span> capacity<span>)</span><span>{</span>
                <span>// 如果超过容量，删除双向链表的尾部节点</span>
                DLinkedNode<span>*</span> removed <span>=</span> <span>removeTail</span><span>(</span><span>)</span><span>;</span>
                <span>// 删除哈希表中对应的项</span>
                cache<span>.</span><span>erase</span><span>(</span>removed<span>-></span>key<span>)</span><span>;</span>
                <span>// 防止内存泄露</span>
                <span>delete</span> removed<span>;</span>
                <span>--</span>size<span>;</span>
            <span>}</span>
        <span>}</span>
        <span>else</span><span>{</span>
            <span>// 如果key存在，先通过哈希表定位，再修改value，并移到头部</span>
            DLinkedNode<span>*</span> node <span>=</span> cache<span>[</span>key<span>]</span><span>;</span>
            node<span>-></span>value <span>=</span> value<span>;</span>
            <span>moveToHead</span><span>(</span>node<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
    <span>// 将节点添加到链表头部</span>
    <span>void</span> <span>addToHead</span><span>(</span>DLinkedNode<span>*</span> node<span>)</span><span>{</span>
        node<span>-></span>prev <span>=</span> head<span>;</span>
        node<span>-></span>next <span>=</span> head<span>-></span>next<span>;</span>
        head<span>-></span>next<span>-></span>prev <span>=</span> node<span>;</span>
        head<span>-></span>next <span>=</span> node<span>;</span>
    <span>}</span>
    <span>// 删除链表中的节点</span>
    <span>void</span> <span>removeNode</span><span>(</span>DLinkedNode<span>*</span> node<span>)</span><span>{</span>
        node<span>-></span>prev<span>-></span>next <span>=</span> node<span>-></span>next<span>;</span>
        node<span>-></span>next<span>-></span>prev <span>=</span> node<span>-></span>prev<span>;</span>
    <span>}</span>
    <span>// 将链表中的节点移动到头部</span>
    <span>void</span> <span>moveToHead</span><span>(</span>DLinkedNode<span>*</span> node<span>)</span><span>{</span>
        <span>removeNode</span><span>(</span>node<span>)</span><span>;</span>
        <span>addToHead</span><span>(</span>node<span>)</span><span>;</span>
    <span>}</span>
    <span>// 删除双向链表的尾部节点</span>
    DLinkedNode<span>*</span> <span>removeTail</span><span>(</span><span>)</span> <span>{</span>
        DLinkedNode<span>*</span> node <span>=</span> tail<span>-></span>prev<span>;</span>
        <span>removeNode</span><span>(</span>node<span>)</span><span>;</span>
        <span>return</span> node<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-哈希表-双向链表-java实现"> 方法二：哈希表+双向链表（Java实现）</h2>
<div><p>Tips</p>
</div>
<CodeGroup>
<CodeGroupItem title="java">
<div><pre><code><span>// 自定义节点类</span>
<span>class</span> <span>Node</span> <span>{</span>
    <span>public</span> <span>int</span> key<span>,</span> val<span>;</span>
    <span>// 双向指针：next表示下一个，prev表示前一个</span>
    <span>public</span> <span>Node</span> next<span>,</span> prev<span>;</span>
    <span>public</span> <span>Node</span><span>(</span><span>int</span> k<span>,</span> <span>int</span> v<span>)</span><span>{</span>
        <span>this</span><span>.</span>key <span>=</span> k<span>;</span>
        <span>this</span><span>.</span>val <span>=</span> v<span>;</span>
    <span>}</span>
<span>}</span>
<span>// 自定义双向链表</span>
<span>class</span> <span>DoubleList</span><span>{</span>
    <span>// 头尾虚节点</span>
    <span>private</span> <span>Node</span> head<span>,</span> tail<span>;</span>
    <span>// 链表元素数</span>
    <span>private</span> <span>int</span> size<span>;</span>

    <span>public</span> <span>DoubleList</span><span>(</span><span>)</span> <span>{</span>
        <span>// 初始化双向链表的数据</span>
        head <span>=</span> <span>new</span> <span>Node</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        tail <span>=</span> <span>new</span> <span>Node</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        head<span>.</span>next <span>=</span> tail<span>;</span>
        tail<span>.</span>prev <span>=</span> head<span>;</span>
        size <span>=</span> <span>0</span><span>;</span>
    <span>}</span>

    <span>// 在链表尾部添加节点x,时间O(1)</span>
    <span>public</span> <span>void</span> <span>addLast</span><span>(</span><span>Node</span> x<span>)</span> <span>{</span>
        <span>// 设置插入节点的prev和next指针</span>
        x<span>.</span>prev <span>=</span> tail<span>.</span>prev<span>;</span>
        x<span>.</span>next <span>=</span> tail<span>;</span>
        <span>// 设置插入节点前一个节点的next指针</span>
        tail<span>.</span>prev<span>.</span>next <span>=</span> x<span>;</span>
        <span>// 设置尾节点的prev指针</span>
        tail<span>.</span>prev <span>=</span> x<span>;</span>
        size<span>++</span><span>;</span>
    <span>}</span>
    
    <span>// 删除链表中的x节点(x一定存在)</span>
    <span>// 由于是双链表且给的是目标Node节点，时间O(1)</span>
    <span>public</span> <span>void</span> <span>remove</span><span>(</span><span>Node</span> x<span>)</span><span>{</span>
        x<span>.</span>prev<span>.</span>next <span>=</span> x<span>.</span>next<span>;</span>
        x<span>.</span>next<span>.</span>prev <span>=</span> x<span>.</span>prev<span>;</span>
        size<span>--</span><span>;</span>
    <span>}</span>

    <span>// 删除链表中第一个节点，并返回该节点，时间O(1)</span>
    <span>public</span> <span>Node</span> <span>removeFirst</span><span>(</span><span>)</span><span>{</span>
        <span>if</span><span>(</span>head<span>.</span>next <span>==</span> tail<span>)</span><span>{</span>
            <span>return</span> <span>null</span><span>;</span>
        <span>}</span>
        <span>Node</span> first <span>=</span> head<span>.</span>next<span>;</span>
        <span>remove</span><span>(</span>first<span>)</span><span>;</span>
        <span>return</span> first<span>;</span>
    <span>}</span>

    <span>// 返回链表长度，时间O(1)</span>
    <span>public</span> <span>int</span> <span>size</span><span>(</span><span>)</span><span>{</span>
        <span>return</span> size<span>;</span>
    <span>}</span>
<span>}</span>
<span>class</span> <span>LRUCache</span> <span>{</span>
    <span>int</span> cap<span>;</span>
    <span>LinkedHashMap</span><span><span>&lt;</span><span>Integer</span><span>,</span> <span>Integer</span><span>></span></span> cache <span>=</span> <span>new</span> <span>LinkedHashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
    <span>public</span> <span>LRUCache</span><span>(</span><span>int</span> capacity<span>)</span> <span>{</span> 
        <span>this</span><span>.</span>cap <span>=</span> capacity<span>;</span>
    <span>}</span>

    <span>public</span> <span>int</span> <span>get</span><span>(</span><span>int</span> key<span>)</span> <span>{</span>
        <span>if</span> <span>(</span><span>!</span>cache<span>.</span><span>containsKey</span><span>(</span>key<span>)</span><span>)</span> <span>{</span>
            <span>return</span> <span>-</span><span>1</span><span>;</span>
        <span>}</span>
        <span>// 将 key 变为最近使用</span>
        <span>makeRecently</span><span>(</span>key<span>)</span><span>;</span>
        <span>return</span> cache<span>.</span><span>get</span><span>(</span>key<span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>void</span> <span>put</span><span>(</span><span>int</span> key<span>,</span> <span>int</span> val<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>cache<span>.</span><span>containsKey</span><span>(</span>key<span>)</span><span>)</span> <span>{</span>
            <span>// 修改 key 的值</span>
            cache<span>.</span><span>put</span><span>(</span>key<span>,</span> val<span>)</span><span>;</span>
            <span>// 将 key 变为最近使用</span>
            <span>makeRecently</span><span>(</span>key<span>)</span><span>;</span>
            <span>return</span><span>;</span>
        <span>}</span>
        <span>if</span> <span>(</span>cache<span>.</span><span>size</span><span>(</span><span>)</span> <span>>=</span> <span>this</span><span>.</span>cap<span>)</span> <span>{</span>
            <span>// 链表头部就是最久未使用的 key</span>
            <span>// 删除最久未使用的元素</span>
            <span>int</span> oldestKey <span>=</span> cache<span>.</span><span>keySet</span><span>(</span><span>)</span><span>.</span><span>iterator</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>;</span>
            cache<span>.</span><span>remove</span><span>(</span>oldestKey<span>)</span><span>;</span>
        <span>}</span>
        <span>// 将新的 key 添加链表尾部</span>
        <span>// 添加为最近使用的元素</span>
        cache<span>.</span><span>put</span><span>(</span>key<span>,</span> val<span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>void</span> <span>makeRecently</span><span>(</span><span>int</span> key<span>)</span> <span>{</span>
        <span>int</span> val <span>=</span> cache<span>.</span><span>get</span><span>(</span>key<span>)</span><span>;</span>
        <span>// 删除 key，重新插入到队尾</span>
        cache<span>.</span><span>remove</span><span>(</span>key<span>)</span><span>;</span>
        cache<span>.</span><span>put</span><span>(</span>key<span>,</span> val<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/lru-cache/solution/lruhuan-cun-ji-zhi-by-leetcode-solution/" target="_blank" rel="noopener noreferrer">LRU缓存机制 - LRU 缓存 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/lru-cache/solution/lru-ce-lue-xiang-jie-he-shi-xian-by-labuladong/" target="_blank" rel="noopener noreferrer">LRU 策略详解和实现 - LRU 缓存 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/146.png" type="image/png"/>
    </item>
    <item>
      <title>206.反转链表</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">206.反转链表</source>
      <pubDate>Wed, 23 Mar 2022 08:11:36 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_206-反转链表"> 206.反转链表</h1>
<p>https://leetcode-cn.com/problems/reverse-linked-list/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/206.png" alt="" loading="lazy"></p>
<h2 id="方法一-递归"> 方法一：递归</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p><strong>递归函数</strong></p>
<p><code>reverserList(ListNode* head)</code>：返回反转后的链表头结点</p>
<p><strong>节点反转示意图</strong></p>
<p>以节点1为例，结点1之后的结点，经过递归公式<code>reverserList</code>处理后的结果如下图所示：</p>
<p><img src="https://pic.leetcode-cn.com/1611457360-ZminDz-image.png" alt="image.png" loading="lazy"></p>
<p>接着需要做的就是反转结点1，也就是将head指向的结点作为下一个结点的下一个结点，即<code>head.next.next=head</code></p>
<p><img src="https://pic.leetcode-cn.com/1611457400-xIhTwQ-image.png" alt="image.png" loading="lazy"></p>
<p>最后，将head指向的结点的下一个结点置为null，就完成了整个链表的反转。</p>
<p><img src="https://pic.leetcode-cn.com/1611457409-hQkmzj-image.png" alt="image.png" loading="lazy"></p>
<p><strong>递归过程示意图</strong></p>
<p><img src="https://pic.leetcode-cn.com/8951bc3b8b7eb4da2a46063c1bb96932e7a69910c0a93d973bd8aa5517e59fc8.gif" alt="img" loading="lazy"></p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    ListNode<span>*</span> <span>reverseList</span><span>(</span>ListNode<span>*</span> head<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>head <span>==</span> <span>NULL</span> <span>||</span> head<span>-></span>next <span>==</span> <span>NULL</span><span>)</span> <span>{</span>
            <span>return</span> head<span>;</span>
        <span>}</span>
        ListNode<span>*</span> ret <span>=</span> <span>reverseList</span><span>(</span>head<span>-></span>next<span>)</span><span>;</span>
        head<span>-></span>next<span>-></span>next <span>=</span> head<span>;</span>
        head<span>-></span>next <span>=</span> <span>NULL</span><span>;</span>
        <span>return</span> ret<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-迭代"> 方法二：迭代</h2>
<div><p>Tips</p>
<p>定义两个指针：<code>pre</code>和<code>cur</code>，<code>pre</code>初始时指向空<code>nullptr</code>，<code>cur</code>指向头结点</p>
<ul>
<li>每次让<code>pre</code>的下一个节点指针<code>next</code>指向<code>cur</code></li>
<li><code>pre</code>和<code>cur</code>同时向后移动一个位置</li>
<li>直到<code>pre</code>到达链表尾部结束，此时<code>cur</code>指向空<code>nullptr</code></li>
<li>返回<code>pre</code>即为反转链表的头结点</li>
</ul>
</div>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    ListNode<span>*</span> <span>reverseList</span><span>(</span>ListNode<span>*</span> head<span>)</span> <span>{</span>
        <span>if</span><span>(</span>head <span>==</span> <span>nullptr</span><span>)</span><span>{</span>
            <span>return</span> <span>nullptr</span><span>;</span>
        <span>}</span>
        ListNode<span>*</span> pre <span>=</span> <span>nullptr</span><span>,</span> <span>*</span>cur <span>=</span> head<span>;</span>
        <span>while</span><span>(</span>cur<span>)</span><span>{</span>
            ListNode<span>*</span> next <span>=</span> cur<span>-></span>next<span>;</span>
            cur<span>-></span>next <span>=</span> pre<span>;</span>
            pre <span>=</span> cur<span>;</span>
            cur <span>=</span> next<span>;</span>
        <span>}</span>
        <span>return</span> pre<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div></CodeGroupItem>
<p>::::</p>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/yi-bu-yi-bu-jiao-ni-ru-he-yong-di-gui-si-67c3/" target="_blank" rel="noopener noreferrer">一步一步教你如何用递归思想反转链表 - 反转链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-shuang-zhi-zhen-di-gui-yao-mo-/" target="_blank" rel="noopener noreferrer">【反转链表】：双指针，递归，妖魔化的双指针 - 反转链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/206.png" type="image/png"/>
    </item>
    <item>
      <title>297.二叉树的序列化与反序列化</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/297.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/297.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">297.二叉树的序列化与反序列化</source>
      <pubDate>Mon, 14 Mar 2022 02:41:12 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_297-二叉树的序列化与反序列化"> 297.二叉树的序列化与反序列化</h1>
<p>https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/297.png" alt="" loading="lazy"></p>
<h2 id="方法一-先序遍历dfs"> 方法一：先序遍历DFS</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p>深度优先搜索策略区分为先序遍历、中序遍历、后序遍历，这里采用先序遍历的编码方式对二叉树进行序列化</p>
<p><strong>序列化</strong></p>
<ul>
<li>遇到空子树时序列化为<code>NULL</code></li>
<li>遇到非空子树时首先序列化根节点root为<code>root-&gt;val</code>，递归序列化这棵树的左子树和右子树。</li>
</ul>
<p><strong>反序列化</strong></p>
<ul>
<li>根据空格将二叉树的先序遍历序列分割得到先序遍历的元素列表，从左向右遍历这个序列
<ul>
<li>遇到元素为<code>NULL</code>时反序列化为空树</li>
<li>遇到元素为数值时创建根节点<code>root</code>为<code>stoi(str)</code>，继续递归反序列化<code>root</code>的左右子树</li>
</ul>
</li>
</ul>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Codec</span> <span>{</span>
<span>public</span><span>:</span>
    <span>void</span> <span>rserialize</span><span>(</span>TreeNode<span>*</span> root<span>,</span> string<span>&amp;</span> str<span>)</span><span>{</span>
        <span>if</span><span>(</span>root <span>==</span> <span>NULL</span><span>)</span><span>{</span>
            str <span>+=</span> <span>"null "</span><span>;</span>
        <span>}</span> <span>else</span><span>{</span>
            str <span>+=</span> <span>to_string</span><span>(</span>root<span>-></span>val<span>)</span> <span>+</span> <span>" "</span><span>;</span>
            <span>rserialize</span><span>(</span>root<span>-></span>left<span>,</span> str<span>)</span><span>;</span>
            <span>rserialize</span><span>(</span>root<span>-></span>right<span>,</span> str<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>

    <span>// Encodes a tree to a single string.</span>
    string <span>serialize</span><span>(</span>TreeNode<span>*</span> root<span>)</span> <span>{</span>
        string ret<span>;</span>
        <span>rserialize</span><span>(</span>root<span>,</span> ret<span>)</span><span>;</span>
        <span>return</span> ret<span>;</span>
    <span>}</span>

    TreeNode<span>*</span> <span>rdeserialize</span><span>(</span>list<span>&lt;</span>string<span>></span><span>&amp;</span> dataArray<span>)</span><span>{</span>
        <span>if</span><span>(</span>dataArray<span>.</span><span>front</span><span>(</span><span>)</span> <span>==</span> <span>"null"</span><span>)</span><span>{</span>
            dataArray<span>.</span><span>erase</span><span>(</span>dataArray<span>.</span><span>begin</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>return</span> <span>NULL</span><span>;</span>
        <span>}</span>

        TreeNode<span>*</span> root <span>=</span> <span>new</span> <span>TreeNode</span><span>(</span><span>stoi</span><span>(</span>dataArray<span>.</span><span>front</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
        dataArray<span>.</span><span>erase</span><span>(</span>dataArray<span>.</span><span>begin</span><span>(</span><span>)</span><span>)</span><span>;</span>
        root<span>-></span>left <span>=</span> <span>rdeserialize</span><span>(</span>dataArray<span>)</span><span>;</span>
        root<span>-></span>right <span>=</span> <span>rdeserialize</span><span>(</span>dataArray<span>)</span><span>;</span>
        <span>return</span> root<span>;</span>
    <span>}</span>

    <span>// Decodes your encoded data to tree.</span>
    TreeNode<span>*</span> <span>deserialize</span><span>(</span>string data<span>)</span> <span>{</span>
        list<span>&lt;</span>string<span>></span> dataArray<span>;</span>
        string str<span>;</span>
        stringstream <span>ss</span><span>(</span>data<span>)</span><span>;</span>
        <span>while</span><span>(</span>ss <span>>></span> str<span>)</span><span>{</span>
            dataArray<span>.</span><span>emplace_back</span><span>(</span>str<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> <span>rdeserialize</span><span>(</span>dataArray<span>)</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-层次遍历bfs"> 方法二：层次遍历BFS</h2>
<h3 id="思路分析-2"> 思路分析</h3>
<div><p>Tips</p>
<p><strong>序列化</strong></p>
<p>对树进行层次遍历，维护一个队列<code>q</code>，初始时让根节点入队，考察出队节点：</p>
<ul>
<li>如果出队节点为<code>null</code>，将符号<code>null</code>加入<code>encode</code></li>
<li>如果出队节点为数值，将节点值加入<code>encode</code>，并将其左右子节点入队（子节点为NULL也要入队，它对应<code>null</code>，需要被记录）</li>
</ul>
<p>循环出队入队过程直到队列为空，遍历完所有节点，完成序列化。</p>
<p><strong>反序列化</strong></p>
<p>维护一个队列<code>q</code>，初始时用序列化字符串<code>encode</code>的第一个子串<code>encode[0]</code>创建根节点，并将根节点入队。</p>
<ul>
<li>
<p>将队首元素<code>top</code>出队，然后利用<code>encode</code>串的接下来两个元素创建左右节点，并让<code>top</code>指向左右子节点</p>
</li>
<li>
<p>如果子节点不为空，则将子节点继续入队</p>
</li>
</ul>
<p>循环出队入队过程直到队列为空，遍历完<code>encode</code>串，完成反序列化。</p>
</div>
<h3 id="参考代码-2"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Codec</span> <span>{</span>
<span>public</span><span>:</span>

    <span>// Encodes a tree to a single string.</span>
    string <span>serialize</span><span>(</span>TreeNode<span>*</span> root<span>)</span> <span>{</span>
        string encode <span>=</span> <span>""</span><span>;</span>

        queue<span>&lt;</span>TreeNode<span>*</span><span>></span> q<span>;</span>
        <span>if</span><span>(</span>root <span>==</span> <span>NULL</span><span>)</span><span>{</span>
            encode <span>=</span> <span>"null"</span><span>;</span>
            <span>return</span> encode<span>;</span>
        <span>}</span>
        
        q<span>.</span><span>push</span><span>(</span>root<span>)</span><span>;</span>
        
        <span>while</span><span>(</span><span>!</span>q<span>.</span><span>empty</span><span>(</span><span>)</span><span>)</span><span>{</span>
            <span>auto</span> top <span>=</span> q<span>.</span><span>front</span><span>(</span><span>)</span><span>;</span>
            q<span>.</span><span>pop</span><span>(</span><span>)</span><span>;</span>
            <span>if</span><span>(</span>top <span>==</span> <span>NULL</span><span>)</span><span>{</span>
                encode <span>+=</span> <span>" null"</span><span>;</span>
                <span>continue</span><span>;</span>
            <span>}</span>
            <span>if</span><span>(</span>top <span>!=</span> root<span>)</span>
                encode <span>+=</span> <span>" "</span><span>;</span>
            encode <span>+=</span> <span>to_string</span><span>(</span>top<span>-></span>val<span>)</span><span>;</span>
            q<span>.</span><span>push</span><span>(</span>top<span>-></span>left<span>)</span><span>;</span>
            q<span>.</span><span>push</span><span>(</span>top<span>-></span>right<span>)</span><span>;</span>
        <span>}</span>

        <span>// cout &lt;&lt; "encode = " &lt;&lt; encode &lt;&lt; endl;</span>
        <span>return</span> encode<span>;</span>       
    <span>}</span>

    <span>// Decodes your encoded data to tree.</span>
    TreeNode<span>*</span> <span>deserialize</span><span>(</span>string data<span>)</span> <span>{</span>
        stringstream <span>ss</span><span>(</span>data<span>)</span><span>;</span>
        string str<span>;</span>
        
        ss <span>>></span> str<span>;</span>
        <span>if</span><span>(</span>str <span>==</span> <span>"null"</span><span>)</span><span>{</span>
            <span>return</span> <span>NULL</span><span>;</span>
        <span>}</span>

        <span>// cout &lt;&lt; "str = " &lt;&lt; str &lt;&lt; endl;</span>
        TreeNode<span>*</span> root <span>=</span> <span>new</span> <span>TreeNode</span><span>(</span><span>stoi</span><span>(</span>str<span>)</span><span>)</span><span>;</span>
        queue<span>&lt;</span>TreeNode<span>*</span><span>></span> q<span>;</span>
        q<span>.</span><span>push</span><span>(</span>root<span>)</span><span>;</span>
        <span>while</span><span>(</span><span>!</span>q<span>.</span><span>empty</span><span>(</span><span>)</span><span>)</span><span>{</span>
            <span>auto</span> top <span>=</span> q<span>.</span><span>front</span><span>(</span><span>)</span><span>;</span>
            q<span>.</span><span>pop</span><span>(</span><span>)</span><span>;</span>

            TreeNode<span>*</span> root <span>=</span> top<span>;</span>
            
            ss <span>>></span> str<span>;</span>
            TreeNode<span>*</span> left <span>=</span> <span>(</span>str <span>==</span> <span>"null"</span> <span>?</span> <span>NULL</span> <span>:</span> <span>new</span> <span>TreeNode</span><span>(</span><span>stoi</span><span>(</span>str<span>)</span><span>)</span><span>)</span><span>;</span>

            ss <span>>></span> str<span>;</span>
            TreeNode<span>*</span> right <span>=</span> <span>(</span>str <span>==</span> <span>"null"</span> <span>?</span> <span>NULL</span> <span>:</span> <span>new</span> <span>TreeNode</span><span>(</span><span>stoi</span><span>(</span>str<span>)</span><span>)</span><span>)</span><span>;</span>

            root<span>-></span>left <span>=</span> left<span>,</span> root<span>-></span>right <span>=</span> right<span>;</span>

            <span>if</span><span>(</span>root<span>-></span>left<span>)</span><span>{</span>
                q<span>.</span><span>push</span><span>(</span>root<span>-></span>left<span>)</span><span>;</span>
            <span>}</span>
            <span>if</span><span>(</span>root<span>-></span>right<span>)</span><span>{</span>
                q<span>.</span><span>push</span><span>(</span>root<span>-></span>right<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>

        <span>return</span> root<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/er-cha-shu-de-xu-lie-hua-yu-fan-xu-lie-hua-by-le-2/" target="_blank" rel="noopener noreferrer">二叉树的序列化与反序列化 - 二叉树的序列化与反序列化 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/shou-hui-tu-jie-gei-chu-dfshe-bfsliang-chong-jie-f/" target="_blank" rel="noopener noreferrer">『手画图解』剖析DFS、BFS解法 | 二叉树的序列化与反序列化 - 二叉树的序列化与反序列化 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/297.png" type="image/png"/>
    </item>
    <item>
      <title>3.无重复字符的最长子串</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/3.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/3.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">3.无重复字符的最长子串</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_3-无重复字符的最长子串"> 3.无重复字符的最长子串</h1>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/3.png" alt="" loading="lazy"></p>
<h2 id="方法一-哈希set"> 方法一：哈希set</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> <span>lengthOfLongestSubstring</span><span>(</span>string s<span>)</span> <span>{</span>
        <span>// 哈希集合，记录每个字符是否出现过</span>
        unordered_set<span>&lt;</span><span>char</span><span>></span> occ<span>;</span>
        <span>int</span> n <span>=</span> s<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        <span>// 右指针，初始值为-1，相当于我们在字符串的左边界的左侧，还没有开始移动</span>
        <span>int</span> rk <span>=</span> <span>-</span><span>1</span><span>,</span> ans <span>=</span> <span>0</span><span>;</span>
        <span>// 枚举左指针的位置，初始值隐性地表示为-1</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n<span>;</span> <span>++</span>i<span>)</span><span>{</span>
            <span>if</span><span>(</span>i <span>!=</span> <span>0</span><span>)</span><span>{</span>
                <span>// 左指针向右移动一格，移除一个字符</span>
                occ<span>.</span><span>erase</span><span>(</span>s<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>)</span><span>;</span>
            <span>}</span>
            <span>while</span><span>(</span>rk <span>+</span> <span>1</span> <span>&lt;</span> n <span>&amp;&amp;</span> occ<span>.</span><span>count</span><span>(</span>s<span>[</span>rk <span>+</span> <span>1</span><span>]</span><span>)</span> <span>==</span> <span>0</span><span>)</span><span>{</span>
                <span>// 不断地移动右指针</span>
                occ<span>.</span><span>insert</span><span>(</span>s<span>[</span>rk <span>+</span> <span>1</span><span>]</span><span>)</span><span>;</span>
                <span>++</span>rk<span>;</span>
            <span>}</span>
            <span>// 第 i 到 rk 个字符是一个极长的无重复字符子串</span>
            ans <span>=</span> <span>max</span><span>(</span>ans<span>,</span> rk <span>-</span> i <span>+</span> <span>1</span><span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> ans<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-哈希table"> 方法二：哈希table</h2>
<h3 id="思路分析-2"> 思路分析</h3>
<div><p>Tips</p>
</div>
<h3 id="参考代码-2"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> <span>lengthOfLongestSubstring</span><span>(</span>string s<span>)</span> <span>{</span>
        unordered_map<span>&lt;</span><span>char</span><span>,</span> <span>int</span><span>></span> dic<span>;</span>
        <span>// 记录最大不重复子串的长度</span>
        <span>int</span> ans <span>=</span> <span>0</span><span>;</span>
        <span>// 滑动窗口左指针</span>
        <span>int</span> left <span>=</span> <span>0</span><span>;</span>
        <span>// 字符串长度</span>
        <span>int</span> n <span>=</span> s<span>.</span><span>length</span><span>(</span><span>)</span><span>;</span>

        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n<span>;</span> i<span>++</span><span>)</span><span>{</span>
            <span>/*
            1. 首先判断当前字符ch是否包含在dic中，如果不包含，则将该字符添加到dic
            2. 如果当前字符ch包含在dic中，此时有2种情况:
                2.1 当前字符包含在当前有效的子段中，如:abca
                2.2 当前字符不包含在当前最长有效的子段中，如:abba
            为了统一处理以上2类情况，每次更新left=max(left, dic[ch] + 1)
            更新left后，不管原来的s[i]是否在最长子段中，都要将s[i]的位置更新为当前的i
            */</span>
            <span>if</span><span>(</span>dic<span>.</span><span>count</span><span>(</span>s<span>[</span>i<span>]</span><span>)</span> <span>!=</span> <span>0</span><span>)</span><span>{</span>
                left <span>=</span> <span>max</span><span>(</span>left<span>,</span> dic<span>[</span>s<span>[</span>i<span>]</span><span>]</span> <span>+</span> <span>1</span><span>)</span><span>;</span>
            <span>}</span>
            <span>// 不管是否更新left,都要更新dic[i]的位置!</span>
            dic<span>[</span>s<span>[</span>i<span>]</span><span>]</span> <span>=</span> i<span>;</span>
            ans <span>=</span> <span>max</span><span>(</span>ans<span>,</span> i <span>-</span> left <span>+</span> <span>1</span><span>)</span><span>;</span>
        <span>}</span>

        <span>return</span> ans<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/wu-zhong-fu-zi-fu-de-zui-chang-zi-chuan-by-leetc-2/" target="_blank" rel="noopener noreferrer">无重复字符的最长子串 - 无重复字符的最长子串 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/hua-dong-chuang-kou-by-powcai/" target="_blank" rel="noopener noreferrer">滑动窗口 - 无重复字符的最长子串 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/longest-substring-without-repeating-characters-b-2/" target="_blank" rel="noopener noreferrer">【无重复字符的最长子串】滑动窗口，精简代码，图解模拟 - 无重复字符的最长子串 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/3.png" type="image/png"/>
    </item>
    <item>
      <title>309.最佳买卖股票时机含冷冻期</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/309.%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/309.%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">309.最佳买卖股票时机含冷冻期</source>
      <pubDate>Fri, 04 Mar 2022 14:19:35 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_309-最佳买卖股票时机含冷冻期"> 309.最佳买卖股票时机含冷冻期</h1>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/309.png" alt="" loading="lazy"></p>
<h2 id="方法一-动态规划"> 方法一：动态规划</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p><strong>状态定义</strong>：</p>
<p>用 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span>]</span></span></span></span> 表示第 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6595em;"></span><span>i</span></span></span></span> 天结束之后的累计最大收益，根据题意存在三种不同的状态：</p>
<ul>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span>]</span><span>[</span><span>0</span><span>]</span></span></span></span>：目前持有一支股票，对应的累计最大收益</li>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span>]</span><span>[</span><span>1</span><span>]</span></span></span></span>：目前不持有任何股票，并且处于冷冻期中，对应的累计最大收益</li>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span>]</span><span>[</span><span>2</span><span>]</span></span></span></span>：我们目前不持有任何股票，并且不处于冷冻期中，对应的累计最大收益 。</li>
</ul>
<p><strong>状态转移方程</strong>：</p>
<ul>
<li>对于 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span>]</span><span>[</span><span>0</span><span>]</span></span></span></span>，我们目前持有的这一支股票可以是在第 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7429em;vertical-align:-0.0833em;"></span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span> 天就已经持有的，对应的状态为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>0</span><span>]</span></span></span></span>；或者是第 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6595em;"></span><span>i</span></span></span></span> 天买入的，那么第 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7429em;vertical-align:-0.0833em;"></span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span> 天就不能持有股票并且不处于冷冻期总，对应的状态为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>2</span><span>]</span></span></span></span> 加上买入股票的负收益 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>p</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>ces</span><span>[</span><span>i</span><span>]</span></span></span></span>。因此状态转移方程为：</li>
</ul>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span>]</span><span>[</span><span>0</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>x</span><span>(</span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>0</span><span>]</span><span>,</span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>2</span><span>]</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>p</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>ces</span><span>[</span><span>i</span><span>])</span></span></span></span></span></p>
<ul>
<li>对于 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span>]</span><span>[</span><span>1</span><span>]</span></span></span></span>，我们在第 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6595em;"></span><span>i</span></span></span></span> 天结束之后处于冷冻期的原因是在当天卖出了股票，那么说明在第 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7429em;vertical-align:-0.0833em;"></span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span> 天时我们必须持有一支股票，对应的状态为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>0</span><span>]</span></span></span></span> 加上卖出股票的正收益 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>p</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>ces</span><span>[</span><span>i</span><span>]</span></span></span></span>。因此状态转移方程为：</li>
</ul>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span>]</span><span>[</span><span>1</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>0</span><span>]</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>p</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>ces</span><span>[</span><span>i</span><span>]</span></span></span></span></span></p>
<ul>
<li>对于 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span>]</span><span>[</span><span>2</span><span>]</span></span></span></span>，我们在第 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6595em;"></span><span>i</span></span></span></span> 天结束之后不持有任何股票并且不处于冷冻期，说明当天没有进行任何操作，即第 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7429em;vertical-align:-0.0833em;"></span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span> 天时不持有任何股票：如果处于冷冻期，对应的状态为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>1</span><span>]</span></span></span></span>；如果不处于冷冻期，对应的状态为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>2</span><span>]</span></span></span></span>。因此状态转移方程为：</li>
</ul>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span>]</span><span>[</span><span>2</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>x</span><span>(</span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>1</span><span>]</span><span>,</span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>2</span><span>])</span></span></span></span></span></p>
<p>如果一共有 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>n</span></span></span></span> 天，最终答案为</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>x</span><span>(</span><span style="margin-right:0.10764em;">f</span><span>[</span><span>n</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>0</span><span>]</span><span>,</span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>n</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>1</span><span>]</span><span>,</span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>n</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>2</span><span>])</span></span></span></span></span></p>
<p>注意到如果在最后一天（第 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6667em;vertical-align:-0.0833em;"></span><span>n</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span> 天）结束之后，手上仍然持有股票，那么显然是没有任何意义的。因此更加精确地，最终的答案实际上是 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>n</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>1</span></span></span></span>] 和 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>n</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>2</span><span>]</span></span></span></span> 中的较大值，即：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>x</span><span>(</span><span style="margin-right:0.10764em;">f</span><span>[</span><span>n</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>1</span><span>]</span><span>,</span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>n</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>2</span><span>])</span></span></span></span></span></p>
<p><strong>边界条件</strong>：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:4.32em;vertical-align:-1.91em;"></span><span><span><span><span><span><span style="height:2.35em;"><span style="top:-2.2em;"><span style="height:3.15em;"></span><span><span>⎩</span></span></span><span style="top:-2.192em;"><span style="height:3.15em;"></span><span style="height:0.316em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.316em' style='width:0.8889em' viewBox='0 0 888.89 316' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V316 H384z M384 0 H504 V316 H384z'/></svg></span></span><span style="top:-3.15em;"><span style="height:3.15em;"></span><span><span>⎨</span></span></span><span style="top:-4.292em;"><span style="height:3.15em;"></span><span style="height:0.316em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.316em' style='width:0.8889em' viewBox='0 0 888.89 316' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V316 H384z M384 0 H504 V316 H384z'/></svg></span></span><span style="top:-4.6em;"><span style="height:3.15em;"></span><span><span>⎧</span></span></span></span><span>​</span></span><span><span style="height:1.85em;"><span></span></span></span></span></span></span><span><span><span><span><span><span style="height:2.41em;"><span style="top:-4.41em;"><span style="height:3.008em;"></span><span><span style="margin-right:0.10764em;">f</span><span>[</span><span>0</span><span>]</span><span>[</span><span>0</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span><span>−</span><span>p</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>ces</span><span>[</span><span>0</span><span>]</span></span></span><span style="top:-2.97em;"><span style="height:3.008em;"></span><span><span style="margin-right:0.10764em;">f</span><span>[</span><span>0</span><span>]</span><span>[</span><span>1</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span><span>0</span></span></span><span style="top:-1.53em;"><span style="height:3.008em;"></span><span><span style="margin-right:0.10764em;">f</span><span>[</span><span>0</span><span>]</span><span>[</span><span>2</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span><span>0</span></span></span></span><span>​</span></span><span><span style="height:1.91em;"><span></span></span></span></span></span></span></span><span></span></span></span></span></span></span></p>
<ul>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>0</span><span>]</span><span>[</span><span>0</span><span>]</span></span></span></span>：在第 0 天时，如果持有股票，那么只能是在第 0 天买入的，对应负收益 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>−</span><span>p</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>ces</span><span>[</span><span>0</span><span>]</span></span></span></span>；如果不持有股票，那么收益为零。</li>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>0</span><span>]</span><span>[</span><span>1</span><span>]</span></span></span></span>：在第 0 天时，不持有股票（可以理解为在-1天买入在0天卖出）收益为0。</li>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>0</span><span>]</span><span>[</span><span>2</span><span>]</span></span></span></span>：在第 0 天时，不持有股票（不买入）收益为0。</li>
</ul>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>// 尽可能地完成更多的交易（多次买卖一支股票）</span>
    <span>int</span> <span>maxProfit</span><span>(</span>vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> prices<span>)</span> <span>{</span>
        <span>int</span> n <span>=</span> prices<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        <span>if</span><span>(</span>prices<span>.</span><span>empty</span><span>(</span><span>)</span><span>)</span><span>{</span>
            <span>return</span> <span>0</span><span>;</span>
        <span>}</span>     

        vector<span>&lt;</span>vector<span>&lt;</span><span>int</span><span>>></span> <span>f</span><span>(</span>n<span>,</span> <span><span>vector</span><span><span>&lt;</span><span>int</span><span>></span></span></span><span>(</span><span>3</span><span>)</span><span>)</span><span>;</span>
        f<span>[</span><span>0</span><span>]</span><span>[</span><span>0</span><span>]</span> <span>=</span> <span>-</span>prices<span>[</span><span>0</span><span>]</span><span>;</span>
        <span>// 用 f[i] 表示第 i 天结束之后的「累计最大收益」</span>
        <span>// 「处于冷冻期」指的是在第 i 天结束之后的状态。也就是说：如果第 i 天结束之后处于冷冻期，那么第 i+1 天无法买入股票。</span>
        <span>// f[i][0]: 手上持有股票的最大收益</span>
        <span>// f[i][1]: 手上不持有股票，并且处于冷冻期的累计最大收益</span>
        <span>// f[i][2]: 手上不持有股票，并且不在冷冻期的累计最大收益</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> n<span>;</span> <span>++</span>i<span>)</span><span>{</span>
            f<span>[</span>i<span>]</span><span>[</span><span>0</span><span>]</span> <span>=</span> <span>max</span><span>(</span>f<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span><span>0</span><span>]</span><span>,</span> f<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span><span>2</span><span>]</span> <span>-</span> prices<span>[</span>i<span>]</span><span>)</span><span>;</span>
            f<span>[</span>i<span>]</span><span>[</span><span>1</span><span>]</span> <span>=</span> f<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span><span>0</span><span>]</span> <span>+</span> prices<span>[</span>i<span>]</span><span>;</span>
            f<span>[</span>i<span>]</span><span>[</span><span>2</span><span>]</span> <span>=</span> <span>max</span><span>(</span>f<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span><span>1</span><span>]</span><span>,</span> f<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span><span>2</span><span>]</span><span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> <span>max</span><span>(</span>f<span>[</span>n <span>-</span> <span>1</span><span>]</span><span>[</span><span>1</span><span>]</span><span>,</span> f<span>[</span>n <span>-</span> <span>1</span><span>]</span><span>[</span><span>2</span><span>]</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div></CodeGroupItem>
</CodeGroup>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/309.png" type="image/png"/>
    </item>
    <item>
      <title>337.打家劫舍III</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/337.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DIII/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/337.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DIII/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">337.打家劫舍III</source>
      <pubDate>Thu, 03 Mar 2022 08:38:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_337-打家劫舍iii"> 337.打家劫舍III</h1>
<p>https://leetcode-cn.com/problems/house-robber-iii/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/337.png" alt="" loading="lazy"></p>
<h2 id="方法一-递归-动态规划"> 方法一：递归+动态规划</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p>一棵二叉树，树上的每个点有两种状态（选中和不选中），问不能同时选中有父子关系的点的情况下，能选中的点的最大权值和是多少。</p>
<p>用<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>o</span><span>)</span></span></span></span>表示选择<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>o</span></span></span></span>节点的情况下，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>o</span></span></span></span>节点的子树上被选择的节点的最大权值和；用<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span>(</span><span>o</span><span>)</span></span></span></span>表示不选择<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>o</span></span></span></span>节点的情况下，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>o</span></span></span></span>节点的子树上被选择的节点的最大权值和</p>
<p>设<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6944em;"></span><span style="margin-right:0.01968em;">l</span></span></span></span>和<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span style="margin-right:0.02778em;">r</span></span></span></span>分别代表<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>o</span></span></span></span>的左右孩子</p>
<ul>
<li>当<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>o</span></span></span></span>被选中时，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>o</span></span></span></span>的左右孩子都不能被选中，故 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>o</span></span></span></span> 被选中情况下子树上被选中点的最大权值和为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6944em;"></span><span style="margin-right:0.01968em;">l</span></span></span></span> 和 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span style="margin-right:0.02778em;">r</span></span></span></span> 不被选中的最大权值和相加</li>
</ul>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>o</span><span>)</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span>(</span><span style="margin-right:0.01968em;">l</span><span>)</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span>(</span><span style="margin-right:0.02778em;">r</span><span>)</span></span></span></span></span></p>
<ul>
<li>当 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>o</span></span></span></span> 不被选中时，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>o</span></span></span></span> 的左右孩子可以被选中，也可以不被选中。对于 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>o</span></span></span></span> 的某个具体的孩子 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>x</span></span></span></span>，它对 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>o</span></span></span></span> 的贡献是 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>x</span></span></span></span> 被选中和不被选中情况下权值和的较大值。</li>
</ul>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span>(</span><span>o</span><span>)</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>x</span><span>{</span><span style="margin-right:0.10764em;">f</span><span>(</span><span style="margin-right:0.01968em;">l</span><span>)</span><span>,</span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">g</span><span>(</span><span style="margin-right:0.01968em;">l</span><span>)}</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>x</span><span>{</span><span style="margin-right:0.10764em;">f</span><span>(</span><span style="margin-right:0.02778em;">r</span><span>)</span><span>,</span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">g</span><span>(</span><span style="margin-right:0.02778em;">r</span><span>)}</span></span></span></span></span></p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    unordered_map<span>&lt;</span>TreeNode<span>*</span><span>,</span> <span>int</span><span>></span> f<span>,</span> g<span>;</span>

    <span>void</span> <span>dfs</span><span>(</span>TreeNode<span>*</span> root<span>)</span><span>{</span>
        <span>if</span><span>(</span>root <span>==</span> <span>nullptr</span><span>)</span><span>{</span>
            <span>return</span><span>;</span>
        <span>}</span>
        <span>dfs</span><span>(</span>root<span>-></span>left<span>)</span><span>;</span>
        <span>dfs</span><span>(</span>root<span>-></span>right<span>)</span><span>;</span>
        f<span>[</span>root<span>]</span> <span>=</span> root<span>-></span>val <span>+</span> g<span>[</span>root<span>-></span>left<span>]</span> <span>+</span> g<span>[</span>root<span>-></span>right<span>]</span><span>;</span>
        g<span>[</span>root<span>]</span> <span>=</span> <span>max</span><span>(</span>f<span>[</span>root<span>-></span>left<span>]</span><span>,</span> g<span>[</span>root<span>-></span>left<span>]</span><span>)</span> <span>+</span> <span>max</span><span>(</span>f<span>[</span>root<span>-></span>right<span>]</span><span>,</span> g<span>[</span>root<span>-></span>right<span>]</span><span>)</span><span>;</span>
    <span>}</span>

    <span>int</span> <span>rob</span><span>(</span>TreeNode<span>*</span> root<span>)</span> <span>{</span>
        <span>dfs</span><span>(</span>root<span>)</span><span>;</span>
        <span>return</span> <span>max</span><span>(</span>f<span>[</span>root<span>]</span><span>,</span> g<span>[</span>root<span>]</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-递归-记忆化"> 方法二：递归+记忆化</h2>
<h3 id="思路分析-2"> 思路分析</h3>
<div><p>Tips</p>
<p><strong>当前节点的最大偷钱数=max(根节点权值+4个孙子节点最大偷钱数，两个儿子节点的最大偷钱数）</strong></p>
<p>根节点权值+4个孙子节点最大偷钱数money1：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7778em;vertical-align:-0.0833em;"></span><span>roo</span><span>t</span><span>.</span><span style="margin-right:0.03588em;">v</span><span>a</span><span style="margin-right:0.01968em;">l</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ro</span><span>b</span><span>(</span><span>roo</span><span>t</span><span>.</span><span style="margin-right:0.01968em;">l</span><span>e</span><span style="margin-right:0.10764em;">f</span><span>t</span><span>.</span><span style="margin-right:0.01968em;">l</span><span>e</span><span style="margin-right:0.10764em;">f</span><span>t</span><span>)</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ro</span><span>b</span><span>(</span><span>roo</span><span>t</span><span>.</span><span style="margin-right:0.01968em;">l</span><span>e</span><span style="margin-right:0.10764em;">f</span><span>t</span><span>.</span><span style="margin-right:0.02778em;">r</span><span>i</span><span style="margin-right:0.03588em;">g</span><span>h</span><span>t</span><span>)</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ro</span><span>b</span><span>(</span><span>roo</span><span>t</span><span>.</span><span style="margin-right:0.02778em;">r</span><span>i</span><span style="margin-right:0.03588em;">g</span><span>h</span><span>t</span><span>.</span><span style="margin-right:0.01968em;">l</span><span>e</span><span style="margin-right:0.10764em;">f</span><span>t</span><span>)</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ro</span><span>b</span><span>(</span><span>roo</span><span>t</span><span>.</span><span style="margin-right:0.02778em;">r</span><span>i</span><span style="margin-right:0.03588em;">g</span><span>h</span><span>t</span><span>.</span><span style="margin-right:0.02778em;">r</span><span>i</span><span style="margin-right:0.03588em;">g</span><span>h</span><span>t</span><span>)</span></span></span></span></span></p>
<p>两个儿子节点的最大偷钱数money2：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ro</span><span>b</span><span>(</span><span>roo</span><span>t</span><span>.</span><span style="margin-right:0.01968em;">l</span><span>e</span><span style="margin-right:0.10764em;">f</span><span>t</span><span>)</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ro</span><span>b</span><span>(</span><span>roo</span><span>t</span><span>.</span><span style="margin-right:0.02778em;">r</span><span>i</span><span style="margin-right:0.03588em;">g</span><span>h</span><span>t</span><span>)</span></span></span></span></span></p>
<p>当前节点的最大偷钱数money：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.1944em;"></span><span>m</span><span>o</span><span>n</span><span style="margin-right:0.03588em;">ey</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>x</span><span>(</span><span>m</span><span>o</span><span>n</span><span style="margin-right:0.03588em;">ey</span><span>1</span><span>,</span><span style="margin-right:0.1667em;"></span><span>m</span><span>o</span><span>n</span><span style="margin-right:0.03588em;">ey</span><span>2</span><span>)</span></span></span></span></span></p>
<p><strong>重复子问题</strong></p>
<p>根节点在计算自己能偷多少钱的时候，同时计算了 4 个孙子节点能偷多少钱，也计算了 2 个儿子能偷多少钱。这样在儿子当爷爷时，就会产生重复计算一遍孙子节点。</p>
<p>因此使用哈希表来存储已经计算过的结果，使用记忆化解决重复子问题。</p>
</div>
<h3 id="参考代码-2"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    unordered_map<span>&lt;</span>TreeNode<span>*</span><span>,</span> <span>int</span><span>></span> memo<span>;</span>

    <span>int</span> <span>robCore</span><span>(</span>TreeNode<span>*</span> root<span>)</span><span>{</span>
        <span>if</span><span>(</span>root <span>==</span> <span>nullptr</span><span>)</span><span>{</span>
            <span>return</span> <span>0</span><span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>memo<span>.</span><span>find</span><span>(</span>root<span>)</span> <span>!=</span> memo<span>.</span><span>end</span><span>(</span><span>)</span><span>)</span><span>{</span>
            <span>return</span> memo<span>[</span>root<span>]</span><span>;</span>
        <span>}</span>
        <span>int</span> money <span>=</span> root<span>-></span>val<span>;</span>
        <span>if</span><span>(</span>root<span>-></span>left <span>!=</span> <span>nullptr</span><span>)</span><span>{</span>
            money <span>+=</span> <span>(</span><span>rob</span><span>(</span>root<span>-></span>left<span>-></span>left<span>)</span> <span>+</span> <span>rob</span><span>(</span>root<span>-></span>left<span>-></span>right<span>)</span><span>)</span><span>;</span>
        <span>}</span>

        <span>if</span><span>(</span>root<span>-></span>right <span>!=</span> <span>nullptr</span><span>)</span><span>{</span>
            money <span>+=</span> <span>(</span><span>rob</span><span>(</span>root<span>-></span>right<span>-></span>left<span>)</span> <span>+</span> <span>rob</span><span>(</span>root<span>-></span>right<span>-></span>right<span>)</span><span>)</span><span>;</span>
        <span>}</span>
        <span>int</span> res <span>=</span> <span>max</span><span>(</span>money<span>,</span> <span>rob</span><span>(</span>root<span>-></span>left<span>)</span> <span>+</span> <span>rob</span><span>(</span>root<span>-></span>right<span>)</span><span>)</span><span>;</span>
        memo<span>[</span>root<span>]</span> <span>=</span> res<span>;</span>
        <span>return</span> res<span>;</span>
    <span>}</span>
    <span>int</span> <span>rob</span><span>(</span>TreeNode<span>*</span> root<span>)</span> <span>{</span>
        <span>return</span> <span>robCore</span><span>(</span>root<span>)</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div></CodeGroupItem>
</CodeGroup>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/337.png" type="image/png"/>
    </item>
    <item>
      <title>338.比特位计数</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/338.%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/338.%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">338.比特位计数</source>
      <pubDate>Sat, 05 Mar 2022 03:40:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_338-比特位计数"> 338.比特位计数</h1>
<p>https://leetcode-cn.com/problems/counting-bits/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/338.png" alt="" loading="lazy"></p>
<h2 id="方法一-位运算-动态规划"> 方法一：位运算+动态规划</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p><strong>位运算技巧</strong></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>n</span><span>&amp;</span><span>(</span><span>n</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)</span></span></span></span>可以把 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>n</span></span></span></span> 的二进制中，最后一个出现的1改写成0，即消除 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>n</span></span></span></span> 的二进制中最后一个出现的1</p>
<p>因为执行 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>n</span><span>&amp;</span><span>(</span><span>n</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)</span></span></span></span> 使得 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>n</span></span></span></span> 变成 0 的操作次数，就是 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>n</span></span></span></span> 的二进制中 1 的个数</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/338-1.png" alt="" loading="lazy"></p>
<p><strong>动态规划</strong></p>
<p><strong>状态定义</strong>：</p>
<p>设<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>bi</span><span>t</span><span>s</span><span>[</span><span>i</span><span>]</span></span></span></span>代表以数字i二进制中1的个数</p>
<p><strong>状态转移方程</strong>：</p>
<p>令 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.1944em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>x</span><span>&amp;</span><span>(</span><span>x</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)</span></span></span></span>，则 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.1944em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span> 为将 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>x</span></span></span></span> 的最低位1改写成0之后的数，显然 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7804em;vertical-align:-0.136em;"></span><span>0</span><span style="margin-right:0.2778em;"></span><span>≤</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.8304em;vertical-align:-0.1944em;"></span><span><span style="margin-right:0.03588em;">y</span></span><span style="margin-right:0.2778em;"></span><span>≤</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.4306em;"></span><span><span>x</span></span></span></span></span>，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>bi</span><span>t</span><span>s</span><span>[</span><span>x</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>bi</span><span>t</span><span>s</span><span>[</span><span style="margin-right:0.03588em;">y</span><span>]</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span>。</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>bi</span><span>t</span><span>s</span><span>[</span><span>i</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>bi</span><span>t</span><span>s</span><span>[</span><span>i</span><span>&amp;</span><span>(</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)]</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span></span></p>
<p><strong>边界值</strong>：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>bi</span><span>t</span><span>s</span><span>[</span><span>0</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span></span></p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    vector<span>&lt;</span><span>int</span><span>></span> <span>countBits</span><span>(</span><span>int</span> n<span>)</span> <span>{</span>
        vector<span>&lt;</span><span>int</span><span>></span> <span>bits</span><span>(</span>n <span>+</span> <span>1</span><span>)</span><span>;</span>
        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> n<span>;</span> i<span>++</span><span>)</span> <span>{</span>
            bits<span>[</span>i<span>]</span> <span>=</span> bits<span>[</span>i <span>&amp;</span> <span>(</span>i <span>-</span> <span>1</span><span>)</span><span>]</span> <span>+</span> <span>1</span><span>;</span>
        <span>}</span>
        <span>return</span> bits<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h3 id="参考文献"> 参考文献</h3>
<p><a href="https://leetcode-cn.com/problems/number-of-1-bits/solution/fu-xue-ming-zhu-xiang-jie-wei-yun-suan-f-ci7i/" target="_blank" rel="noopener noreferrer">【负雪明烛】详解位运算，附本题躲坑指南 - 位1的个数 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/counting-bits/solution/bi-te-wei-ji-shu-by-leetcode-solution-0t1i/" target="_blank" rel="noopener noreferrer">比特位计数 - 比特位计数 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/338.png" type="image/png"/>
    </item>
    <item>
      <title>416.分割等和子集</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/416.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/416.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">416.分割等和子集</source>
      <pubDate>Wed, 09 Mar 2022 14:22:11 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_416-分割等和子集"> 416.分割等和子集</h1>
<p>https://leetcode-cn.com/problems/partition-equal-subset-sum/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/416.png" alt="" loading="lazy"></p>
<h2 id="方法一-dfs-记忆化"> 方法一：DFS+记忆化</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p>记忆化搜索：哈希表的键定义为<code>index</code>和<code>cur</code>的组合来保证其唯一性，<code>key=to_string(index)+'_'+to_string(cur)</code></p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    unordered_map<span>&lt;</span>string<span>,</span> <span>bool</span><span>></span> dic<span>;</span>
    <span>bool</span> <span>dfs</span><span>(</span><span>int</span> index<span>,</span> <span>int</span> cur<span>,</span> vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> nums<span>)</span><span>{</span>
        <span>if</span><span>(</span>cur <span>&lt;</span> <span>0</span><span>)</span><span>{</span>
            <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>cur <span>==</span> <span>0</span><span>)</span><span>{</span>
            <span>return</span> <span>true</span><span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>index <span>==</span> nums<span>.</span><span>size</span><span>(</span><span>)</span><span>)</span><span>{</span>
            <span>return</span> <span>false</span><span>;</span>            
        <span>}</span>
        string s <span>=</span> <span>to_string</span><span>(</span>index<span>)</span> <span>+</span> <span>"_"</span> <span>+</span> <span>to_string</span><span>(</span>cur<span>)</span><span>;</span>
        <span>if</span><span>(</span>dic<span>.</span><span>find</span><span>(</span>s<span>)</span> <span>!=</span> dic<span>.</span><span>end</span><span>(</span><span>)</span><span>)</span><span>{</span>
            <span>return</span> dic<span>[</span>s<span>]</span><span>;</span>
        <span>}</span>
        dic<span>[</span>s<span>]</span> <span>=</span> <span>dfs</span><span>(</span>index <span>+</span> <span>1</span><span>,</span> cur <span>-</span> nums<span>[</span>index<span>]</span><span>,</span> nums<span>)</span> <span>||</span> <span>dfs</span><span>(</span>index <span>+</span> <span>1</span><span>,</span> cur<span>,</span> nums<span>)</span><span>;</span>
        <span>return</span> dic<span>[</span>s<span>]</span><span>;</span>
    <span>}</span>
    <span>bool</span> <span>canPartition</span><span>(</span>vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> nums<span>)</span> <span>{</span>
        <span>int</span> n <span>=</span> nums<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        <span>int</span> sum <span>=</span> <span>0</span><span>;</span>
        <span>int</span> maxnum <span>=</span> <span>0</span><span>;</span>
        <span>for</span><span>(</span><span>int</span> num <span>:</span> nums<span>)</span><span>{</span>
            sum <span>+=</span> num<span>;</span>
            maxnum <span>=</span> <span>max</span><span>(</span>maxnum<span>,</span> num<span>)</span><span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>sum <span>%</span> <span>2</span> <span>!=</span> <span>0</span><span>)</span><span>{</span>
            <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>maxnum <span>*</span> <span>2</span> <span>></span> sum<span>)</span><span>{</span>
            <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        <span>return</span> <span>dfs</span><span>(</span><span>0</span><span>,</span> sum <span>/</span> <span>2</span><span>,</span> nums<span>)</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div></CodeGroupItem>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    vector<span>&lt;</span><span>int</span><span>></span> dp<span>;</span>
    <span>bool</span> <span>dfs</span><span>(</span>vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> nums<span>,</span> <span>int</span> cur<span>,</span> <span>int</span> idx<span>)</span><span>{</span>
        <span>if</span><span>(</span>cur <span>&lt;</span> <span>0</span><span>)</span><span>{</span>
            <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>cur <span>==</span> <span>0</span><span>)</span><span>{</span>
            <span>return</span> <span>true</span><span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>dp<span>[</span>cur<span>]</span> <span>!=</span> <span>0</span><span>)</span><span>{</span>
            <span>return</span> dp<span>[</span>cur<span>]</span> <span>==</span> <span>1</span> <span>?</span> <span>true</span> <span>:</span> <span>false</span><span>;</span>
        <span>}</span>
        <span>bool</span> find <span>=</span> <span>false</span><span>;</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> idx<span>;</span> i <span>&lt;</span> nums<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span> i<span>++</span><span>)</span><span>{</span>
            find <span>|=</span> <span>dfs</span><span>(</span>nums<span>,</span> cur <span>-</span> nums<span>[</span>i<span>]</span><span>,</span> i <span>+</span> <span>1</span><span>)</span><span>;</span>
            <span>if</span><span>(</span>find<span>)</span><span>{</span>
                <span>break</span><span>;</span>
            <span>}</span>
        <span>}</span>
        dp<span>[</span>cur<span>]</span> <span>=</span> find <span>?</span> <span>1</span> <span>:</span> <span>-</span><span>1</span><span>;</span>
        <span>return</span> find<span>;</span>
    <span>}</span>
    <span>bool</span> <span>canPartition</span><span>(</span>vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> nums<span>)</span> <span>{</span>
        <span>int</span> sum <span>=</span> <span>0</span><span>;</span>
        <span>int</span> maxnum <span>=</span> <span>0</span><span>;</span>
        <span>for</span><span>(</span><span>int</span> num <span>:</span> nums<span>)</span><span>{</span>
            sum <span>+=</span> num<span>;</span>
            maxnum <span>=</span> <span>max</span><span>(</span>maxnum<span>,</span> num<span>)</span><span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>sum <span>%</span> <span>2</span> <span>!=</span> <span>0</span><span>)</span><span>{</span>
            <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>maxnum <span>*</span> <span>2</span> <span>></span> sum<span>)</span><span>{</span>
            <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        dp<span>.</span><span>resize</span><span>(</span>sum <span>/</span> <span>2</span> <span>+</span> <span>1</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        <span>return</span> <span>dfs</span><span>(</span>nums<span>,</span> sum <span>/</span> <span>2</span><span>,</span> <span>0</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-动态规划"> 方法二：动态规划</h2>
<div><p>Tips</p>
<p><strong>状态定义</strong>：</p>
<p>设<code>dp[i][j]</code>代表从数组的<code>[0,i]</code>下标范围内选取若干个正整数（可以是0个） 是否存在一种选取方案使得被选取的正整数的和等于j。初始时，<code>dp</code>中的全部元素都是<code>false</code></p>
<p><strong>求解值</strong>：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>n</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>t</span><span>a</span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.03588em;">g</span><span>e</span><span>t</span><span>]</span></span></span></span></span></p>
<p><strong>状态转移方程</strong>：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:3em;vertical-align:-1.25em;"></span><span><span style="top:0em;"><span>{</span></span><span><span><span><span><span><span style="height:1.69em;"><span style="top:-3.69em;"><span style="height:3.008em;"></span><span><span>d</span><span>p</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>1</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span> </span><span>∣</span><span> </span><span>d</span><span>p</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>1</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>n</span><span>u</span><span>m</span><span>s</span><span>[</span><span>i</span><span>]]</span><span>,</span></span></span><span style="top:-2.25em;"><span style="height:3.008em;"></span><span><span>d</span><span>p</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>1</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span>,</span></span></span></span><span>​</span></span><span><span style="height:1.19em;"><span></span></span></span></span></span><span style="width:1em;"></span><span><span><span><span style="height:1.69em;"><span style="top:-3.69em;"><span style="height:3.008em;"></span><span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2778em;"></span><span>≥</span><span style="margin-right:0.2778em;"></span><span><span>n</span><span>u</span><span>m</span><span>s</span><span>[</span><span>i</span><span>]</span></span></span></span><span style="top:-2.25em;"><span style="height:3.008em;"></span><span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2778em;"></span><span>&lt;</span><span style="margin-right:0.2778em;"></span><span>n</span><span>u</span><span>m</span><span>s</span><span>[</span><span>i</span><span>]</span></span></span></span><span>​</span></span><span><span style="height:1.19em;"><span></span></span></span></span></span></span></span><span></span></span></span></span></span></span></p>
<p><strong>边界条件</strong>：</p>
<ul>
<li>如果不选取任何正整数，则被选取的正整数等于0，因此对于所有 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7804em;vertical-align:-0.136em;"></span><span>0</span><span style="margin-right:0.2778em;"></span><span>≤</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6986em;vertical-align:-0.0391em;"></span><span><span>i</span></span><span style="margin-right:0.2778em;"></span><span>&lt;</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.4306em;"></span><span><span>n</span></span></span></span></span>，都有 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span>[</span><span>0</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6151em;"></span><span>t</span><span style="margin-right:0.02778em;">r</span><span>u</span><span>e</span></span></span></span></li>
<li>当 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6595em;"></span><span>i</span><span style="margin-right:0.2778em;"></span><span>==</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span> 时，只有一个正整数 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>n</span><span>u</span><span>m</span><span>s</span><span>[</span><span>0</span><span>]</span></span></span></span> 可以被选取，因此 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>0</span><span>]</span><span>[</span><span>n</span><span>u</span><span>m</span><span>s</span><span>[</span><span>0</span><span>]]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6151em;"></span><span>t</span><span style="margin-right:0.02778em;">r</span><span>u</span><span>e</span></span></span></span></li>
</ul>
</div>
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>bool</span> <span>canPartition</span><span>(</span>vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> nums<span>)</span> <span>{</span>
        <span>int</span> n <span>=</span> nums<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        <span>int</span> sum <span>=</span> <span>0</span><span>,</span> maxnum <span>=</span> <span>0</span><span>;</span>
        <span>for</span><span>(</span><span>int</span> num <span>:</span> nums<span>)</span><span>{</span>
            maxnum <span>=</span> <span>max</span><span>(</span>maxnum<span>,</span> num<span>)</span><span>;</span>
            sum <span>+=</span> num<span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>sum <span>%</span> <span>2</span> <span>==</span> <span>1</span><span>)</span><span>{</span>
            <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>maxnum <span>></span> <span>(</span>sum <span>/</span> <span>2</span><span>)</span><span>)</span><span>{</span>
            <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        <span>int</span> tar <span>=</span> sum <span>/</span> <span>2</span><span>;</span>
        vector<span>&lt;</span>vector<span>&lt;</span><span>int</span><span>>></span> <span>dp</span><span>(</span>n <span>+</span> <span>1</span><span>,</span> <span><span>vector</span><span><span>&lt;</span><span>int</span><span>></span></span></span><span>(</span>tar <span>+</span> <span>1</span><span>,</span> <span>false</span><span>)</span><span>)</span><span>;</span>
        dp<span>[</span><span>0</span><span>]</span><span>[</span><span>0</span><span>]</span> <span>=</span> <span>true</span><span>;</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> n<span>;</span> i<span>++</span><span>)</span><span>{</span>
            <span>for</span><span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;=</span> tar<span>;</span> j<span>++</span><span>)</span><span>{</span>
                dp<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> dp<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span>j<span>]</span><span>;</span>
                <span>if</span><span>(</span>j <span>>=</span> nums<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>)</span><span>{</span>
                    dp<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>|=</span> dp<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span>j <span>-</span> nums<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>]</span><span>;</span>
                <span>}</span>
                <span>if</span><span>(</span>j <span>==</span> tar<span>)</span><span>{</span>
                    <span>if</span><span>(</span>dp<span>[</span>i<span>]</span><span>[</span>j<span>]</span><span>)</span><span>{</span>
                        <span>return</span> <span>true</span><span>;</span>
                    <span>}</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> <span>false</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>:::</p>
<p>::::</p>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/solution/ti-gong-wo-de-yi-ge-xie-dong-tai-gui-hua-44n4/" target="_blank" rel="noopener noreferrer">提供我的一个写动态规划问题的思路 - 分割等和子集 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/solution/fen-ge-deng-he-zi-ji-by-leetcode-solution/" target="_blank" rel="noopener noreferrer">分割等和子集 - 分割等和子集 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/416.png" type="image/png"/>
    </item>
    <item>
      <title>42.接雨水</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/42.%E6%8E%A5%E9%9B%A8%E6%B0%B4/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/42.%E6%8E%A5%E9%9B%A8%E6%B0%B4/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">42.接雨水</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_42-接雨水"> 42.接雨水</h1>
<p>https://leetcode-cn.com/problems/trapping-rain-water/</p>
<h2 id="方法一-中心扩散"> 方法一：中心扩散</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code>
</code></pre>
<div><span>1</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-单调栈"> 方法二：单调栈</h2>
<div><p>Tips</p>
</div>
<div><pre><code>
</code></pre>
<div><span>1</span><br></div></div><p>:::</p>
<p>::::</p>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/trapping-rain-water/solution/dan-diao-zhan-jie-jue-jie-yu-shui-wen-ti-by-sweeti/" target="_blank" rel="noopener noreferrer">单调栈O(n)解决，动图预警🎶🎵 - 接雨水 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>437.路径总和 III</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/437.%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C%20III/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/437.%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C%20III/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">437.路径总和 III</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_437-路径总和-iii"> 437.路径总和 III</h1>
<p>https://leetcode-cn.com/problems/path-sum-iii/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/437.png" alt="" loading="lazy"></p>
<h2 id="方法一-递归"> 方法一：递归</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> <span>pathSumStartWithRoot</span><span>(</span>TreeNode<span>*</span> root<span>,</span> <span>int</span> sum<span>)</span><span>{</span>
        <span>if</span><span>(</span>root <span>==</span> <span>NULL</span><span>)</span> <span>return</span> <span>0</span><span>;</span>
        <span>int</span> ret <span>=</span> <span>0</span><span>;</span>
        <span>if</span><span>(</span>root<span>-></span>val <span>==</span> sum<span>)</span> ret<span>++</span><span>;</span>
        ret <span>+=</span> <span>pathSumStartWithRoot</span><span>(</span>root<span>-></span>left<span>,</span> sum <span>-</span> root<span>-></span>val<span>)</span> <span>+</span> <span>pathSumStartWithRoot</span><span>(</span>root<span>-></span>right<span>,</span> sum <span>-</span> root<span>-></span>val<span>)</span><span>;</span>
        <span>return</span> ret<span>;</span>
    <span>}</span>
    <span>int</span> <span>pathSum</span><span>(</span>TreeNode<span>*</span> root<span>,</span> <span>int</span> sum<span>)</span> <span>{</span>
        <span>if</span><span>(</span>root <span>==</span> <span>NULL</span><span>)</span><span>{</span>
            <span>return</span> <span>0</span><span>;</span>
        <span>}</span>
        <span>int</span> ret <span>=</span> <span>pathSumStartWithRoot</span><span>(</span>root<span>,</span> sum<span>)</span> <span>+</span> <span>pathSum</span><span>(</span>root<span>-></span>left<span>,</span> sum<span>)</span> <span>+</span> <span>pathSum</span><span>(</span>root<span>-></span>right<span>,</span> sum<span>)</span><span>;</span>
        <span>return</span> ret<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-前缀和"> 方法二：前缀和</h2>
<div><p>Tips</p>
<p><strong>解题思路</strong>：</p>
<p><code>dfs</code>先序遍历二叉树</p>
<p>记录下根节点 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6151em;"></span><span>roo</span><span>t</span></span></span></span> 到当前节点 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.1944em;"></span><span>p</span></span></span></span> 的路径上除当前节点以外所有节点的前缀和</p>
<p>在已保存的路径前缀和中查找是否存在前缀和刚好等于当前节点到根节点的前缀</p>
<p>和 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>c</span><span>u</span><span style="margin-right:0.02778em;">rr</span></span></span></span> 减去 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8778em;vertical-align:-0.1944em;"></span><span>t</span><span>a</span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.03588em;">g</span><span>e</span><span style="margin-right:0.05764em;">tS</span><span>u</span><span>m</span></span></span></span></p>
<p>如果从根节点 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6151em;"></span><span>roo</span><span>t</span></span></span></span> 到当前节点 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6944em;"></span><span>n</span><span>o</span><span>d</span><span>e</span></span></span></span> 的路径中存在节点 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.854em;vertical-align:-0.1944em;"></span><span>p</span><span>i</span></span></span></span> 到根节点 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6151em;"></span><span>roo</span><span>t</span></span></span></span> 的前缀和为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6667em;vertical-align:-0.0833em;"></span><span>c</span><span>u</span><span style="margin-right:0.02778em;">rr</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.8778em;vertical-align:-0.1944em;"></span><span>t</span><span>a</span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.03588em;">g</span><span>e</span><span style="margin-right:0.05764em;">tS</span><span>u</span><span>m</span></span></span></span>，则节点 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6389em;vertical-align:-0.2083em;"></span><span><span>p</span><span><span><span><span style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>i</span><span>+</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 到 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6944em;"></span><span>n</span><span>o</span><span>d</span><span>e</span></span></span></span> 的路径上所有节点的和一定为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8778em;vertical-align:-0.1944em;"></span><span>t</span><span>a</span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.03588em;">g</span><span>e</span><span style="margin-right:0.05764em;">tS</span><span>u</span><span>m</span></span></span></span>，则路径数目加1</p>
<p><strong>变量定义</strong>：</p>
<p><code>prefix</code>：key是前缀和，val是该前缀和的节点数量，记录数量是因为有可能出现重复前缀和的可能。</p>
<p><code>targetSum</code>：节点值的目标总和</p>
<p><code>curr</code>：根节点root到当前节点p的路径上除当前节点以外所有节点的前缀和</p>
<p><strong>理解难点</strong>：</p>
<ol>
<li>前缀和初始化代码<code>prefix[0]=1</code>的含义？</li>
</ol>
<blockquote>
<p>以根节点开始的路径合法，可以认为有一个虚拟的根节点的父节点，其前缀和为0</p>
</blockquote>
<ol start="2">
<li>回溯代码<code>prefix[curr]--</code>的含义？</li>
</ol>
<blockquote>
<p>由于我们只能统计往下的路径，但是树的遍历会同时搜索两个方向的子树。因此我们应当在搜索完以某个节点为根的左右子树之后，应当回溯地将路径总和从哈希表中删除，防止统计到跨越两个方向的路径。</p>
<p>当我们讨论两个节点的前缀和差值时，有一个前提：一个节点必须是另一个节点的祖先节点状态恢复代码的作用就是： 在遍历完一个节点的所有子节点后，将其从map中除去。</p>
</blockquote>
</div>
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    unordered_map<span>&lt;</span><span>long</span> <span>long</span><span>,</span> <span>int</span><span>></span> prefix<span>;</span>
    <span>int</span> <span>dfs</span><span>(</span>TreeNode<span>*</span> root<span>,</span> <span>long</span> <span>long</span> curr<span>,</span> <span>int</span> targetSum<span>)</span><span>{</span>
        <span>if</span><span>(</span>root <span>==</span> <span>nullptr</span><span>)</span><span>{</span>
            <span>return</span> <span>0</span><span>;</span>
        <span>}</span>

        <span>//ret代表和等于targetSum的路径的数目</span>
        <span>int</span> ret <span>=</span> <span>0</span><span>;</span>    
        curr <span>+=</span> root<span>-></span>val<span>;</span>

        <span>if</span><span>(</span>prefix<span>.</span><span>count</span><span>(</span>curr <span>-</span> targetSum<span>)</span><span>)</span><span>{</span>
            ret <span>=</span> prefix<span>[</span>curr <span>-</span> targetSum<span>]</span><span>;</span>
        <span>}</span>

        prefix<span>[</span>curr<span>]</span><span>++</span><span>;</span>
        ret <span>+=</span> <span>dfs</span><span>(</span>root<span>-></span>left<span>,</span> curr<span>,</span> targetSum<span>)</span><span>;</span>
        ret <span>+=</span> <span>dfs</span><span>(</span>root<span>-></span>right<span>,</span> curr<span>,</span> targetSum<span>)</span><span>;</span>
        prefix<span>[</span>curr<span>]</span><span>--</span><span>;</span>

        <span>return</span> ret<span>;</span>
    <span>}</span>

    <span>int</span> <span>pathSum</span><span>(</span>TreeNode<span>*</span> root<span>,</span> <span>int</span> targetSum<span>)</span> <span>{</span>
        prefix<span>[</span><span>0</span><span>]</span> <span>=</span> <span>1</span><span>;</span>
        <span>return</span> <span>dfs</span><span>(</span>root<span>,</span> <span>0</span><span>,</span> targetSum<span>)</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>:::</p>
<p>::::</p>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/path-sum-iii/solution/lu-jing-zong-he-iii-by-leetcode-solution-z9td/" target="_blank" rel="noopener noreferrer">路径总和 III - 路径总和 III - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/path-sum-iii/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-q-usa7/" target="_blank" rel="noopener noreferrer">【宫水三叶】一题双解 :「DFS」&amp;「前缀和」 - 路径总和 III - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/path-sum-iii/solution/dui-qian-zhui-he-jie-fa-de-yi-dian-jie-s-dey6/" target="_blank" rel="noopener noreferrer">对前缀和解法的一点解释 - 路径总和 III - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/437.png" type="image/png"/>
    </item>
    <item>
      <title>494.目标和</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/494.%E7%9B%AE%E6%A0%87%E5%92%8C/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/494.%E7%9B%AE%E6%A0%87%E5%92%8C/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">494.目标和</source>
      <pubDate>Wed, 09 Mar 2022 14:22:11 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_494-目标和"> 494.目标和</h1>
<p>https://leetcode-cn.com/problems/target-sum/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/494.png" alt="" loading="lazy"></p>
<h2 id="方法一-递归回溯"> 方法一：递归回溯</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p>数据范围只有 2020，而且每个数据只有 +/-+/− 两种选择，因此可以直接使用 DFS 进行「爆搜」</p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> cnt <span>=</span> <span>0</span><span>;</span>
    <span>void</span> <span>dfs</span><span>(</span><span>int</span> sum<span>,</span> <span>int</span> index<span>,</span> vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> nums<span>,</span> <span>int</span> target<span>)</span><span>{</span>
        <span>if</span><span>(</span>index <span>==</span> nums<span>.</span><span>size</span><span>(</span><span>)</span><span>)</span><span>{</span>
            <span>if</span><span>(</span>sum <span>==</span> target<span>)</span><span>{</span>
                cnt<span>++</span><span>;</span>
            <span>}</span>
            <span>return</span><span>;</span>
        <span>}</span>
        <span>dfs</span><span>(</span>sum <span>+</span> nums<span>[</span>index<span>]</span><span>,</span> index <span>+</span> <span>1</span><span>,</span> nums<span>,</span> target<span>)</span><span>;</span>
        <span>dfs</span><span>(</span>sum <span>-</span> nums<span>[</span>index<span>]</span><span>,</span> index <span>+</span> <span>1</span><span>,</span> nums<span>,</span> target<span>)</span><span>;</span>
    <span>}</span>
    <span>int</span> <span>findTargetSumWays</span><span>(</span>vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> nums<span>,</span> <span>int</span> target<span>)</span> <span>{</span>
        <span>dfs</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> nums<span>,</span> target<span>)</span><span>;</span>
        <span>return</span> cnt<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h3 id="复杂度分析"> 复杂度分析</h3>
<ol>
<li>时间复杂度：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>2</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span></span></span></span></span><span>)</span></span></span></span></li>
<li>空间复杂度：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>1</span><span>)</span></span></span></span></li>
</ol>
<h2 id="方法二-动态规划"> 方法二：动态规划</h2>
<h3 id="思路分析-2"> 思路分析</h3>
<div><p>Tips</p>
<p><strong>状态定义</strong>：</p>
<p>设<code>dp[i][j]</code>表示考虑前<code>i</code>个数，当前计算结果为<code>j</code>的方案数</p>
<p><strong>状态转移方程</strong>：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>n</span><span>u</span><span>m</span><span>s</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]]</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>n</span><span>u</span><span>m</span><span>s</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]]</span></span></span></span></span></p>
<p><strong>边界条件</strong>：</p>
<p>代表不考虑任何数，凑出计算结果为 0 的方案数为 1 种</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>[</span><span>0</span><span>]</span><span>[</span><span>0</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span></span></p>
<p>这里还需要考虑维度范围：</p>
<p>第一维为物品数量：范围为<code>[0,nums.size()]</code></p>
<p>第二维为中间结果：令<code>s</code>为所有<code>nums</code>元素的总和，则中间结果的范围为<code>[-s,s]</code></p>
<h3 id="参考代码-2"> 参考代码</h3>
</div>
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>/*
    状态定义:
    f[i][j]代表考虑前i个数，当前计算结果为j的方案数
    状态转移方程:
    f[i][j] = f[i - 1][j - nums[i - 1]] + f[i - 1][j + nums[i - 1]]
    在转移时，对第二维度的使用做一个 s 的右偏移，以确保「负权值」也能够被合理计算/存储。
    边界条件:
    f[0][0]= 1（代表不考虑任何数，凑出计算结果为 0 的方案数为 1 种
    */</span>
    <span>int</span> <span>findTargetSumWays</span><span>(</span>vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> nums<span>,</span> <span>int</span> target<span>)</span> <span>{</span>
        <span>int</span> n <span>=</span> nums<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        <span>int</span> s <span>=</span> <span>0</span><span>;</span>  <span>//s为所有nums元素的总和</span>
        <span>for</span><span>(</span><span>int</span> i <span>:</span> nums<span>)</span><span>{</span>
            s <span>+=</span> <span>abs</span><span>(</span>i<span>)</span><span>;</span>
        <span>}</span>
        <span>if</span><span>(</span><span>abs</span><span>(</span>target<span>)</span> <span>></span> s<span>)</span>
            <span>return</span> <span>0</span><span>;</span>
        vector<span>&lt;</span>vector<span>&lt;</span><span>int</span><span>>></span> <span>f</span><span>(</span>n <span>+</span> <span>1</span><span>,</span> <span><span>vector</span><span><span>&lt;</span><span>int</span><span>></span></span></span><span>(</span><span>2</span> <span>*</span> s <span>+</span> <span>1</span><span>)</span><span>)</span><span>;</span>
        f<span>[</span><span>0</span><span>]</span><span>[</span>s<span>]</span> <span>=</span> <span>1</span><span>;</span>    <span>//f[0][s] = 1</span>
        <span>// 第一维为物品数量</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> n<span>;</span> i<span>++</span><span>)</span><span>{</span>
            <span>int</span> x <span>=</span> nums<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>;</span>
            <span>// 第二维为中间结果</span>
            <span>// 中间结果的范围为[-s,s]</span>
            <span>for</span><span>(</span><span>int</span> j <span>=</span> <span>-</span>s<span>;</span> j <span>&lt;=</span> s<span>;</span> j<span>++</span><span>)</span><span>{</span>
                <span>if</span><span>(</span><span>(</span>j <span>-</span> x<span>)</span> <span>+</span> s <span>>=</span> <span>0</span><span>)</span><span>{</span>
                    f<span>[</span>i<span>]</span><span>[</span>j <span>+</span> s<span>]</span> <span>+=</span> f<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span><span>(</span>j <span>-</span> x<span>)</span> <span>+</span> s<span>]</span><span>;</span>
                <span>}</span>
                <span>if</span><span>(</span><span>(</span>j <span>+</span> x<span>)</span> <span>+</span> s <span>&lt;=</span> <span>2</span> <span>*</span> s<span>)</span><span>{</span>
                    f<span>[</span>i<span>]</span><span>[</span>j <span>+</span> s<span>]</span> <span>+=</span> f<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span><span>(</span>j <span>+</span> x<span>)</span> <span>+</span> s<span>]</span><span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> f<span>[</span>n<span>]</span><span>[</span>target <span>+</span> s<span>]</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><p>:::</p>
<p>::::</p>
<h3 id="复杂度分析-2"> 复杂度分析</h3>
<ol>
<li>时间复杂度：</li>
<li>空间复杂度：</li>
</ol>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/target-sum/solution/gong-shui-san-xie-yi-ti-si-jie-dfs-ji-yi-et5b/" target="_blank" rel="noopener noreferrer">【宫水三叶】一题四解 : 「DFS」&amp;「记忆化搜索」&amp;「全量 DP」&amp;「优化 DP」 - 目标和 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/target-sum/solution/494-mu-biao-he-by-ming-zhi-shan-you-m9rfkvkdad/" target="_blank" rel="noopener noreferrer">494. 目标和 - 目标和 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/target-sum/solution/dong-tai-gui-hua-si-kao-quan-guo-cheng-by-keepal/" target="_blank" rel="noopener noreferrer">动态规划思考全过程 - 目标和 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/494.png" type="image/png"/>
    </item>
    <item>
      <title>621.任务调度器</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/621.%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/621.%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">621.任务调度器</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_621-任务调度器"> 621.任务调度器</h1>
<p>https://leetcode-cn.com/problems/task-scheduler/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/621.png" alt="" loading="lazy"></p>
<h2 id="方法一-桶排序"> 方法一：桶排序</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> <span>leastInterval</span><span>(</span>vector<span>&lt;</span><span>char</span><span>></span><span>&amp;</span> tasks<span>,</span> <span>int</span> n<span>)</span> <span>{</span>
        <span>int</span> len <span>=</span> tasks<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        vector<span>&lt;</span><span>int</span><span>></span> <span>vec</span><span>(</span><span>26</span><span>)</span><span>;</span>
        <span>for</span><span>(</span><span>char</span> ch <span>:</span> tasks<span>)</span><span>{</span>
            <span>++</span>vec<span>[</span>ch <span>-</span> <span>'A'</span><span>]</span><span>;</span>
        <span>}</span>
        <span>sort</span><span>(</span>vec<span>.</span><span>begin</span><span>(</span><span>)</span><span>,</span> vec<span>.</span><span>end</span><span>(</span><span>)</span><span>,</span> <span><span>greater</span><span><span>&lt;</span><span>int</span><span>></span></span></span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>int</span> cnt <span>=</span> <span>1</span><span>;</span>
        <span>// 统计任务数量并列最多的任务有多少个，即最后一个桶的任务数X</span>
        <span>while</span><span>(</span>cnt <span>&lt;</span> vec<span>.</span><span>size</span><span>(</span><span>)</span> <span>&amp;&amp;</span> vec<span>[</span>cnt<span>]</span> <span>==</span> vec<span>[</span><span>0</span><span>]</span><span>)</span><span>{</span>
            cnt<span>++</span><span>;</span>
        <span>}</span>
        <span>return</span> <span>max</span><span>(</span>len<span>,</span> cnt <span>+</span> <span>(</span>n <span>+</span> <span>1</span><span>)</span> <span>*</span> <span>(</span>vec<span>[</span><span>0</span><span>]</span> <span>-</span> <span>1</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-优先队列"> 方法二：优先队列</h2>
<div><p>Tips</p>
<p><strong>选择不在冷却中并且剩余执行次数最多的任务优先执行</strong>。</p>
<ul>
<li>每执行完一个任务，将剩下的所有任务按照执行时间升序排列，剩余执行次数降序排列。使用一个优先队列来维护所有任务的优先级。</li>
<li>取出队首任务，判断当前任务的执行时间是否小于当前时间
<ul>
<li>小于则判断剩余执行次数是否大于1
<ul>
<li>大于则剩余执行次数-1，计算出下一次执行时间，将新的任务加入队列</li>
</ul>
</li>
<li>否则当前时间+1</li>
</ul>
</li>
</ul>
<p><strong>下一次执行时间</strong>：两个相同任务之间必须有 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>n</span></span></span></span> 的冷却，因此每个任务执行完成之后需要等到 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6667em;vertical-align:-0.0833em;"></span><span>n</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span> 个时间单位之后才能执行，即 <code>task.nextTime = task.nextTime + n + 1</code></p>
<p><strong>剩余执行次数</strong>：如果大于1则等于当前执行次数-1，即<code>task.restTaskNum=task.restTaskNum-1</code></p>
</div>
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span> 
    <span>class</span> <span>Task</span><span>{</span>
        <span>public</span><span>:</span>
            <span>int</span> nextTime<span>;</span>
            <span>int</span> restTaskNum<span>;</span>
            <span>Task</span><span>(</span><span>int</span> nextTime<span>,</span> <span>int</span> restTaskNum<span>)</span><span>{</span>
                <span>this</span><span>-></span>nextTime <span>=</span> nextTime<span>;</span>
                <span>this</span><span>-></span>restTaskNum <span>=</span> restTaskNum<span>;</span>
            <span>}</span>
            <span>friend</span> <span>bool</span> <span>operator</span> <span>&lt;</span> <span>(</span>Task t1<span>,</span> Task t2<span>)</span><span>{</span>
                <span>// 按照下一次执行时间升序，任务数降序</span>
                <span>if</span><span>(</span>t1<span>.</span>nextTime <span>==</span> t2<span>.</span>nextTime<span>)</span><span>{</span>
                    <span>return</span> t1<span>.</span>restTaskNum <span>&lt;</span> t2<span>.</span>restTaskNum<span>;</span>
                <span>}</span>
                <span>return</span> t1<span>.</span>nextTime <span>></span> t2<span>.</span>nextTime<span>;</span>
            <span>}</span>
    <span>}</span><span>;</span>

    <span>int</span> <span>leastInterval</span><span>(</span>vector<span>&lt;</span><span>char</span><span>></span><span>&amp;</span> tasks<span>,</span> <span>int</span> n<span>)</span> <span>{</span>
        vector<span>&lt;</span><span>int</span><span>></span> <span>TaskNum</span><span>(</span><span>26</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        <span>for</span><span>(</span><span>char</span> ch <span>:</span> tasks<span>)</span><span>{</span>
            <span>++</span>TaskNum<span>[</span>ch <span>-</span> <span>'A'</span><span>]</span><span>;</span>
        <span>}</span>    
        <span>// 定义优先队列</span>
        priority_queue<span>&lt;</span>Task<span>,</span> vector<span>&lt;</span>Task<span>>></span> pq<span>;</span>
        <span>// 初始化优先队列</span>
        <span>for</span><span>(</span><span>int</span> tasknum <span>:</span> TaskNum<span>)</span><span>{</span>
            <span>if</span><span>(</span>tasknum <span>==</span> <span>0</span><span>)</span>
                <span>continue</span><span>;</span>
            Task <span>newTask</span><span>(</span><span>0</span><span>,</span> tasknum<span>)</span><span>;</span>
            pq<span>.</span><span>push</span><span>(</span>newTask<span>)</span><span>;</span>
        <span>}</span>
        <span>// 计算任务调度</span>
        <span>int</span> time <span>=</span> <span>0</span><span>;</span>
        <span>while</span><span>(</span><span>!</span>pq<span>.</span><span>empty</span><span>(</span><span>)</span><span>)</span><span>{</span>
            <span>auto</span> top <span>=</span> pq<span>.</span><span>top</span><span>(</span><span>)</span><span>;</span>
            <span>if</span><span>(</span>top<span>.</span>nextTime <span>&lt;=</span> time<span>)</span><span>{</span>
                pq<span>.</span><span>pop</span><span>(</span><span>)</span><span>;</span>
                <span>if</span><span>(</span>top<span>.</span>restTaskNum <span>></span> <span>1</span><span>)</span><span>{</span>
                    top<span>.</span>restTaskNum<span>--</span><span>;</span>
                    top<span>.</span>nextTime <span>=</span> top<span>.</span>nextTime <span>+</span> n <span>+</span> <span>1</span><span>;</span>
                    pq<span>.</span><span>push</span><span>(</span>top<span>)</span><span>;</span>
                <span>}</span>
            <span>}</span>
            time<span>++</span><span>;</span>
        <span>}</span>

        <span>return</span> time<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><p>:::</p>
<p>::::</p>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/task-scheduler/solution/tong-zi-by-popopop/" target="_blank" rel="noopener noreferrer">【任务调度器】C++ 桶子_配图理解 - 任务调度器 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/task-scheduler/solution/python-xiang-jie-by-jalan/" target="_blank" rel="noopener noreferrer">Python 详解 - 任务调度器 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/task-scheduler/solution/by-sixiermu-ahl4/" target="_blank" rel="noopener noreferrer">最小堆、小顶堆：剩余次数和冷却时间 24ms 超官方一 - 任务调度器 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/621.png" type="image/png"/>
    </item>
    <item>
      <title>647.回文子串</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">647.回文子串</source>
      <pubDate>Wed, 23 Mar 2022 08:11:36 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_647-回文子串"> 647.回文子串</h1>
<p>https://leetcode-cn.com/problems/sort-list/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/148.png" alt="" loading="lazy"></p>
<h2 id="方法一-自顶向下归并排序"> 方法一：自顶向下归并排序</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p><strong>递归过程</strong>：</p>
<ol>
<li><strong>分割</strong>：找到链表的<code>中间节点</code>，以<code>中点</code>为分界，将链表拆分成两个子链表，寻找两个子链表的<code>中点</code>可以用快慢指针的方法</li>
<li><strong>递归</strong>：然后对两个子链表分别排序</li>
<li><strong>合并</strong>：将两个排序后的子链表合并，得到完整的排序后的链表</li>
</ol>
<p><strong>递归终止条件</strong>：</p>
<p>链表的节点个数小于或等于1，即当链表为空或者链表只包含1个节点时，不需要对链表进行拆分和排序。</p>
<p>在分割操作中，<strong>快慢指针的方法</strong>有两种：</p>
<p><strong>方法1</strong>：指向中间节点的后一个节点</p>
<ol>
<li>初始时快指针<code>fast</code>和慢指针<code>slow</code>初始时都指向头结点</li>
<li>快指针<code>fast</code>每次移动2步，慢指针<code>slow</code>每次移动1步</li>
<li>当快指针<code>fast</code>到达链表末尾时，慢指针<code>slow</code>指向的链表节点即为链表的中点</li>
</ol>
<p><strong>方法2</strong>：指向中间节点的前一个节点</p>
<ol>
<li>初始时快指针<code>fast</code>指向头结点的下一个节点，慢指针<code>slow</code>指向头结点</li>
<li>快指针<code>fast</code>每次移动2步，慢指针<code>slow</code>每次移动1步</li>
<li>当快指针<code>fast</code>到达链表末尾时，慢指针<code>slow</code>指向的链表节点即为链表的中点（其中奇数个节点直接找到最中间的那个点，偶数个节点找到中心两个节点左边的节点）</li>
</ol>
<p>以偶数个节点链表<code>[4,2,1,3]</code>为例，方法1中的慢指针<code>slow</code>最终指向的中点是1，方法2中的慢指针<code>slow</code>最终指向的中点是2</p>
<p>以奇数个节点链表<code>[-1,5,3,4,0]</code>为例，方法1中的慢指针<code>slow</code>分割操作后指向的中点是3，方法2中的慢指针<code>slow</code>分割操作后指向的中点是3</p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    ListNode<span>*</span> <span>sortList</span><span>(</span>ListNode<span>*</span> head<span>)</span> <span>{</span>
        <span>return</span> <span>sortList</span><span>(</span>head<span>,</span> <span>nullptr</span><span>)</span><span>;</span>
    <span>}</span>

    ListNode<span>*</span> <span>sortList</span><span>(</span>ListNode<span>*</span> head<span>,</span> ListNode<span>*</span> tail<span>)</span><span>{</span>
        <span>if</span><span>(</span>head <span>==</span> <span>nullptr</span><span>)</span><span>{</span>
            <span>return</span> head<span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>head<span>-></span>next <span>==</span> tail<span>)</span><span>{</span>
            head<span>-></span>next <span>=</span> <span>nullptr</span><span>;</span>
            <span>return</span> head<span>;</span>
        <span>}</span>
        <span>// 慢指针每次移动2步，慢指针每次移动1步</span>
        ListNode<span>*</span> slow <span>=</span> head<span>,</span> <span>*</span>fast <span>=</span> head<span>;</span>
        <span>// 找到链表的中点</span>
        <span>while</span><span>(</span>fast <span>!=</span> tail<span>)</span><span>{</span>
            slow <span>=</span> slow<span>-></span>next<span>;</span>
            fast <span>=</span> fast<span>-></span>next<span>;</span>
            <span>if</span><span>(</span>fast <span>!=</span> tail<span>)</span><span>{</span>
                fast <span>=</span> fast<span>-></span>next<span>;</span>
            <span>}</span>
        <span>}</span>
        ListNode<span>*</span> mid <span>=</span> slow<span>;</span>
        <span>// 对两个排序后的子链表合并</span>
        <span>return</span> <span>merge</span><span>(</span><span>sortList</span><span>(</span>head<span>,</span> mid<span>)</span><span>,</span> <span>sortList</span><span>(</span>mid<span>,</span> tail<span>)</span><span>)</span><span>;</span>
    <span>}</span>
    <span>// 归并排序</span>
    ListNode<span>*</span> <span>merge</span><span>(</span>ListNode<span>*</span> head1<span>,</span> ListNode<span>*</span> head2<span>)</span><span>{</span>
        ListNode<span>*</span> dummy <span>=</span> <span>new</span> <span>ListNode</span><span>(</span><span>0</span><span>)</span><span>;</span>
        ListNode<span>*</span> ret <span>=</span> dummy<span>;</span>
        <span>while</span><span>(</span>head1 <span>&amp;&amp;</span> head2<span>)</span><span>{</span>
            <span>if</span><span>(</span>head1<span>-></span>val <span>&lt;</span> head2<span>-></span>val<span>)</span><span>{</span>
                dummy<span>-></span>next <span>=</span> head1<span>;</span>
                head1 <span>=</span> head1<span>-></span>next<span>;</span>
            <span>}</span><span>else</span><span>{</span>
                dummy<span>-></span>next <span>=</span> head2<span>;</span>
                head2 <span>=</span> head2<span>-></span>next<span>;</span>
            <span>}</span>
            dummy <span>=</span> dummy<span>-></span>next<span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>head1<span>)</span><span>{</span>
            dummy<span>-></span>next <span>=</span> head1<span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>head2<span>)</span><span>{</span>
            dummy<span>-></span>next <span>=</span> head2<span>;</span>
        <span>}</span>
        <span>return</span> ret<span>-></span>next<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div></CodeGroupItem>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    ListNode<span>*</span> <span>sortList</span><span>(</span>ListNode<span>*</span> head<span>)</span> <span>{</span>
        <span>// 链表为空或者只剩下一个节点时，直接返回head</span>
        <span>if</span><span>(</span>head <span>==</span> <span>nullptr</span> <span>||</span> head<span>-></span>next <span>==</span> <span>nullptr</span><span>)</span><span>{</span>
            <span>return</span> head<span>;</span>
        <span>}</span>
        ListNode<span>*</span> slow <span>=</span> head<span>,</span> <span>*</span>fast <span>=</span> head<span>-></span>next<span>;</span>
        <span>while</span><span>(</span>fast <span>!=</span> <span>nullptr</span> <span>&amp;&amp;</span> fast<span>-></span>next <span>!=</span> <span>nullptr</span><span>)</span><span>{</span>
            slow <span>=</span> slow<span>-></span>next<span>;</span>
            fast <span>=</span> fast<span>-></span>next<span>-></span>next<span>;</span>
        <span>}</span>
        ListNode<span>*</span> tmp <span>=</span> slow<span>-></span>next<span>;</span>
        slow<span>-></span>next <span>=</span> <span>nullptr</span><span>;</span>
        ListNode<span>*</span> left <span>=</span> <span>sortList</span><span>(</span>head<span>)</span><span>;</span>
        ListNode<span>*</span> right <span>=</span> <span>sortList</span><span>(</span>tmp<span>)</span><span>;</span>
        <span>return</span> <span>merge</span><span>(</span>left<span>,</span> right<span>)</span><span>;</span>
    <span>}</span>
    ListNode<span>*</span> <span>merge</span><span>(</span>ListNode<span>*</span> head1<span>,</span> ListNode<span>*</span> head2<span>)</span><span>{</span>
        ListNode<span>*</span> ret <span>=</span> <span>new</span> <span>ListNode</span><span>(</span><span>0</span><span>)</span><span>;</span>
        ListNode<span>*</span> dummy <span>=</span> ret<span>;</span>
        <span>while</span><span>(</span>head1 <span>&amp;&amp;</span> head2<span>)</span><span>{</span>
            <span>if</span><span>(</span>head1<span>-></span>val <span>&lt;</span> head2<span>-></span>val<span>)</span><span>{</span>
                dummy<span>-></span>next <span>=</span> head1<span>;</span>
                head1 <span>=</span> head1<span>-></span>next<span>;</span>
            <span>}</span><span>else</span><span>{</span>
                dummy<span>-></span>next <span>=</span> head2<span>;</span>
                head2 <span>=</span> head2<span>-></span>next<span>;</span>
            <span>}</span>
            dummy <span>=</span> dummy<span>-></span>next<span>;</span>
        <span>}</span>
        dummy<span>-></span>next <span>=</span> head1 <span>?</span> head1 <span>:</span> head2<span>;</span>
        <span>return</span> ret<span>-></span>next<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-自底向上归并排序"> 方法二：自底向上归并排序</h2>
<div><p>Tips</p>
</div>
<div><pre><code>
</code></pre>
<div><span>1</span><br></div></div><p>:::</p>
<p>::::</p>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/sort-list/solution/pai-xu-lian-biao-by-leetcode-solution/" target="_blank" rel="noopener noreferrer">排序链表 - 排序链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/sort-list/solution/sort-list-gui-bing-pai-xu-lian-biao-by-jyd/" target="_blank" rel="noopener noreferrer">Sort List （归并排序链表） - 排序链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/148.png" type="image/png"/>
    </item>
    <item>
      <title>64.最小路径和</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/64.%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/64.%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">64.最小路径和</source>
      <pubDate>Fri, 25 Feb 2022 14:07:08 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_64-最小路径和"> 64.最小路径和</h1>
<p>https://leetcode-cn.com/problems/minimum-path-sum/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/64.png" alt="" loading="lazy"></p>
<h2 id="方法一-动态规划"> 方法一：动态规划</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p>状态定义：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span>表示从左上角出发到 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>i</span><span>,</span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.05724em;">j</span><span>)</span></span></span></span> 位置的最小路径和</p>
<p>状态转移方程：</p>
<p>当<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6986em;vertical-align:-0.0391em;"></span><span>i</span><span style="margin-right:0.2778em;"></span><span>&gt;</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span>且<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.854em;vertical-align:-0.1944em;"></span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span>时，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span>[</span><span>0</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span>0</span><span>]</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>d</span><span>[</span><span>i</span><span>]</span><span>[</span><span>0</span><span>]</span></span></span></span></p>
<p>当<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6595em;"></span><span>i</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span>且<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.854em;vertical-align:-0.1944em;"></span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2778em;"></span><span>&gt;</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span>时，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>0</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>0</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>d</span><span>[</span><span>0</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span></p>
<p>当<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6986em;vertical-align:-0.0391em;"></span><span>i</span><span style="margin-right:0.2778em;"></span><span>&gt;</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span>且<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.854em;vertical-align:-0.1944em;"></span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2778em;"></span><span>&gt;</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span>时，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>min</span><span>(</span><span>d</span><span>p</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span>,</span><span style="margin-right:0.1667em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>])</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>d</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span></p>
<p>状态边界</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>0</span><span>]</span><span>[</span><span>0</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>d</span><span>[</span><span>0</span><span>]</span><span>[</span><span>0</span><span>]</span></span></span></span></p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>/*
第一行和第一列的值在循环外提前初始化
*/</span>
<span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> <span>minPathSum</span><span>(</span>vector<span>&lt;</span>vector<span>&lt;</span><span>int</span><span>>></span><span>&amp;</span> grid<span>)</span> <span>{</span>
        <span>int</span> m <span>=</span> grid<span>.</span><span>size</span><span>(</span><span>)</span><span>,</span> n <span>=</span> grid<span>[</span><span>0</span><span>]</span><span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        vector<span>&lt;</span>vector<span>&lt;</span><span>int</span><span>>></span> <span>dp</span><span>(</span>m<span>,</span> <span><span>vector</span><span><span>&lt;</span><span>int</span><span>></span></span></span><span>(</span>n<span>)</span><span>)</span><span>;</span>
        <span>// 初始化边界值</span>
        dp<span>[</span><span>0</span><span>]</span><span>[</span><span>0</span><span>]</span> <span>=</span> grid<span>[</span><span>0</span><span>]</span><span>[</span><span>0</span><span>]</span><span>;</span>
        <span>// 第一列的值</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> m<span>;</span> i<span>++</span><span>)</span><span>{</span>
            dp<span>[</span>i<span>]</span><span>[</span><span>0</span><span>]</span> <span>=</span> dp<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span><span>0</span><span>]</span> <span>+</span> grid<span>[</span>i<span>]</span><span>[</span><span>0</span><span>]</span><span>;</span>
        <span>}</span>
        <span>// 第一行的值</span>
        <span>for</span><span>(</span><span>int</span> j <span>=</span> <span>1</span><span>;</span> j <span>&lt;</span> n<span>;</span> j<span>++</span><span>)</span><span>{</span>
            dp<span>[</span><span>0</span><span>]</span><span>[</span>j<span>]</span> <span>=</span> grid<span>[</span><span>0</span><span>]</span><span>[</span>j<span>]</span> <span>+</span> dp<span>[</span><span>0</span><span>]</span><span>[</span>j <span>-</span> <span>1</span><span>]</span><span>;</span>
        <span>}</span>

        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> m<span>;</span> i<span>++</span><span>)</span><span>{</span>
            <span>for</span><span>(</span><span>int</span> j <span>=</span> <span>1</span><span>;</span> j <span>&lt;</span> n<span>;</span> j<span>++</span><span>)</span><span>{</span>
                dp<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> <span>min</span><span>(</span>dp<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span>j<span>]</span><span>,</span> dp<span>[</span>i<span>]</span><span>[</span>j <span>-</span> <span>1</span><span>]</span><span>)</span> <span>+</span> grid<span>[</span>i<span>]</span><span>[</span>j<span>]</span><span>;</span>
            <span>}</span>
        <span>}</span>

        <span>return</span> dp<span>[</span>m <span>-</span> <span>1</span><span>]</span><span>[</span>n <span>-</span> <span>1</span><span>]</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div></CodeGroupItem>
<CodeGroupItem title="c++" active>
<div><pre><code><span>/*
第一行和第一列的值在循环的同时进行初始化
*/</span>
<span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> <span>minPathSum</span><span>(</span>vector<span>&lt;</span>vector<span>&lt;</span><span>int</span><span>>></span><span>&amp;</span> grid<span>)</span> <span>{</span>
        <span>int</span> m <span>=</span> grid<span>.</span><span>size</span><span>(</span><span>)</span><span>,</span> n <span>=</span> grid<span>[</span><span>0</span><span>]</span><span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        vector<span>&lt;</span>vector<span>&lt;</span><span>int</span><span>>></span> <span>dp</span><span>(</span>m<span>,</span> <span><span>vector</span><span><span>&lt;</span><span>int</span><span>></span></span></span><span>(</span>n<span>)</span><span>)</span><span>;</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> m<span>;</span> i<span>++</span><span>)</span><span>{</span>
            <span>for</span><span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> n<span>;</span> j<span>++</span><span>)</span><span>{</span>
                <span>if</span><span>(</span>i <span>==</span> <span>0</span><span>)</span><span>{</span>
                    <span>if</span><span>(</span>j <span>>=</span> <span>1</span><span>)</span><span>{</span>
                        dp<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> dp<span>[</span>i<span>]</span><span>[</span>j<span>-</span><span>1</span><span>]</span> <span>+</span> grid<span>[</span>i<span>]</span><span>[</span>j<span>]</span><span>;</span>
                    <span>}</span><span>else</span><span>{</span>
                        dp<span>[</span><span>0</span><span>]</span><span>[</span><span>0</span><span>]</span> <span>=</span> grid<span>[</span><span>0</span><span>]</span><span>[</span><span>0</span><span>]</span><span>;</span>
                    <span>}</span>
                <span>}</span><span>else</span><span>{</span>
                    <span>if</span><span>(</span>j <span>>=</span> <span>1</span><span>)</span><span>{</span>
                        dp<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> <span>min</span><span>(</span>dp<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span>j<span>]</span><span>,</span> dp<span>[</span>i<span>]</span><span>[</span>j <span>-</span> <span>1</span><span>]</span><span>)</span> <span>+</span> grid<span>[</span>i<span>]</span><span>[</span>j<span>]</span><span>;</span>
                    <span>}</span><span>else</span><span>{</span>
                        dp<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> dp<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span>j<span>]</span> <span>+</span> grid<span>[</span>i<span>]</span><span>[</span>j<span>]</span><span>;</span>
                    <span>}</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> dp<span>[</span>m <span>-</span> <span>1</span><span>]</span><span>[</span>n <span>-</span> <span>1</span><span>]</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-滚动数组"> 方法二：滚动数组</h2>
<h3 id="思路分析-2"> 思路分析</h3>
<div><p>Tips</p>
<p><strong>状态定义</strong>：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span>表示从左上角出发到 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>i</span><span>,</span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.05724em;">j</span><span>)</span></span></span></span> 位置的最小路径和</p>
<p>由状态转移方程</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>min</span><span>(</span><span>d</span><span>p</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span>,</span><span style="margin-right:0.1667em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>])</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>d</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span></span></p>
<p>可知<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span>只会从<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span>（上方行的数据）或者<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span></span></span></span>（左侧列的数据）转移得到，在循环的过程中只会使用到之前已经计算好的值，因此可以使用滚动数组进行优化，将<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span>中的行<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6595em;"></span><span>i</span></span></span></span>去掉，使用<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span>替代。得到新的<strong>状态转移方程</strong>如下：</p>
<p>当<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6986em;vertical-align:-0.0391em;"></span><span>i</span><span style="margin-right:0.2778em;"></span><span>&gt;</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span>且<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.854em;vertical-align:-0.1944em;"></span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span>时，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>d</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span></p>
<p>当<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6595em;"></span><span>i</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span>且<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.854em;vertical-align:-0.1944em;"></span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2778em;"></span><span>&gt;</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span>时，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>d</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span></p>
<p>当<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6986em;vertical-align:-0.0391em;"></span><span>i</span><span style="margin-right:0.2778em;"></span><span>&gt;</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span>且<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.854em;vertical-align:-0.1944em;"></span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2778em;"></span><span>&gt;</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span>时，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>min</span><span>(</span><span>d</span><span>p</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span>,</span><span style="margin-right:0.1667em;"></span><span>d</span><span>p</span><span>[</span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>])</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>d</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span></p>
<p><strong>状态边界</strong></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>0</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>d</span><span>[</span><span>0</span><span>]</span><span>[</span><span>0</span><span>]</span></span></span></span></p>
</div>
<h3 id="参考代码-2"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> <span>minPathSum</span><span>(</span>vector<span>&lt;</span>vector<span>&lt;</span><span>int</span><span>>></span><span>&amp;</span> grid<span>)</span> <span>{</span>
        <span>int</span> m <span>=</span> grid<span>.</span><span>size</span><span>(</span><span>)</span><span>,</span> n <span>=</span> grid<span>[</span><span>0</span><span>]</span><span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        vector<span>&lt;</span><span>int</span><span>></span> <span>dp</span><span>(</span>n<span>)</span><span>;</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> m<span>;</span> i<span>++</span><span>)</span><span>{</span>
            <span>for</span><span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> n<span>;</span> j<span>++</span><span>)</span><span>{</span>
                <span>if</span><span>(</span>i <span>==</span> <span>0</span><span>)</span><span>{</span>
                    <span>if</span><span>(</span>j <span>>=</span> <span>1</span><span>)</span><span>{</span>
                        dp<span>[</span>j<span>]</span> <span>=</span> dp<span>[</span>j <span>-</span> <span>1</span><span>]</span> <span>+</span> grid<span>[</span>i<span>]</span><span>[</span>j<span>]</span><span>;</span> 
                    <span>}</span><span>else</span><span>{</span>
                        dp<span>[</span>j<span>]</span> <span>=</span> grid<span>[</span>i<span>]</span><span>[</span>j<span>]</span><span>;</span>             
                    <span>}</span>
                <span>}</span><span>else</span><span>{</span>
                    <span>if</span><span>(</span>j <span>>=</span> <span>1</span><span>)</span><span>{</span>
                        dp<span>[</span>j<span>]</span> <span>=</span> <span>min</span><span>(</span>dp<span>[</span>j<span>]</span><span>,</span> dp<span>[</span>j <span>-</span> <span>1</span><span>]</span><span>)</span> <span>+</span> grid<span>[</span>i<span>]</span><span>[</span>j<span>]</span><span>;</span>
                    <span>}</span><span>else</span><span>{</span>
                        dp<span>[</span>j<span>]</span> <span>=</span> dp<span>[</span>j<span>]</span> <span>+</span> grid<span>[</span>i<span>]</span><span>[</span>j<span>]</span><span>;</span>
                    <span>}</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> dp<span>[</span>n <span>-</span> <span>1</span><span>]</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></CodeGroupItem>
</CodeGroup>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/64.png" type="image/png"/>
    </item>
    <item>
      <title>647.回文子串</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/647.%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/647.%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">647.回文子串</source>
      <pubDate>Mon, 07 Mar 2022 07:04:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_647-回文子串"> 647.回文子串</h1>
<p>https://leetcode-cn.com/problems/palindromic-substrings/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/647.png" alt="" loading="lazy"></p>
<h2 id="方法一-中心扩散"> 方法一：中心扩散</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p>考虑回文长度是奇数和回文长度是偶数的两种情况。如果回文长度是奇数，那么回文中心是一个字符；如果回文长度是偶数，那么中心是两个字符。</p>
<p>所以可以枚举所有的回文中心，然后从中心向两边扩散，当寻找完所有的回文中心之后，问题就会解决。</p>
<p>假设字符串<code>s</code>长度为<code>len</code>，则回文中心一共有<code>2*len-1</code>个，包括<code>len</code>个单字符和<code>len-1</code>个双字符。</p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> <span>countSubstrings</span><span>(</span>string s<span>)</span> <span>{</span>
        <span>// 中心扩展法</span>
        <span>int</span> n <span>=</span> s<span>.</span><span>length</span><span>(</span><span>)</span><span>;</span>
        <span>int</span> ans <span>=</span> <span>0</span><span>;</span>
        <span>for</span><span>(</span><span>int</span> center <span>=</span> <span>0</span><span>;</span> center <span>&lt;</span> n<span>;</span> center<span>++</span><span>)</span><span>{</span>
            <span>// 一个字符作中心</span>
            <span>int</span> left <span>=</span> center<span>,</span> right <span>=</span> center<span>;</span>
            <span>while</span><span>(</span>left <span>>=</span> <span>0</span> <span>&amp;&amp;</span> right <span>&lt;</span> n <span>&amp;&amp;</span> s<span>[</span>left<span>]</span> <span>==</span> s<span>[</span>right<span>]</span><span>)</span><span>{</span>
                left<span>--</span><span>;</span>
                right<span>++</span><span>;</span>
                ans<span>++</span><span>;</span>
            <span>}</span>
            <span>// 两个字符作中心</span>
            left <span>=</span> center<span>,</span> right <span>=</span> center <span>+</span> <span>1</span><span>;</span>
            <span>while</span><span>(</span>left <span>>=</span> <span>0</span> <span>&amp;&amp;</span> right <span>&lt;</span> n <span>&amp;&amp;</span> s<span>[</span>left<span>]</span> <span>==</span> s<span>[</span>right<span>]</span><span>)</span><span>{</span>
                left<span>--</span><span>;</span>
                right<span>++</span><span>;</span>
                ans<span>++</span><span>;</span>
            <span>}</span>    
        <span>}</span>
        <span>return</span> ans<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-动态规划"> 方法二：动态规划</h2>
<div><p>Tips</p>
<p><strong>状态定义</strong>：</p>
<p>设<code>dp[i][j]</code>表示字符串<code>s</code>在<code>[i,j]</code>区间的子串是否是一个回文串</p>
<p><strong>状态转移方程</strong>：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:3em;vertical-align:-1.25em;"></span><span><span style="top:0em;"><span>{</span></span><span><span><span><span><span><span style="height:1.69em;"><span style="top:-3.69em;"><span style="height:3.008em;"></span><span><span>(</span><span>s</span><span>[</span><span>i</span><span>]</span><span style="margin-right:0.2778em;"></span><span>==</span><span style="margin-right:0.2778em;"></span><span>s</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>])</span><span> </span><span>an</span><span>d</span><span> </span><span>d</span><span>p</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span>1</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>1</span><span>]</span><span>,</span></span></span><span style="top:-2.25em;"><span style="height:3.008em;"></span><span><span>(</span><span>s</span><span>[</span><span>i</span><span>]</span><span style="margin-right:0.2778em;"></span><span>==</span><span style="margin-right:0.2778em;"></span><span>s</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>])</span></span></span></span><span>​</span></span><span><span style="height:1.19em;"><span></span></span></span></span></span><span style="width:1em;"></span><span><span><span><span style="height:1.69em;"><span style="top:-3.69em;"><span style="height:3.008em;"></span><span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>i</span><span style="margin-right:0.2778em;"></span><span>≤</span><span style="margin-right:0.2778em;"></span><span><span>2</span></span></span></span><span style="top:-2.25em;"><span style="height:3.008em;"></span><span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>i</span><span style="margin-right:0.2778em;"></span><span>&gt;</span><span style="margin-right:0.2778em;"></span><span><span>2</span></span></span></span></span><span>​</span></span><span><span style="height:1.19em;"><span></span></span></span></span></span></span></span><span></span></span></span></span></span></span></p>
<p><strong>边界条件</strong>：</p>
<p><code>dp[i][j]</code> 表示 <code>[i,j]</code> 子串是否是回文串，判断该子串是否是回文串需要两个条件：</p>
<ol>
<li><code>s[i] == s[j]</code></li>
<li>掐头去尾看是否还是回文，即 <code>dp[i+1][j-1]</code> 是否是回文。意思就是 <code>dp[i][j]</code> 需要 <code>dp[i+1][j-1]</code> 来判断，即当前元素需要它的左下角元素来判断。正常我们是 <code>for i</code> 里面套 <code>for j</code>，这样循环是一层一层的，就出现了矛盾，即求 <code>dp[i][j]</code> 的时候 <code>dp[i+1][j-1]</code> 此时还是未知的</li>
</ol>
</div>
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> <span>countSubstrings</span><span>(</span>string s<span>)</span> <span>{</span>
        <span>int</span> n <span>=</span> s<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        <span>int</span> cnt <span>=</span> <span>0</span><span>;</span>
        vector<span>&lt;</span>vector<span>&lt;</span><span>int</span><span>>></span> <span>dp</span><span>(</span>n<span>,</span> <span><span>vector</span><span><span>&lt;</span><span>int</span><span>></span></span></span><span>(</span>n<span>,</span> <span>false</span><span>)</span><span>)</span><span>;</span>
        <span>for</span><span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> n<span>;</span> j<span>++</span><span>)</span><span>{</span>
            <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;=</span> j<span>;</span> i<span>++</span><span>)</span><span>{</span>
                <span>if</span><span>(</span>j <span>-</span> i <span>></span> <span>2</span><span>)</span><span>{</span>
                    dp<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> <span>(</span>s<span>[</span>i<span>]</span> <span>==</span> s<span>[</span>j<span>]</span><span>)</span> <span>&amp;&amp;</span> dp<span>[</span>i <span>+</span> <span>1</span><span>]</span><span>[</span>j <span>-</span> <span>1</span><span>]</span><span>;</span>
                <span>}</span><span>else</span><span>{</span>
                    dp<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> <span>(</span>s<span>[</span>i<span>]</span> <span>==</span> s<span>[</span>j<span>]</span><span>)</span><span>;</span>
                <span>}</span>
                <span>if</span><span>(</span>dp<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>==</span> <span>true</span><span>)</span><span>{</span>
                    cnt<span>++</span><span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> cnt<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>:::</p>
<p>::::</p>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/palindromic-substrings/solution/liang-dao-hui-wen-zi-chuan-de-jie-fa-xiang-jie-zho/" target="_blank" rel="noopener noreferrer">两道回文子串的解法（详解中心扩展法） - 回文子串 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/647.png" type="image/png"/>
    </item>
    <item>
      <title>84.柱状图中最大的矩形</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/84.%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/84.%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">84.柱状图中最大的矩形</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_84-柱状图中最大的矩形"> 84.柱状图中最大的矩形</h1>
<p>https://leetcode-cn.com/problems/largest-rectangle-in-histogram/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/84.png" alt="" loading="lazy"></p>
<h2 id="方法一-中心扩散"> 方法一：中心扩散</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p>首先我们枚举某一根柱子 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6595em;"></span><span>i</span></span></span></span> 作为高  <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6944em;"></span><span>h</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>h</span><span>e</span><span>i</span><span style="margin-right:0.03588em;">g</span><span>h</span><span>t</span><span>s</span><span>[</span><span>i</span><span>]</span></span></span></span></p>
<p>随后我们需要进行向左右两边扩展，使得扩展到的柱子的高度均不小于 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6944em;"></span><span>h</span></span></span></span>。换句话说，我们<strong>需要找到左右两侧最近的高度小于 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6944em;"></span><span>h</span></span></span></span> 的柱子</strong>，这样这两根柱子之间（不包括其本身）的所有柱子高度均不小于 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6944em;"></span><span>h</span></span></span></span>，并且就是 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6595em;"></span><span>i</span></span></span></span> 能够扩展到的最远范围。</p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> <span>largestRectangleArea</span><span>(</span>vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> heights<span>)</span> <span>{</span>
        <span>int</span> n <span>=</span> heights<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        <span>int</span> ans <span>=</span> <span>0</span><span>;</span>
        <span>for</span><span>(</span><span>int</span> mid <span>=</span> <span>0</span><span>;</span> mid <span>&lt;</span> n<span>;</span> <span>++</span>mid<span>)</span><span>{</span>
            <span>// 枚举高</span>
            <span>int</span> height <span>=</span> heights<span>[</span>mid<span>]</span><span>;</span>
            <span>int</span> left <span>=</span> mid<span>,</span> right <span>=</span> mid<span>;</span>
            <span>// 确定左右边界</span>
            <span>while</span><span>(</span>left <span>-</span> <span>1</span> <span>>=</span> <span>0</span> <span>&amp;&amp;</span> heights<span>[</span>left <span>-</span> <span>1</span><span>]</span> <span>>=</span> height<span>)</span><span>{</span>
                <span>--</span>left<span>;</span>
            <span>}</span>
            <span>while</span><span>(</span>right <span>+</span> <span>1</span> <span>&lt;</span> n <span>&amp;&amp;</span> heights<span>[</span>right <span>+</span> <span>1</span><span>]</span> <span>>=</span> height<span>)</span><span>{</span>
                <span>++</span>right<span>;</span>
            <span>}</span>
            <span>// 计算面积</span>
            ans <span>=</span> <span>max</span><span>(</span>ans<span>,</span> <span>(</span>right <span>-</span> left <span>+</span> <span>1</span><span>)</span> <span>*</span> height<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> ans<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-单调栈"> 方法二：单调栈</h2>
<div><p>Tips</p>
<p>维护一个单调递增栈，向左找第一个小于<code>heights[i]</code>的位置<code>left[i]</code>；向右找第一个小于<code>heights[i]</code>的位置<code>right[i]</code>，即最大面积为<code>heights[i]*(right[i]-left[i-1])</code></p>
<ol>
<li>
<p>遍历heights</p>
</li>
<li>
<p>操作规则：</p>
<ol>
<li>如果新元素大于栈顶元素，新元素入栈</li>
<li>否则将栈内元素弹出直到栈顶元素小于新元素</li>
</ol>
</li>
<li>
<p>规则产生的效果：</p>
<ol>
<li>当元素出栈时，说明这个<strong>新元素</strong>是出栈元素<strong>向后</strong>找第一个比其小的元素，即为右边界</li>
<li>当元素出栈后，说明新<strong>栈顶元素</strong>是出栈元素<strong>向前</strong>找第一个比其小的元素，即为左边界</li>
</ol>
</li>
</ol>
<p><strong>细节</strong>：</p>
<ol>
<li>
<p><strong>为什么要在heights最前面加0？</strong></p>
<p>因为没有在heights前加0，不能保证stack不为空，所以left的值就需要赋初始值0</p>
</li>
<li>
<p><strong>为什么要在heights最后面加0？</strong></p>
<p>在最后加0可以保证矩形高度都是递增的特殊情况下ans也能进行计算</p>
</li>
</ol>
</div>
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> <span>largestRectangleArea</span><span>(</span>vector<span>&lt;</span><span>int</span><span>></span><span>&amp;</span> heights<span>)</span> <span>{</span>
        <span>int</span> ans <span>=</span> <span>0</span><span>;</span>
        vector<span>&lt;</span><span>int</span><span>></span> st<span>;</span>
        
        heights<span>.</span><span>insert</span><span>(</span>heights<span>.</span><span>begin</span><span>(</span><span>)</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        heights<span>.</span><span>push_back</span><span>(</span><span>0</span><span>)</span><span>;</span>
        <span>int</span> n <span>=</span> heights<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>

        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n<span>;</span> i<span>++</span><span>)</span><span>{</span>
            <span>while</span><span>(</span><span>!</span>st<span>.</span><span>empty</span><span>(</span><span>)</span> <span>&amp;&amp;</span> heights<span>[</span>st<span>.</span><span>back</span><span>(</span><span>)</span><span>]</span> <span>></span> heights<span>[</span>i<span>]</span><span>)</span><span>{</span>
                <span>int</span> cur <span>=</span> st<span>.</span><span>back</span><span>(</span><span>)</span><span>;</span>
                st<span>.</span><span>pop_back</span><span>(</span><span>)</span><span>;</span>
                
              <span>// 因为没有在heights前加0，不能保证stack不为空，所以left的值就需要赋初始值0</span>
              <span>// if (!stack.empty()) {</span>
              <span>//  left = stack.back() + 1;</span>
              <span>// }</span>
                
                <span>int</span> left <span>=</span> st<span>.</span><span>back</span><span>(</span><span>)</span><span>;</span>
                <span>int</span> right <span>=</span> i<span>;</span>
                ans <span>=</span> <span>max</span><span>(</span>ans<span>,</span> <span>(</span>right <span>-</span> left <span>-</span> <span>1</span><span>)</span> <span>*</span> heights<span>[</span>cur<span>]</span><span>)</span><span>;</span>
            <span>}</span>
            st<span>.</span><span>push_back</span><span>(</span>i<span>)</span><span>;</span>
        <span>}</span>   

        <span>return</span> ans<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>:::</p>
<p>::::</p>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/zhao-liang-bian-di-yi-ge-xiao-yu-ta-de-zhi-by-powc/" target="_blank" rel="noopener noreferrer">找两边第一个小于它的值 - 柱状图中最大的矩形 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/84-by-ikaruga/" target="_blank" rel="noopener noreferrer">【柱状图中最大的矩形】单调栈入门，使用单调栈快速寻找边界 - 柱状图中最大的矩形 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p>https://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/84-by-ikaruga/376124</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/84.png" type="image/png"/>
    </item>
    <item>
      <title>85.最大矩形</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/85.%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/85.%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">85.最大矩形</source>
      <pubDate>Sat, 26 Feb 2022 11:46:15 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_85-最大矩形"> 85.最大矩形</h1>
<p>https://leetcode-cn.com/problems/minimum-path-sum/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/85.png" alt="" loading="lazy"></p>
<h2 id="方法一-使用柱状图的优化暴力方法"> 方法一：使用柱状图的优化暴力方法</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p>用<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.01968em;">l</span><span>e</span><span style="margin-right:0.10764em;">f</span><span>t</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span>记录矩阵第<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6595em;"></span><span>i</span></span></span></span>行第<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.854em;vertical-align:-0.1944em;"></span><span style="margin-right:0.05724em;">j</span></span></span></span>列元素的左边的连续1的数量</p>
<p>对于矩阵中任意一个点，枚举以该点为右下角的全1矩形</p>
<p>当考察以<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>t</span><span style="margin-right:0.02778em;">r</span><span>i</span><span>x</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span>为右下角的矩形时，枚举满足<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6835em;vertical-align:-0.0391em;"></span><span>0</span><span style="margin-right:0.2778em;"></span><span>&lt;=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.7335em;vertical-align:-0.0391em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2778em;"></span><span>&lt;=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6595em;"></span><span>i</span></span></span></span>的所有可能的<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6944em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>，此时矩阵的最大宽度为下列值中的最小值</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>min</span><span>{</span><span style="margin-right:0.01968em;">l</span><span>e</span><span style="margin-right:0.10764em;">f</span><span>t</span><span>[</span><span>i</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span>,</span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.01968em;">l</span><span>e</span><span style="margin-right:0.10764em;">f</span><span>t</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span>,</span><span style="margin-right:0.1667em;"></span><span>...</span><span>,</span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.01968em;">l</span><span>e</span><span style="margin-right:0.10764em;">f</span><span>t</span><span>[</span><span style="margin-right:0.03148em;">k</span><span>]</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]}</span></span></span></span></span></p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>int</span> <span>maximalRectangle</span><span>(</span>vector<span>&lt;</span>vector<span>&lt;</span><span>char</span><span>>></span><span>&amp;</span> matrix<span>)</span> <span>{</span>
        <span>int</span> m <span>=</span> matrix<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        <span>if</span><span>(</span>m <span>==</span> <span>0</span><span>)</span><span>{</span>
            <span>return</span> <span>0</span><span>;</span>
        <span>}</span>
        <span>int</span> n <span>=</span> matrix<span>[</span><span>0</span><span>]</span><span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
        vector<span>&lt;</span>vector<span>&lt;</span><span>int</span><span>>></span> <span>left</span><span>(</span>m<span>,</span> <span><span>vector</span><span><span>&lt;</span><span>int</span><span>></span></span></span><span>(</span>n<span>,</span> <span>0</span><span>)</span><span>)</span><span>;</span>
        <span>// 初始化left数组</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> m<span>;</span> i<span>++</span><span>)</span><span>{</span>
            <span>for</span><span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> n<span>;</span> j<span>++</span><span>)</span><span>{</span>
                <span>if</span><span>(</span>matrix<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>==</span> <span>'1'</span><span>)</span><span>{</span>
                    left<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> <span>(</span>j <span>==</span> <span>0</span> <span>?</span> <span>0</span> <span>:</span> left<span>[</span>i<span>]</span><span>[</span>j <span>-</span> <span>1</span><span>]</span><span>)</span> <span>+</span> <span>1</span><span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>

        <span>int</span> ret <span>=</span> <span>0</span><span>;</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> m<span>;</span> i<span>++</span><span>)</span><span>{</span>
            <span>for</span><span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> n<span>;</span> j<span>++</span><span>)</span><span>{</span>
                <span>if</span><span>(</span>matrix<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>==</span> <span>'0'</span><span>)</span><span>{</span>
                    <span>continue</span><span>;</span>
                <span>}</span>
                <span>int</span> width <span>=</span> left<span>[</span>i<span>]</span><span>[</span>j<span>]</span><span>;</span>
                <span>int</span> area <span>=</span> width<span>;</span>
                <span>for</span><span>(</span><span>int</span> k <span>=</span> i <span>-</span> <span>1</span><span>;</span> k <span>>=</span> <span>0</span><span>;</span> k<span>--</span><span>)</span><span>{</span>
                    width <span>=</span> <span>min</span><span>(</span>width<span>,</span> left<span>[</span>k<span>]</span><span>[</span>j<span>]</span><span>)</span><span>;</span>
                    area <span>=</span> <span>max</span><span>(</span>area<span>,</span> <span>(</span>i <span>-</span> k <span>+</span> <span>1</span><span>)</span> <span>*</span> width<span>)</span><span>;</span>
                <span>}</span>
                ret <span>=</span> <span>max</span><span>(</span>ret<span>,</span> area<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> ret<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div></CodeGroupItem>
</CodeGroup>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/85.png" type="image/png"/>
    </item>
    <item>
      <title>94.二叉树的中序遍历</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/94.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/94.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">94.二叉树的中序遍历</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_94-二叉树的中序遍历"> 94.二叉树的中序遍历</h1>
<p>https://leetcode-cn.com/problems/binary-tree-inorder-traversal/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/94.png" alt="" loading="lazy"></p>
<h2 id="方法一-递归法"> 方法一：递归法</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code>
</code></pre>
<div><span>1</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-迭代法"> 方法二：迭代法</h2>
<div><p>Tips</p>
</div>
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>// 递归的调用过程是不断往左边走，当左边走不下去了，就打印节点，并转向右边，然后右边继续这个过程。</span>
    <span>// 我们在迭代实现时，就可以用栈来模拟上面的调用过程。</span>
    vector<span>&lt;</span><span>int</span><span>></span> <span>inorderTraversal</span><span>(</span>TreeNode<span>*</span> root<span>)</span> <span>{</span>
        stack<span>&lt;</span>TreeNode<span>*</span><span>></span> st<span>;</span>
        vector<span>&lt;</span><span>int</span><span>></span> ret<span>;</span>
        <span>while</span><span>(</span><span>!</span>st<span>.</span><span>empty</span><span>(</span><span>)</span> <span>||</span> root <span>!=</span> <span>nullptr</span><span>)</span><span>{</span>
            <span>// 不断往左子树方向走，每走一次就将当前节点保存到栈中</span>
            <span>// 模拟递归的调用</span>
            <span>if</span><span>(</span>root <span>!=</span> <span>nullptr</span><span>)</span><span>{</span>
                st<span>.</span><span>push</span><span>(</span>root<span>)</span><span>;</span>
                root <span>=</span> root<span>-></span>left<span>;</span>
            <span>}</span>
            <span>// 当前节点为空，说明左子树方向已经走到尽头，从栈中弹出节点并保存</span>
            <span>// 然后转向右边节点，继续上面整个过程</span>
            <span>else</span><span>{</span>
                TreeNode<span>*</span> tmp <span>=</span> st<span>.</span><span>top</span><span>(</span><span>)</span><span>;</span>
                st<span>.</span><span>pop</span><span>(</span><span>)</span><span>;</span>
                ret<span>.</span><span>push_back</span><span>(</span>tmp<span>-></span>val<span>)</span><span>;</span>
                root <span>=</span> tmp<span>-></span>right<span>;</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> ret<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>:::</p>
<p>::::</p>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/solution/dong-hua-yan-shi-94-er-cha-shu-de-zhong-xu-bian-li/" target="_blank" rel="noopener noreferrer">动画演示+三种实现 94. 二叉树的中序遍历 - 二叉树的中序遍历 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/94.png" type="image/png"/>
    </item>
    <item>
      <title>145.二叉树的后序遍历</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/94.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/94.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">145.二叉树的后序遍历</source>
      <pubDate>Mon, 04 Apr 2022 14:19:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_145-二叉树的后序遍历"> 145.二叉树的后序遍历</h1>
<p>https://leetcode-cn.com/problems/binary-tree-postorder-traversal/</p>
<h2 id="方法一-递归法"> 方法一：递归法</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code>
</code></pre>
<div><span>1</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h2 id="方法二-迭代法"> 方法二：迭代法</h2>
<div><p>Tips</p>
</div>
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    vector<span>&lt;</span><span>int</span><span>></span> <span>postorderTraversal</span><span>(</span>TreeNode<span>*</span> root<span>)</span> <span>{</span>
        vector<span>&lt;</span><span>int</span><span>></span> ret<span>;</span>
        stack<span>&lt;</span>TreeNode<span>*</span><span>></span> st<span>;</span>
        <span>// 思路分析</span>
        <span>// 初始化一个空栈</span>
        <span>// 当根节点不为空或者栈不为空时，从根节点开始</span>
        <span>// 每次将当前节点压入栈中，如果当前节点有左子树，就往左子树遍历，没有左子树就往右子树跑</span>
        <span>// 如果当前节点无左子树也无右子树，从栈中弹出该节点，如果当前节点是上一个节点（即弹出该节点后的栈顶元素）的左节点，尝试访问上一个节点的右子树，如果不是，那当前栈的栈顶元素继续弹出</span>
        <span>while</span><span>(</span><span>!</span>st<span>.</span><span>empty</span><span>(</span><span>)</span> <span>||</span> root <span>!=</span> <span>nullptr</span><span>)</span><span>{</span>
            <span>// 往左子树一直遍历直到为空</span>
            <span>while</span><span>(</span>root <span>!=</span> <span>nullptr</span><span>)</span><span>{</span>
                st<span>.</span><span>push</span><span>(</span>root<span>)</span><span>;</span>
                <span>if</span><span>(</span>root<span>-></span>left<span>)</span><span>{</span>
                    root <span>=</span> root<span>-></span>left<span>;</span>
                <span>}</span><span>else</span><span>{</span>
                    root <span>=</span> root<span>-></span>right<span>;</span>
                <span>}</span>
            <span>}</span>
            <span>// root为当前栈顶元素的左结点</span>
            root <span>=</span> st<span>.</span><span>top</span><span>(</span><span>)</span><span>;</span>
            <span>// 弹出栈顶元素</span>
            st<span>.</span><span>pop</span><span>(</span><span>)</span><span>;</span>
            <span>// 加入结果数组</span>
            ret<span>.</span><span>push_back</span><span>(</span>root<span>-></span>val<span>)</span><span>;</span>
            <span>// 如果栈不为空且当前栈顶元素的左节点是刚刚跳出的栈顶元素root</span>
            <span>// 则转向遍历当前栈顶元素的右子树</span>
            <span>if</span><span>(</span><span>!</span>st<span>.</span><span>empty</span><span>(</span><span>)</span> <span>&amp;&amp;</span> st<span>.</span><span>top</span><span>(</span><span>)</span><span>-></span>left <span>==</span> root<span>)</span><span>{</span>
                root <span>=</span> st<span>.</span><span>top</span><span>(</span><span>)</span><span>-></span>right<span>;</span>
            <span>// 否则证明当前栈顶元素无左右子树，那当前的栈顶元素弹出</span>
            <span>}</span><span>else</span><span>{</span>
                root <span>=</span> <span>nullptr</span><span>;</span>
            <span>}</span>
        <span>}</span>
        
        <span>return</span> ret<span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><p>:::</p>
<p>::::</p>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/acm-xuan-shou-tu-jie-leetcode-er-cha-shu-q9ep/" target="_blank" rel="noopener noreferrer">ACM 选手图解 LeetCode 二叉树后序遍历（递归 + 非递归） | 编程文青李狗蛋 - 二叉树的后序遍历 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by--34/" target="_blank" rel="noopener noreferrer">详细通俗的思路分析，多解法 - 二叉树的后序遍历 - 力扣（LeetCode） (leetcode-cn.com)</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>96.不同的二叉搜索树</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/96.%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/96.%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">96.不同的二叉搜索树</source>
      <pubDate>Tue, 01 Mar 2022 13:03:21 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_96-不同的二叉搜索树"> 96.不同的二叉搜索树</h1>
<p>https://leetcode-cn.com/problems/unique-binary-search-trees/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/96.png" alt="" loading="lazy"></p>
<h2 id="方法一-动态规划"> 方法一：动态规划</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p>状态定义：</p>
<p>设<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span></span></span></span>代表用连着的<code>i</code>个数，所构建出的二叉搜索树（BST）种类数，左子树用掉<code>j</code>个，则右子树用掉<code>i-j-1</code>个，能构建出<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2222em;"></span><span>∗</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.854em;vertical-align:-0.1944em;"></span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span></span></span></span>种不同的BST</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1.6em;vertical-align:-0.55em;"></span><span style="position:relative;top:0em;">∑</span><span style="margin-right:0.1667em;"></span><span><span>d</span><span>p</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2222em;"></span><span>∗</span><span style="margin-right:0.2222em;"></span><span>d</span><span>p</span><span>[</span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>1</span><span>]</span></span><span>,</span><span style="margin-right:0.1667em;"></span><span>0</span><span style="margin-right:0.2778em;"></span><span>≤</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.854em;vertical-align:-0.1944em;"></span><span><span style="margin-right:0.05724em;">j</span></span><span style="margin-right:0.2778em;"></span><span>≤</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.854em;vertical-align:-0.1944em;"></span><span><span>i</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>1</span></span><span>,</span><span style="margin-right:0.1667em;"></span><span>2</span><span style="margin-right:0.2778em;"></span><span>≤</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.7955em;vertical-align:-0.136em;"></span><span><span>i</span></span><span style="margin-right:0.2778em;"></span><span>≤</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.4306em;"></span><span><span>n</span></span></span></span></span></span></p>
<p>边界条件：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>0</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>p</span><span>[</span><span>1</span><span>]</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span></span></p>
<ul>
<li>当<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>n</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>0</span></span></span></span>时，没有数字，只能形成一种BST：空树</li>
<li>当<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.4306em;"></span><span>n</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span>时，只有一个数字，只能形成一种BST：单个节点</li>
</ul>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>/*
    设dp[i]代表连着的i个数能构建的BST的个数
    dp[i]=∑dp[j]∗dp[i−j−1],0&lt;=j&lt;=i−1
    */</span>
    <span>int</span> <span>numTrees</span><span>(</span><span>int</span> n<span>)</span> <span>{</span>
        vector<span>&lt;</span><span>int</span><span>></span> <span>dp</span><span>(</span>n <span>+</span> <span>1</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        dp<span>[</span><span>0</span><span>]</span> <span>=</span> dp<span>[</span><span>1</span><span>]</span> <span>=</span> <span>1</span><span>;</span>
        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>2</span><span>;</span> i <span>&lt;=</span> n<span>;</span> i<span>++</span><span>)</span><span>{</span>
            <span>for</span><span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> i<span>;</span> j<span>++</span><span>)</span><span>{</span>
                dp<span>[</span>i<span>]</span> <span>=</span> dp<span>[</span>i<span>]</span> <span>+</span> dp<span>[</span>j<span>]</span> <span>*</span> dp<span>[</span>i <span>-</span> j <span>-</span> <span>1</span><span>]</span><span>;</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> dp<span>[</span>n<span>]</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></CodeGroupItem>
</CodeGroup>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/96.png" type="image/png"/>
    </item>
    <item>
      <title>98.验证二叉搜索树</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/98.%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/98.%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">98.验证二叉搜索树</source>
      <pubDate>Tue, 29 Mar 2022 14:25:26 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_98-验证二叉搜索树"> 98.验证二叉搜索树</h1>
<p>https://leetcode-cn.com/problems/validate-binary-search-tree/</p>
<p><img src="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/98.png" alt="" loading="lazy"></p>
<h2 id="方法一-递归"> 方法一：递归</h2>
<h3 id="思路分析"> 思路分析</h3>
<div><p>Tips</p>
<p>如果二叉树的左子树不为空，则左子树上所有节点的值均小于它的根节点的值；若它的右子树不空，则右子树上所有节点的值均大于它的根节点的值；它的左右子树也为二叉搜索树。</p>
<p><strong>递归函数</strong></p>
<p><code>helper(root,lower,upper)</code>函数表示考虑以<code>root</code>为根的子树，判断子树中所有节点的值是否都在 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span style="margin-right:0.01968em;">l</span><span>,</span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.02778em;">r</span><span>)</span></span></span></span> 的范围内</p>
<p><strong>递归终止条件</strong></p>
<p>根节点为空</p>
<p>左子树节点的值大于根节点的值，右子树节点的值小于根节点的值</p>
</div>
<h3 id="参考代码"> 参考代码</h3>
<CodeGroup>
<CodeGroupItem title="c++">
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
<span>public</span><span>:</span>
    <span>bool</span> <span>helper</span><span>(</span>TreeNode<span>*</span> root<span>,</span> <span>long</span> lower<span>,</span> <span>long</span> upper<span>)</span><span>{</span>
        <span>if</span><span>(</span>root <span>==</span> <span>nullptr</span><span>)</span><span>{</span>
            <span>return</span> <span>true</span><span>;</span>
        <span>}</span>
        <span>if</span><span>(</span>root<span>-></span>val <span>&lt;=</span> lower <span>||</span> root<span>-></span>val <span>>=</span> upper<span>)</span><span>{</span>
            <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        <span>return</span> <span>helper</span><span>(</span>root<span>-></span>left<span>,</span> lower<span>,</span> root<span>-></span>val<span>)</span> <span>&amp;&amp;</span> <span>helper</span><span>(</span>root<span>-></span>right<span>,</span> root<span>-></span>val<span>,</span> upper<span>)</span><span>;</span>
    <span>}</span>
    <span>bool</span> <span>isValidBST</span><span>(</span>TreeNode<span>*</span> root<span>)</span> <span>{</span>
        <span>if</span><span>(</span>root <span>==</span> <span>nullptr</span><span>)</span><span>{</span>
            <span>return</span> <span>true</span><span>;</span>
        <span>}</span>
        <span>return</span> <span>helper</span><span>(</span>root<span>,</span> LONG_MIN<span>,</span> LONG_MAX<span>)</span><span>;</span>
    <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div></CodeGroupItem>
</CodeGroup>
<h3 id="复杂度分析"> 复杂度分析</h3>
<ol>
<li>时间复杂度：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span></span></span></span></li>
<li>空间复杂度：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span></span></span></span></li>
</ol>
<h2 id="参考文献"> 参考文献</h2>
<p><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/solution/yan-zheng-er-cha-sou-suo-shu-by-leetcode-solution/" target="_blank" rel="noopener noreferrer">验证二叉搜索树 - 验证二叉搜索树 - 力扣（LeetCode） (leetcode-cn.com)</a>https://leetcode-cn.com/problems/target-sum/solution/dong-tai-gui-hua-si-kao-quan-guo-cheng-by-keepal/)</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/River-Cold/pictureBed/vuepress-blog/docs/solution/leetcode/LeetCode-hot-topic-HOT-100/98.png" type="image/png"/>
    </item>
    <item>
      <title>LeetCode 热题 HOT 100</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/leetcode/LeetCode-hot-topic-HOT-100/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">LeetCode 热题 HOT 100</source>
      <pubDate>Fri, 25 Feb 2022 14:07:08 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="leetcode-热题-hot-100"> LeetCode 热题 HOT 100</h1>
<table>
<thead>
<tr>
<th>题解</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="./1.两数之和.html">1.两数之和</a></td>
</tr>
<tr>
<td><a href="./64.最小路径和.html">64.最小路径和</a></td>
</tr>
<tr>
<td><a href="./85.最大矩形.html">85.最大矩形</a></td>
</tr>
<tr>
<td><a href="./121.买卖股票的最佳时机.html">121.买卖股票的最佳时机</a></td>
</tr>
<tr>
<td><a href="./139.单词拆分.html">139.单词拆分</a></td>
</tr>
<tr>
<td><a href="./146.LRU缓存.html">146.LRU缓存</a></td>
</tr>
<tr>
<td><a href="./148.排序链表.html">148.排序链表</a></td>
</tr>
<tr>
<td><a href="./206.反转链表.html">206.反转链表</a></td>
</tr>
<tr>
<td><a href="./236.二叉树的最近公共祖先.html">236.二叉树的最近公共祖先</a></td>
</tr>
<tr>
<td><a href="./297.二叉树的序列化与反序列化.html">297.二叉树的序列化与反序列化</a></td>
</tr>
<tr>
<td><a href="./309.最佳买卖股票时机含冷冻期.html">309.最佳买卖股票时机含冷冻期</a></td>
</tr>
<tr>
<td><a href="./337.打家劫舍III.html">337.打家劫舍III</a></td>
</tr>
<tr>
<td><a href="./338.比特位计数.html">338.比特位计数</a></td>
</tr>
<tr>
<td><a href="./416.分割等和子集.html">416.分割等和子集</a></td>
</tr>
<tr>
<td><a href="./494.目标和.html">494.目标和</a></td>
</tr>
<tr>
<td><a href="./647.回文子串.html">647.回文子串</a></td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>组件禁用</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/guide/disable/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/guide/disable/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">组件禁用</source>
      <description>&amp;lt;p&amp;gt;你可以通过设置页面的 Frontmatter，在页面禁用一些功能。&amp;lt;/p&amp;gt;
</description>
      <category>使用指南</category>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<p>你可以通过设置页面的 Frontmatter，在页面禁用一些功能。</p>

<p>本页面应当禁用了:</p>
<ul>
<li>导航栏</li>
<li>侧边栏</li>
<li>路径导航</li>
<li>页面信息</li>
<li>贡献者</li>
<li>编辑此页链接</li>
<li>更新时间</li>
<li>上一篇/下一篇 链接</li>
<li>评论</li>
<li>页脚</li>
<li>返回顶部按钮</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>1.md</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/nowcoder/sql-advanced/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/solution/nowcoder/sql-advanced/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">1.md</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_1-md"> 1.md</h1>
<p>sql-advanced!</p>
]]></content:encoded>
    </item>
    <item>
      <title>密码加密的文章</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/guide/encrypt/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/guide/encrypt/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">密码加密的文章</source>
      <category>使用指南</category>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="密码加密的文章"> 密码加密的文章</h1>
<p>实际的文章内容。</p>
<p>段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。</p>
<p>段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Markdown 增强</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/guide/markdown/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/guide/markdown/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">Markdown 增强</source>
      <description>&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;vuepress-theme-hope&amp;lt;/code&amp;gt; 通过内置 &amp;lt;a href=&amp;quot;https://vuepress-theme-hope.github.io/md-enhance&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noopener noreferrer&amp;quot;&amp;gt;md-enhance&amp;lt;/a&amp;gt;，在 Markdown 中启用了更多的语法与新功能。&amp;lt;/p&amp;gt;
</description>
      <category>使用指南</category>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<p><code>vuepress-theme-hope</code> 通过内置 <a href="https://vuepress-theme-hope.github.io/md-enhance" target="_blank" rel="noopener noreferrer">md-enhance</a>，在 Markdown 中启用了更多的语法与新功能。</p>

<h2 id="一键启用"> 一键启用</h2>
<p>你可以设置 <code>themeconfig.mdEnhance.enableAll</code> 启用 <a href="https://vuepress-theme-hope.github.io/md-enhance" target="_blank" rel="noopener noreferrer">md-enhance</a> 插件的所有功能。</p>
<div><div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br></div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>themeConfig</span><span>:</span> <span>{</span>
    <span>mdEnhance</span><span>:</span> <span>{</span>
      <span>enableAll</span><span>:</span> <span>true</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="新增的更多语法"> 新增的更多语法</h2>
<h3 id="上下角标"> 上下角标</h3>
<p>19<sup>th</sup> H<sub>2</sub>O</p>
<details><summary>代码</summary>
<div><pre><code>19^th^ H<span><span>~</span><span>2</span><span>~</span></span>O
</code></pre>
<div><span>1</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/sup-sub/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="自定义对齐"> 自定义对齐</h3>
<div>
<p>我是居中的</p>
</div>
<div>
<p>我在右对齐</p>
</div>
<details><summary>代码</summary>
<div><pre><code>::: center

我是居中的

:::

::: right

我在右对齐

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/align/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="脚注"> 脚注</h3>
<p>此文字有脚注<sup></sup>.</p>
<details><summary>代码</summary>
<div><pre><code>此文字有脚注[^first].

<span><span>[</span><span>^first</span><span>]</span><span>:</span> 这是脚注内容</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/footnote/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="标记"> 标记</h3>
<p>你可以标记 <mark>重要的内容</mark> 。</p>
<details><summary>代码</summary>
<div><pre><code>你可以标记 ==重要的内容== 。
</code></pre>
<div><span>1</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/mark/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="任务列表"> 任务列表</h3>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-0"><label for="task-item-0"> 计划 1</label></li>
<li><input type="checkbox"  disabled="disabled" id="task-item-1"><label for="task-item-1"> 计划 2</label></li>
</ul>
<details><summary>Code</summary>
<div><pre><code><span>-</span> [x] 计划 1
<span>-</span> [ ] 计划 2
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/guide/markdown/tasklist/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="流程图"> 流程图</h3>
<i>Not supported content</i><details><summary>代码</summary>
<div><pre><code><span><span>```</span><span>flow</span>
<span>cond=>condition: Process?
process=>operation: Process
e=>end: End

cond(yes)->process->e
cond(no)->e</span>
<span>```</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/flowchart/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h2 id="mermaid"> Mermaid</h2>
<Mermaid id="mermaid-64a57060" data-code="graph%20TD%3B%0A%20%20%20%20A--%3EB%3B%0A%20%20%20%20A--%3EC%3B%0A%20%20%20%20B--%3ED%3B%0A%20%20%20%20C--%3ED%3B%0A"></Mermaid><details><summary>代码</summary>
<div><pre><code><span><span>```</span><span>mermaid</span>
<span>graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;</span>
<span>```</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/mermaid/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="tex-语法"> Tex 语法</h3>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:2.4em;vertical-align:-0.95em;"></span><span><span></span><span><span><span><span style="height:1.3714em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.05556em;">∂</span><span><span style="margin-right:0.03588em;">ω</span><span><span><span><span style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.05556em;">∂</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="margin-right:0.1667em;"></span><span><span style="top:0em;"><span>(</span></span><span><span></span><span><span><span><span style="height:1.3414em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>)</span></span></span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:3.0277em;vertical-align:-1.2777em;"></span><span><span style="top:0em;"><span>(</span></span><span><span></span><span><span><span><span style="height:1.3414em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>)</span></span></span><span style="margin-right:0.1667em;"></span><span><span style="top:0em;"><span>{</span></span><span>(</span><span>lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">y</span><span><span>)</span><span><span><span><span style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span><span><span><span style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span style="height:3.05em;"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style="top:-3.05em;"><span style="height:3.05em;"></span><span><span>∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span style="height:3.05em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span><span>​</span></span><span><span style="height:1.2777em;"><span></span></span></span></span></span><span style="margin-right:0.1667em;"></span><span><span></span><span><span><span><span style="height:1.5017em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">ω</span><span><span><span><span style="height:0.7507em;"><span style="top:-2.989em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span>(</span><span>−</span><span>1</span><span><span>)</span><span><span><span><span style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span></span></span></span></span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.1667em;"></span><span>⋯</span><span style="margin-right:0.1667em;"></span><span>(</span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>i</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span>1</span><span>)</span><span>(</span><span>lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">y</span><span><span>)</span><span><span><span><span style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.02778em;">r</span><span>−</span><span>i</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>}</span></span></span></span></span></span></span></p>
<details><summary>代码</summary>
<div><pre><code>$$
\frac {\partial^r} {\partial \omega^r} \left(\frac {y^{\omega}} {\omega}\right)
= \left(\frac {y^{\omega}} {\omega}\right) \left\{(\log y)^r + \sum_{i=1}^r \frac {(-1)^i r \cdots (r-i+1) (\log y)^{r-i}} {\omega^i} \right\}
$$
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/tex/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="代码案例"> 代码案例</h3>

          <div
            id="code-demo-5ac6bc9f"
           
  
 data-title="%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%20Demo"

            data-code="%7B%22html%22%3A%22%3Ch1%3EMr.Hope%3C%2Fh1%3E%5Cn%3Cp%3E%3Cspan%20id%3D%5C%22very%5C%22%3E%E5%8D%81%E5%88%86%3C%2Fspan%3E%20%E5%B8%85%3C%2Fp%3E%5Cn%22%2C%22js%22%3A%22document.querySelector(%5C%22%23very%5C%22).addEventListener(%5C%22click%5C%22%2C%20()%20%3D%3E%20%7B%5Cn%20%20alert(%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22)%3B%5Cn%7D)%3B%5Cn%22%2C%22css%22%3A%22span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>h1</span><span>></span></span>Mr.Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>十分<span><span><span>&lt;/</span>span</span><span>></span></span> 帅<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"十分帅"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo 一个普通 Demo

<span><span>```</span><span>html</span>
<span><span><span><span>&lt;</span>h1</span><span>></span></span>Mr.Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>十分<span><span><span>&lt;/</span>span</span><span>></span></span> 帅<span><span><span>&lt;/</span>p</span><span>></span></span></span>
<span>```</span></span>

<span><span>```</span><span>js</span>
<span>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"十分帅"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span></span>
<span>```</span></span>

<span><span>```</span><span>css</span>
<span><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></details>

          <div
            id="code-demo-693e1878"
           
  data-type="react"
 data-title="%E4%B8%80%E4%B8%AA%20React%20Demo"

            data-code="%7B%22js%22%3A%22export%20default%20class%20App%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.state%20%3D%20%7B%20message%3A%20%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22%20%7D%3B%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%20className%3D%5C%22box-react%5C%22%3E%5Cn%20%20%20%20%20%20%20%20Mr.Hope%20%3Cspan%3E%7Bthis.state.message%7D%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22css%22%3A%22.box-react%20span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>
  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>props<span>)</span><span>;</span>
    <span>this</span><span>.</span>state <span>=</span> <span>{</span> <span>message</span><span>:</span> <span>"十分帅"</span> <span>}</span><span>;</span>
  <span>}</span>
  <span>render</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>(</span>
      <span>&lt;</span>div className<span>=</span><span>"box-react"</span><span>></span>
        Mr<span>.</span>Hope <span>&lt;</span>span<span>></span><span>{</span><span>this</span><span>.</span>state<span>.</span>message<span>}</span><span>&lt;</span><span>/</span>span<span>></span>
      <span>&lt;</span><span>/</span>div<span>></span>
    <span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><div><pre><code><span>.box-react span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo [react] 一个 React Demo

<span><span>```</span><span>js</span>
<span><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>
  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>props<span>)</span><span>;</span>
    <span>this</span><span>.</span>state <span>=</span> <span>{</span> <span>message</span><span>:</span> <span>"十分帅"</span> <span>}</span><span>;</span>
  <span>}</span>
  <span>render</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>(</span>
      <span>&lt;</span>div className<span>=</span><span>"box-react"</span><span>></span>
        Mr<span>.</span>Hope <span>&lt;</span>span<span>></span><span>{</span><span>this</span><span>.</span>state<span>.</span>message<span>}</span><span>&lt;</span><span>/</span>span<span>></span>
      <span>&lt;</span><span>/</span>div<span>></span>
    <span>)</span><span>;</span>
  <span>}</span>
<span>}</span></span>
<span>```</span></span>

<span><span>```</span><span>css</span>
<span><span>.box-react span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></details>

          <div
            id="code-demo-2c0b9cdb"
           
  data-type="vue"
 data-title="%E4%B8%80%E4%B8%AA%20Vue%20Demo"

            data-code="%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22box%5C%22%3E%5Cn%20%20%20%20Mr.Hope%20%3Cspan%3E%7B%7B%20message%20%7D%7D%3C%2Fspan%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20data%3A%20()%20%3D%3E%20(%7B%20message%3A%20%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22%20%7D)%2C%5Cn%7D%3B%5Cn%3C%2Fscript%3E%5Cn%3Cstyle%3E%5Cn.box%20span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%3C%2Fstyle%3E%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>box<span>"</span></span><span>></span></span>
    Mr.Hope <span><span><span>&lt;</span>span</span><span>></span></span>{{ message }}<span><span><span>&lt;/</span>span</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>
<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>(</span><span>{</span> <span>message</span><span>:</span> <span>"十分帅"</span> <span>}</span><span>)</span><span>,</span>
<span>}</span><span>;</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span><span>></span></span><span><span>
<span>.box span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo [vue] 一个 Vue Demo

<span><span>```</span><span>vue</span>
<span>&lt;template>
  &lt;div>
    Mr.Hope &lt;span>{{ message }}&lt;/span>
  &lt;/div>
&lt;/template>
&lt;script>
export default {
  data: () => ({ message: "十分帅" }),
};
&lt;/script>
&lt;style>
.box span {
  color: red;
}
&lt;/style></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div></details>

          <div
            id="code-demo-2869b0e2"
           
  
 data-title="%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%20Demo"

            data-code="%7B%22md%22%3A%22%23%20%E6%A0%87%E9%A2%98%5Cn%5Cn%E5%8D%81%E5%88%86%E5%B8%85%5Cn%22%2C%22ts%22%3A%22const%20message%3A%20string%20%3D%20%5C%22Mr.Hope%5C%22%3B%5Cn%5Cndocument.querySelector(%5C%22h1%5C%22).innerHTML%20%3D%20message%3B%5Cn%22%2C%22scss%22%3A%22h1%20%7B%5Cn%20%20font-style%3A%20italic%3B%5Cn%5Cn%20%20%2B%20p%20%7B%5Cn%20%20%20%20color%3A%20red%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span>#</span> 标题</span>

十分帅
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>const</span> message<span>:</span> <span>string</span> <span>=</span> <span>"Mr.Hope"</span><span>;</span>

document<span>.</span><span>querySelector</span><span>(</span><span>"h1"</span><span>)</span><span>.</span>innerHTML <span>=</span> message<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>h1 </span><span>{</span>
  <span>font-style</span><span>:</span> italic<span>;</span>

  <span>+ p </span><span>{</span>
    <span>color</span><span>:</span> red<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo 一个普通 Demo

<span><span>```</span><span>md</span>
<span><span><span>#</span> 标题</span>

十分帅</span>
<span>```</span></span>

<span><span>```</span><span>ts</span>
<span><span>const</span> message<span>:</span> <span>string</span> <span>=</span> <span>"Mr.Hope"</span><span>;</span>

document<span>.</span><span>querySelector</span><span>(</span><span>"h1"</span><span>)</span><span>.</span>innerHTML <span>=</span> message<span>;</span></span>
<span>```</span></span>

<span><span>```</span><span>scss</span>
<span><span>h1 </span><span>{</span>
  <span>font-style</span><span>:</span> italic<span>;</span>

  <span>+ p </span><span>{</span>
    <span>color</span><span>:</span> red<span>;</span>
  <span>}</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/demo/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="幻灯片"> 幻灯片</h3>
<i>Not supported content</i><details><summary>代码</summary>
<div><pre><code>@slidestart

<span><span>##</span> 幻灯片 1</span>

一个有文字和 <span>[<span>链接</span>](<span>https://mrhope.site</span>)</span> 的段落

<span>---</span>

<span><span>##</span> 幻灯片 2</span>

<span>-</span> 列表 1
<span>-</span> 列表 2

<span>---</span>

<span><span>##</span> 幻灯片 3.1</span>

<span><span>```</span><span>js</span>
<span><span>const</span> a <span>=</span> <span>1</span><span>;</span></span>
<span>```</span></span>

--

<span><span>##</span> 幻灯片 3.2</span>

$$
J(\theta_0,\theta_1) = \sum_{i=0}
$$

@slideend
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/presentation/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h2 id="其他语法"> 其他语法</h2>
<div><p>自定义标题</p>
<p>信息容器</p>
</div>
<div><p>自定义标题</p>
<p>提示容器</p>
</div>
<div><p>自定义标题</p>
<p>警告容器</p>
</div>
<div><p>自定义标题</p>
<p>危险容器</p>
</div>
<details><summary>自定义标题</summary>
<p>详情容器</p>
</details>
<details><summary>代码</summary>
<div><pre><code>::: info 自定义标题

信息容器

:::

::: tip 自定义标题

提示容器

:::

::: warning 自定义标题

警告容器

:::

::: danger 自定义标题

危险容器

:::

::: details 自定义标题

详情容器

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div></details>
<hr>
<section>
<ol>
<li id="footnote1"><p>这是脚注内容 </p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>页面配置</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/guide/page/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/guide/page/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">页面配置</source>
      <category>使用指南</category>
      <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="页面信息"> 页面信息</h2>
<p>你可以在 Markdown 的 Frontmatter 中设置页面信息。</p>
<ul>
<li>
<p>作者设置为 Ms.Hope。</p>
</li>
<li>
<p>写作时间应为 2020 年 1 月 1 日</p>
</li>
<li>
<p>分类为 “使用指南”</p>
</li>
<li>
<p>标签为 “页面配置” 和 “使用指南”</p>
</li>
</ul>
<h2 id="页面内容"> 页面内容</h2>
<p>你可以自由在这里书写你的 Markdown。</p>
<div><p>Tips</p>
<ul>
<li>
<p>Markdown 文件夹的图片请使用相对链接 <code>./</code> 进行引用。</p>
</li>
<li>
<p><code>.vuepress/public</code> 文件夹的图片，请使用绝对链接 <code>/</code> 进行引用</p>
</li>
</ul>
</div>
<p>主题包含了一个自定义徽章章可以使用:</p>
<blockquote>
<p>文字结尾应该有深蓝色的 徽章文字 徽章。 <i>Not supported content</i></p>
</blockquote>
<h2 id="页面结构"> 页面结构</h2>
<p>此页面应当包含：</p>
<ul>
<li>返回顶部按钮</li>
<li>路径导航</li>
<li>评论</li>
<li>页脚</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>项目主页</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/home/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/home/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">项目主页</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<p>这是普通主页的案例。你可以在这里放置你的主体内容。</p>
<p>想要使用此布局，你需要在页面 front matter 中设置 <code>home: true</code>。</p>
<p>配置项的相关说明详见 <a href="https://vuepress-theme-hope.github.io/zh/guide/layout/home/" target="_blank" rel="noopener noreferrer">项目主页配置</a>。</p>
]]></content:encoded>
    </item>
    <item>
      <title>主要功能与配置演示</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/guide/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/guide/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">主要功能与配置演示</source>
      <category>使用指南</category>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="主要功能与配置演示"> 主要功能与配置演示</h1>
<ul>
<li>
<p><a href="./page.html">页面展示</a></p>
</li>
<li>
<p><a href="./markdown.html">Markdown 展示</a></p>
</li>
<li>
<p><a href="./disable.html">禁用展示</a></p>
</li>
<li>
<p><a href="./encrypt.html">加密展示</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>自定义布局</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/layout/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/layout/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">自定义布局</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<p>您可以使用带有 Markdown 支持的插槽来自定义页面布局。</p>
<div><p>Note</p>
<p>此处仅仅是一个演示，你应该自行根据需求添加样式。</p>


</div>
<template #page-top><p>页面顶部内容</p>
</template><template #page-bottom><p>页面底部内容</p>
</template><template #content-top><p>内容顶部内容</p>
</template><template #content-bottom><p>内容底部内容</p>
</template><template #navbar-start><p>导航栏起始内容</p>
</template><template #navbar-center><p>导航栏中部内容</p>
</template><template #navbar-end><p>导航栏末尾内容</p>
</template><template #sidebar-top><p>侧边栏顶部内容</p>
</template><template #sidebar-center><p>侧边栏中部内容</p>
</template><template #sidebar-bottom><p>侧边栏底部内容</p>
</template><p>更多详情，详见 <a href="https://vuepress-theme-hope.github.io/zh/guide/layout/custom/" target="_blank" rel="noopener noreferrer">自定义布局</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>幻灯片页</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/slides/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/slides/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">幻灯片页</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[
<i>Not supported content</i>]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/logo.svg" type="image/svg+xml"/>
    </item>
    <item>
      <title>博客主页</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/zh/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/vuepress-blog/rss.xml">博客主页</source>
      <pubDate>Wed, 16 Feb 2022 09:13:49 GMT</pubDate>
      <content:encoded><![CDATA[<p>这是一个博客主页。</p>
<p>要使用此布局，您应该在页面前端设置 <code>blog: true</code> 和 <code>home: true</code>。</p>
<p>相关配置文档请见 <a href="https://vuepress-theme-hope.github.io/zh/guide/blog/home/" target="_blank" rel="noopener noreferrer">博客主页</a></p>
]]></content:encoded>
    </item>
  </channel>
</rss>